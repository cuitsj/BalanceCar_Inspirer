<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\BalanceCar.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\BalanceCar.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Wed Oct 12 16:35:05 2022
<BR><P>
<H3>Maximum Stack Usage =        296 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
TASK_BALANCE::BALANCE_FUN(void*) &rArr; DMP_Init() &rArr; run_self_test() &rArr; mpu_run_self_test &rArr; get_st_biases(long*, long*, unsigned char) &rArr; OS::delay_ms(unsigned long long) &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; _rt_timer_remove
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[2c]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2c]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[2c]">ADC_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[14]">BusFault_Handler</a> from gd32f4xx_it.o(i.BusFault_Handler) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[30]">CAN0_EWMC_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[2e]">CAN0_RX0_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[2f]">CAN0_RX1_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[2d]">CAN0_TX_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[5c]">CAN1_EWMC_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[5a]">CAN1_RX0_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[5b]">CAN1_RX1_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[59]">CAN1_TX_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[68]">DCI_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[25]">DMA0_Channel0_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[26]">DMA0_Channel1_IRQHandler</a> from gd32f4xx_it.o(i.DMA0_Channel1_IRQHandler) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[27]">DMA0_Channel2_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[28]">DMA0_Channel3_IRQHandler</a> from gd32f4xx_it.o(i.DMA0_Channel3_IRQHandler) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[29]">DMA0_Channel4_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[2a]">DMA0_Channel5_IRQHandler</a> from gd32f4xx_it.o(i.DMA0_Channel5_IRQHandler) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[2b]">DMA0_Channel6_IRQHandler</a> from gd32f4xx_it.o(i.DMA0_Channel6_IRQHandler) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[49]">DMA0_Channel7_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[52]">DMA1_Channel0_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[53]">DMA1_Channel1_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[54]">DMA1_Channel2_IRQHandler</a> from gd32f4xx_it.o(i.DMA1_Channel2_IRQHandler) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[55]">DMA1_Channel3_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[56]">DMA1_Channel4_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[5e]">DMA1_Channel5_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[5f]">DMA1_Channel6_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[60]">DMA1_Channel7_IRQHandler</a> from gd32f4xx_it.o(i.DMA1_Channel7_IRQHandler) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[17]">DebugMon_Handler</a> from gd32f4xx_it.o(i.DebugMon_Handler) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[57]">ENET_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[58]">ENET_WKUP_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[4a]">EXMC_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[20]">EXTI0_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[42]">EXTI10_15_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[21]">EXTI1_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[22]">EXTI2_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[23]">EXTI3_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[24]">EXTI4_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[31]">EXTI5_9_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[1e]">FMC_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[6a]">FPU_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[12]">HardFault_Handler</a> from context_rvds.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[3a]">I2C0_ER_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[39]">I2C0_EV_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[3c]">I2C1_ER_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[3b]">I2C1_EV_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[63]">I2C2_ER_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[62]">I2C2_EV_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[72]">IPA_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[1b]">LVD_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[13]">MemManage_Handler</a> from gd32f4xx_it.o(i.MemManage_Handler) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[11]">NMI_Handler</a> from gd32f4xx_it.o(i.NMI_Handler) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[18]">PendSV_Handler</a> from context_rvds.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[1f]">RCU_CTC_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[43]">RTC_Alarm_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[1d]">RTC_WKUP_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[10]">Reset_Handler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[4b]">SDIO_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[3d]">SPI0_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[3e]">SPI1_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[4d]">SPI2_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[6d]">SPI3_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[6e]">SPI4_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[6f]">SPI5_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[16]">SVC_Handler</a> from gd32f4xx_it.o(i.SVC_Handler) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[19]">SysTick_Handler</a> from board.o(i.SysTick_Handler) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[73]">SystemInit</a> from system_gd32f4xx.o(i.SystemInit) referenced from startup_gd32f450.o(.text)
 <LI><a href="#[1c]">TAMPER_STAMP_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[32]">TIMER0_BRK_TIMER8_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[35]">TIMER0_Channel_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[34]">TIMER0_TRG_CMT_TIMER10_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[33]">TIMER0_UP_TIMER9_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[36]">TIMER1_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[37]">TIMER2_IRQHandler</a> from gd32f4xx_it.o(i.TIMER2_IRQHandler) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[38]">TIMER3_IRQHandler</a> from gd32f4xx_it.o(i.TIMER3_IRQHandler) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[4c]">TIMER4_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[50]">TIMER5_DAC_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[51]">TIMER6_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[45]">TIMER7_BRK_TIMER11_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[48]">TIMER7_Channel_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[47]">TIMER7_TRG_CMT_TIMER13_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[46]">TIMER7_UP_TIMER12_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[71]">TLI_ER_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[70]">TLI_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[69]">TRNG_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[4e]">UART3_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[4f]">UART4_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[6b]">UART6_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[6c]">UART7_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[3f]">USART0_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[40]">USART1_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[41]">USART2_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[61]">USART5_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[5d]">USBFS_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[44]">USBFS_WKUP_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[65]">USBHS_EP1_In_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[64]">USBHS_EP1_Out_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[67]">USBHS_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[66]">USBHS_WKUP_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[15]">UsageFault_Handler</a> from gd32f4xx_it.o(i.UsageFault_Handler) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[1a]">WWDGT_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[7b]">__default_new_handler()</a> from arm_newhandler_noexceptions.o(.text) referenced from new.o(i._Znwj)
 <LI><a href="#[76]">TASK_MUSIC::MUSIC_FUN(void*)</a> from task_music.o(i._ZN10TASK_MUSIC9MUSIC_FUNEPv) referenced from task_music.o(i._ZN10TASK_MUSICC1Ev)
 <LI><a href="#[80]">UART0_F450::Init(unsigned)</a> from uart_f450.o(i._ZN10UART0_F4504InitEj) referenced from uart_f450.o(.constdata__ZTV10UART0_F450)
 <LI><a href="#[81]">UART1_F450::Init(unsigned)</a> from uart_f450.o(i._ZN10UART1_F4504InitEj) referenced from uart_f450.o(.constdata__ZTV10UART1_F450)
 <LI><a href="#[77]">TASK_SCREEN::SCREEN_FUN(void*)</a> from task_screen.o(i._ZN11TASK_SCREEN10SCREEN_FUNEPv) referenced from task_screen.o(i._ZN11TASK_SCREENC1Ev)
 <LI><a href="#[78]">TASK_BALANCE::BALANCE_FUN(void*)</a> from task_balance.o(i._ZN12TASK_BALANCE11BALANCE_FUNEPv) referenced from task_balance.o(i._ZN12TASK_BALANCEC1Ev)
 <LI><a href="#[82]">IO::Set()</a> from io_f450.o(i._ZN2IO3SetEv) referenced from io_f450.o(.constdata__ZTV2IO)
 <LI><a href="#[85]">IO::Gets()</a> from io_f450.o(i._ZN2IO4GetsEv) referenced from io_f450.o(.constdata__ZTV2IO)
 <LI><a href="#[86]">IO::Init()</a> from io_f450.o(i._ZN2IO4InitEv) referenced from io_f450.o(.constdata__ZTV2IO)
 <LI><a href="#[83]">IO::Reset()</a> from io_f450.o(i._ZN2IO5ResetEv) referenced from io_f450.o(.constdata__ZTV2IO)
 <LI><a href="#[84]">IO::Toggle()</a> from io_f450.o(i._ZN2IO6ToggleEv) referenced from io_f450.o(.constdata__ZTV2IO)
 <LI><a href="#[75]">[local to arm_exceptions_c]::__default_terminate_handler()</a> from arm_exceptions_globs.o(.text) referenced from arm_exceptions_globs.o(.text)
 <LI><a href="#[87]">ADC::Init()</a> from bsp_f450.o(i._ZN3ADC4InitEv) referenced from bsp_f450.o(.constdata__ZTV3ADC)
 <LI><a href="#[88]">ADC::PeriodRun()</a> from bsp_f450.o(i._ZN3ADC9PeriodRunEv) referenced from bsp_f450.o(.constdata__ZTV3ADC)
 <LI><a href="#[89]">TIM::Init()</a> from bsp_f450.o(i._ZN3TIM4InitEv) referenced from bsp_f450.o(.constdata__ZTV3TIM)
 <LI><a href="#[8c]">TIM::ReadCnt()</a> from bsp_f450.o(i._ZN3TIM7ReadCntEv) referenced from bsp_f450.o(.constdata__ZTV3TIM)
 <LI><a href="#[8c]">TIM::ReadCnt()</a> from bsp_f450.o(i._ZN3TIM7ReadCntEv) referenced from tim_f450.o(.constdata__ZTV9TIM0_F450)
 <LI><a href="#[8c]">TIM::ReadCnt()</a> from bsp_f450.o(i._ZN3TIM7ReadCntEv) referenced from tim_f450.o(.constdata__ZTV9TIM8_F450)
 <LI><a href="#[8a]">TIM::SetDUTY(short)</a> from bsp_f450.o(i._ZN3TIM7SetDUTYEs) referenced from bsp_f450.o(.constdata__ZTV3TIM)
 <LI><a href="#[8a]">TIM::SetDUTY(short)</a> from bsp_f450.o(i._ZN3TIM7SetDUTYEs) referenced from tim_f450.o(.constdata__ZTV9TIM2_F450)
 <LI><a href="#[8a]">TIM::SetDUTY(short)</a> from bsp_f450.o(i._ZN3TIM7SetDUTYEs) referenced from tim_f450.o(.constdata__ZTV9TIM3_F450)
 <LI><a href="#[8b]">TIM::SetFREQ(float)</a> from bsp_f450.o(i._ZN3TIM7SetFREQEf) referenced from bsp_f450.o(.constdata__ZTV3TIM)
 <LI><a href="#[8b]">TIM::SetFREQ(float)</a> from bsp_f450.o(i._ZN3TIM7SetFREQEf) referenced from tim_f450.o(.constdata__ZTV9TIM0_F450)
 <LI><a href="#[8b]">TIM::SetFREQ(float)</a> from bsp_f450.o(i._ZN3TIM7SetFREQEf) referenced from tim_f450.o(.constdata__ZTV9TIM2_F450)
 <LI><a href="#[8b]">TIM::SetFREQ(float)</a> from bsp_f450.o(i._ZN3TIM7SetFREQEf) referenced from tim_f450.o(.constdata__ZTV9TIM3_F450)
 <LI><a href="#[8d]">UART::Init(unsigned)</a> from bsp_f450.o(i._ZN4UART4InitEj) referenced from bsp_f450.o(.constdata__ZTV4UART)
 <LI><a href="#[8e]">IO_F450::Set()</a> from io_f450.o(i._ZN7IO_F4503SetEv) referenced from io_f450.o(.constdata__ZTV7IO_F450)
 <LI><a href="#[91]">IO_F450::Gets()</a> from io_f450.o(i._ZN7IO_F4504GetsEv) referenced from io_f450.o(.constdata__ZTV7IO_F450)
 <LI><a href="#[92]">IO_F450::Init()</a> from io_f450.o(i._ZN7IO_F4504InitEv) referenced from io_f450.o(.constdata__ZTV7IO_F450)
 <LI><a href="#[8f]">IO_F450::Reset()</a> from io_f450.o(i._ZN7IO_F4505ResetEv) referenced from io_f450.o(.constdata__ZTV7IO_F450)
 <LI><a href="#[90]">IO_F450::Toggle()</a> from io_f450.o(i._ZN7IO_F4506ToggleEv) referenced from io_f450.o(.constdata__ZTV7IO_F450)
 <LI><a href="#[79]">TASK_MPU::MPU_FUN(void*)</a> from task_mpu.o(i._ZN8TASK_MPU7MPU_FUNEPv) referenced from task_mpu.o(i._ZN8TASK_MPUC1Ev)
 <LI><a href="#[93]">ADC0_F450::Init()</a> from adc_f450.o(i._ZN9ADC0_F4504InitEv) referenced from adc_f450.o(.constdata__ZTV9ADC0_F450)
 <LI><a href="#[94]">ADC0_F450::PeriodRun()</a> from adc_f450.o(i._ZN9ADC0_F4509PeriodRunEv) referenced from adc_f450.o(.constdata__ZTV9ADC0_F450)
 <LI><a href="#[7a]">OS_Timer1::OS_Timer1_FUN(void*)</a> from os_timer.o(i._ZN9OS_Timer113OS_Timer1_FUNEPv) referenced from os_timer.o(i._ZN9OS_Timer1C1Ev)
 <LI><a href="#[95]">TIM0_F450::Init()</a> from tim_f450.o(i._ZN9TIM0_F4504InitEv) referenced from tim_f450.o(.constdata__ZTV9TIM0_F450)
 <LI><a href="#[96]">TIM0_F450::SetDUTY(short)</a> from tim_f450.o(i._ZN9TIM0_F4507SetDUTYEs) referenced from tim_f450.o(.constdata__ZTV9TIM0_F450)
 <LI><a href="#[97]">TIM2_F450::Init()</a> from tim_f450.o(i._ZN9TIM2_F4504InitEv) referenced from tim_f450.o(.constdata__ZTV9TIM2_F450)
 <LI><a href="#[98]">TIM2_F450::ReadCnt()</a> from tim_f450.o(i._ZN9TIM2_F4507ReadCntEv) referenced from tim_f450.o(.constdata__ZTV9TIM2_F450)
 <LI><a href="#[99]">TIM3_F450::Init()</a> from tim_f450.o(i._ZN9TIM3_F4504InitEv) referenced from tim_f450.o(.constdata__ZTV9TIM3_F450)
 <LI><a href="#[9a]">TIM3_F450::ReadCnt()</a> from tim_f450.o(i._ZN9TIM3_F4507ReadCntEv) referenced from tim_f450.o(.constdata__ZTV9TIM3_F450)
 <LI><a href="#[9b]">TIM8_F450::Init()</a> from tim_f450.o(i._ZN9TIM8_F4504InitEv) referenced from tim_f450.o(.constdata__ZTV9TIM8_F450)
 <LI><a href="#[9c]">TIM8_F450::SetDUTY(short)</a> from tim_f450.o(i._ZN9TIM8_F4507SetDUTYEs) referenced from tim_f450.o(.constdata__ZTV9TIM8_F450)
 <LI><a href="#[9d]">TIM8_F450::SetFREQ(float)</a> from tim_f450.o(i._ZN9TIM8_F4507SetFREQEf) referenced from tim_f450.o(.constdata__ZTV9TIM8_F450)
 <LI><a href="#[a3]">__main</a> from __main.o(!!!main) referenced from startup_gd32f450.o(.text)
 <LI><a href="#[a2]">__sti___8_main_cpp_BSP</a> from main.o(i.__sti___8_main_cpp_BSP) referenced from main.o(.init_array)
 <LI><a href="#[7e]">main_thread_entry</a> from components.o(i.main_thread_entry) referenced from components.o(i.rt_application_init)
 <LI><a href="#[7c]">rt_thread_exit</a> from thread.o(i.rt_thread_exit) referenced from thread.o(i._rt_thread_init)
 <LI><a href="#[7f]">rt_thread_idle_entry</a> from idle.o(i.rt_thread_idle_entry) referenced from idle.o(i.rt_thread_idle_init)
 <LI><a href="#[7d]">rt_thread_timeout</a> from thread.o(i.rt_thread_timeout) referenced from thread.o(i._rt_thread_init)
 <LI><a href="#[a0]">rti_board_end</a> from components.o(i.rti_board_end) referenced from components.o(.rti_fn.1.end)
 <LI><a href="#[9f]">rti_board_start</a> from components.o(i.rti_board_start) referenced from components.o(.rti_fn.0.end)
 <LI><a href="#[a1]">rti_end</a> from components.o(i.rti_end) referenced from components.o(.rti_fn.6.end)
 <LI><a href="#[9e]">rti_start</a> from components.o(i.rti_start) referenced from components.o(.rti_fn.0)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[a3]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[a5]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[a7]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[203]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[204]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[205]"></a>__decompress</STRONG> (Thumb, 100 bytes, Stack size unknown bytes, __dclz77c.o(!!dclz77c), UNUSED)

<P><STRONG><a name="[206]"></a>__decompress2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dclz77c.o(!!dclz77c), UNUSED)

<P><STRONG><a name="[207]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[b0]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[a8]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[aa]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[208]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[209]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[20a]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[20b]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[20c]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[ac]"></a>__rt_lib_init_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_cpp_2 &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[20d]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[20e]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[20f]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[210]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[211]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[212]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[213]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[214]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[215]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[216]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[217]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[218]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[219]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[21a]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[21b]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[b5]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[21c]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[21d]"></a>__rt_lib_shutdown_fini_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[21e]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[21f]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000011))

<P><STRONG><a name="[220]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000012))

<P><STRONG><a name="[221]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[222]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[223]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[a6]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[224]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[ad]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[af]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[225]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[b1]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; rtthread_startup &rArr; rt_thread_idle_init &rArr; rt_thread_init &rArr; _rt_thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[226]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[d1]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[b4]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[227]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[b6]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[10]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[228]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.emb_text), UNUSED)

<P><STRONG><a name="[2c]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>CAN0_EWMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>CAN0_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>CAN0_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>CAN0_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>CAN1_EWMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>DCI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>DMA0_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>DMA0_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>DMA0_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>DMA0_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>DMA1_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>ENET_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>ENET_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>EXMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>EXTI10_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>EXTI5_9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>I2C0_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>I2C0_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>IPA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>LVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>RCU_CTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>SPI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>TAMPER_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>TIMER0_BRK_TIMER8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIMER0_Channel_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>TIMER0_TRG_CMT_TIMER10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>TIMER0_UP_TIMER9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>TIMER4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>TIMER5_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>TIMER6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>TIMER7_BRK_TIMER11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>TIMER7_Channel_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>TIMER7_TRG_CMT_TIMER13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>TIMER7_UP_TIMER12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>TLI_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>TLI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>TRNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>UART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>UART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>UART7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>USART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>USART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>USBFS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>USBFS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>USBHS_EP1_In_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>USBHS_EP1_Out_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>USBHS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>USBHS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>WWDGT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[d0]"></a>__user_initial_stackheap</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[188]"></a>rt_hw_interrupt_disable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_cleanup_execute
</UL>

<P><STRONG><a name="[189]"></a>rt_hw_interrupt_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_cleanup_execute
</UL>

<P><STRONG><a name="[1cf]"></a>rt_hw_context_switch</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[1d0]"></a>rt_hw_context_switch_interrupt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[18]"></a>PendSV_Handler</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[1da]"></a>rt_hw_context_switch_to</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
</UL>

<P><STRONG><a name="[229]"></a>rt_hw_interrupt_thread_switch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, context_rvds.o(.text), UNUSED)

<P><STRONG><a name="[12]"></a>HardFault_Handler</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HardFault_Handler &rArr; rt_hw_hard_fault_exception
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[e8]"></a>__aeabi_ldivmod</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Filter()
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_st_biases(long*, long*, unsigned char)
</UL>

<P><STRONG><a name="[b9]"></a>_ll_sdiv</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, llsdiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[1a5]"></a>memcmp</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_load_firmware
</UL>

<P><STRONG><a name="[bb]"></a>__aeabi_memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_lp_quat
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_6x_lp_quat
</UL>

<P><STRONG><a name="[22a]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[8]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[7]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[a4]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, init_aeabi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_cpp_2
</UL>

<P><STRONG><a name="[173]"></a>__rt_new_handler_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_new_handler_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>

<P><STRONG><a name="[bd]"></a>malloc</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, h1_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_exceptions_buffer_init
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>

<P><STRONG><a name="[ba]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_sdiv
</UL>

<P><STRONG><a name="[22b]"></a>_ll_udiv</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[c0]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[c2]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
</UL>

<P><STRONG><a name="[22c]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[c3]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[bc]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[7b]"></a>__default_new_handler()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, arm_newhandler_noexceptions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = __default_new_handler() &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> new.o(i._Znwj)
</UL>
<P><STRONG><a name="[22d]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[cf]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[22e]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[be]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[c1]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>

<P><STRONG><a name="[22f]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[230]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[231]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[232]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[f]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[3]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[bf]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[c7]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[ab]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[c9]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[9]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[ca]"></a>free</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>

<P><STRONG><a name="[233]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[234]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[235]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[c4]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[c5]"></a>std::terminate()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, arm_exceptions_terminate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_new_handler()
</UL>

<P><STRONG><a name="[cb]"></a>__cxa_get_globals</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, arm_exceptions_globs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_exceptions_buffer_init
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_eh_globals_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>

<P><STRONG><a name="[ae]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[cd]"></a>__rt_eh_globals_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_eh_globals_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>

<P><STRONG><a name="[c6]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[b3]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[cc]"></a>abort</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, abort.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to arm_exceptions_c]::__default_terminate_handler()
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>

<P><STRONG><a name="[c8]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[ce]"></a>__ARM_exceptions_buffer_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, arm_exceptions_mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>

<P><STRONG><a name="[236]"></a>__ARM_exceptions_buffer_allocate</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, arm_exceptions_mem.o(.text), UNUSED)

<P><STRONG><a name="[237]"></a>__ARM_exceptions_buffer_free</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, arm_exceptions_mem.o(.text), UNUSED)

<P><STRONG><a name="[b7]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[238]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[239]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[23a]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[d4]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[d2]"></a>__rt_SIGABRT</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[d3]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[d6]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
</UL>

<P><STRONG><a name="[d5]"></a>__rt_SIGABRT_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[d7]"></a>_ttywrch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[b2]"></a>main</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, components.o(i.$Sub$$main))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = main &rArr; rtthread_startup &rArr; rt_thread_idle_init &rArr; rt_thread_init &rArr; _rt_thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[14]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32f4xx_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>DMA0_Channel1_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gd32f4xx_it.o(i.DMA0_Channel1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DMA0_Channel1_IRQHandler &rArr; dma_interrupt_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_interrupt_flag_clear
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_interrupt_flag_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>DMA0_Channel3_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gd32f4xx_it.o(i.DMA0_Channel3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DMA0_Channel3_IRQHandler &rArr; dma_interrupt_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_interrupt_flag_clear
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_interrupt_flag_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>DMA0_Channel5_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gd32f4xx_it.o(i.DMA0_Channel5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DMA0_Channel5_IRQHandler &rArr; dma_interrupt_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_interrupt_flag_clear
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_interrupt_flag_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>DMA0_Channel6_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gd32f4xx_it.o(i.DMA0_Channel6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DMA0_Channel6_IRQHandler &rArr; dma_interrupt_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_interrupt_flag_clear
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_interrupt_flag_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gd32f4xx_it.o(i.DMA1_Channel2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DMA1_Channel2_IRQHandler &rArr; dma_interrupt_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_interrupt_flag_clear
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_interrupt_flag_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gd32f4xx_it.o(i.DMA1_Channel7_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DMA1_Channel7_IRQHandler &rArr; dma_interrupt_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_interrupt_flag_clear
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_interrupt_flag_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32f4xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[db]"></a>LCD_Address_Set</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, lcd_spi.o(i.LCD_Address_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LCD_Address_Set &rArr; LCD_WR_REG &rArr; LCD_Writ_Bus
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowPicture
</UL>

<P><STRONG><a name="[de]"></a>LCD_Init</STRONG> (Thumb, 448 bytes, Stack size 8 bytes, lcd_spi.o(i.LCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LCD_Init &rArr; OS::delay_ms(unsigned long long) &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS::delay_ms(unsigned long long)
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA8
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_SCREEN::SCREEN_FUN(void*)
</UL>

<P><STRONG><a name="[e1]"></a>LCD_ShowPicture</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, lcd.o(i.LCD_ShowPicture))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = LCD_ShowPicture &rArr; LCD_Address_Set &rArr; LCD_WR_REG &rArr; LCD_Writ_Bus
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA8
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Address_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_SCREEN::SCREEN_FUN(void*)
</UL>

<P><STRONG><a name="[dd]"></a>LCD_WR_DATA</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lcd_spi.o(i.LCD_WR_DATA))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LCD_WR_DATA &rArr; LCD_Writ_Bus
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Writ_Bus
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Address_Set
</UL>

<P><STRONG><a name="[e0]"></a>LCD_WR_DATA8</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lcd_spi.o(i.LCD_WR_DATA8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LCD_WR_DATA8 &rArr; LCD_Writ_Bus
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Writ_Bus
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowPicture
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[dc]"></a>LCD_WR_REG</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, lcd_spi.o(i.LCD_WR_REG))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LCD_WR_REG &rArr; LCD_Writ_Bus
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Writ_Bus
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Address_Set
</UL>

<P><STRONG><a name="[e2]"></a>LCD_Writ_Bus</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, lcd_spi.o(i.LCD_Writ_Bus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_Writ_Bus
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA8
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
</UL>

<P><STRONG><a name="[13]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32f4xx_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32f4xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32f4xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, board.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SysTick_Handler &rArr; rt_os_tick_callback &rArr; rt_tick_increase &rArr; rt_timer_check &rArr; rt_timer_start &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_os_tick_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>SystemInit</STRONG> (Thumb, 184 bytes, Stack size 8 bytes, system_gd32f4xx.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemInit &rArr; system_clock_config
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(.text)
</UL>
<P><STRONG><a name="[37]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, gd32f4xx_it.o(i.TIMER2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIMER2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_flag_clear
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_flag_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, gd32f4xx_it.o(i.TIMER3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIMER3_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_flag_clear
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_flag_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32f4xx_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[e7]"></a>Data_Filter()</STRONG> (Thumb, 674 bytes, Stack size 64 bytes, task_balance.o(i._Z11Data_Filterv))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Data_Filter() &rArr; __aeabi_ldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2f
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Balance_Control()
</UL>

<P><STRONG><a name="[ea]"></a>IIC_WaitAck()</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, mpu_iic.o(i._Z11IIC_WaitAckv))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = IIC_WaitAck() &rArr; IIC_Stop() &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_delay()
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop()
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Byte(unsigned char, unsigned char, unsigned char)
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Len(unsigned char, unsigned char, unsigned char, unsigned char*)
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Byte(unsigned char, unsigned char)
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Len(unsigned char, unsigned char, unsigned char, unsigned char*)
</UL>

<P><STRONG><a name="[ee]"></a>MPU_Set_LPF(unsigned short)</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, mpu9250.o(i._Z11MPU_Set_LPFt))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = MPU_Set_LPF(unsigned short) &rArr; MPU_Write_Byte(unsigned char, unsigned char, unsigned char) &rArr; IIC_SendByte(unsigned char) &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Byte(unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Set_Rate(unsigned short)
</UL>

<P><STRONG><a name="[111]"></a>PID_Realize(PID*, float*, int, int)</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, task_balance.o(i._Z11PID_RealizeP3PIDPfii))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PID_Realize(PID*, float*, int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Balance_Control()
</UL>

<P><STRONG><a name="[f0]"></a>IIC_ReadByte(unsigned char)</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, mpu_iic.o(i._Z12IIC_ReadByteh))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = IIC_ReadByte(unsigned char) &rArr; IIC_NAck() &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_delay()
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_NAck()
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Ack()
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Byte(unsigned char, unsigned char)
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Len(unsigned char, unsigned char, unsigned char, unsigned char*)
</UL>

<P><STRONG><a name="[f3]"></a>IIC_SendByte(unsigned char)</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, mpu_iic.o(i._Z12IIC_SendByteh))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = IIC_SendByte(unsigned char) &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_delay()
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Byte(unsigned char, unsigned char, unsigned char)
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Len(unsigned char, unsigned char, unsigned char, unsigned char*)
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Byte(unsigned char, unsigned char)
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Len(unsigned char, unsigned char, unsigned char, unsigned char*)
</UL>

<P><STRONG><a name="[f4]"></a>MPU9250_Init()</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, mpu9250.o(i._Z12MPU9250_Initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MPU9250_Init() &rArr; OS::delay_ms(unsigned long long) &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS::delay_ms(unsigned long long)
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Set_Accel_Fsr(unsigned char)
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Set_Gyro_Fsr(unsigned char)
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Set_Rate(unsigned short)
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Byte(unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_BALANCE::BALANCE_FUN(void*)
</UL>

<P><STRONG><a name="[f8]"></a>MPU_Read_Len(unsigned char, unsigned char, unsigned char, unsigned char*)</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, mpu_iic.o(i._Z12MPU_Read_LenhhhPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = MPU_Read_Len(unsigned char, unsigned char, unsigned char, unsigned char*) &rArr; IIC_ReadByte(unsigned char) &rArr; IIC_NAck() &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start()
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop()
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SendByte(unsigned char)
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_ReadByte(unsigned char)
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_WaitAck()
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_accel_prod_shift(float*)
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_self_test(long*, long*)
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_st_biases(long*, long*, unsigned char)
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_bypass
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_read_mem
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_read_fifo_stream
</UL>

<P><STRONG><a name="[f7]"></a>MPU_Set_Rate(unsigned short)</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, mpu9250.o(i._Z12MPU_Set_Ratet))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = MPU_Set_Rate(unsigned short) &rArr; MPU_Set_LPF(unsigned short) &rArr; MPU_Write_Byte(unsigned char, unsigned char, unsigned char) &rArr; IIC_SendByte(unsigned char) &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Set_LPF(unsigned short)
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Byte(unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU9250_Init()
</UL>

<P><STRONG><a name="[10a]"></a>PID_Increase(PID*, float*, int, int)</STRONG> (Thumb, 94 bytes, Stack size 20 bytes, task_balance.o(i._Z12PID_IncreaseP3PIDPfii))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = PID_Increase(PID*, float*, int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Balance_Control()
</UL>

<P><STRONG><a name="[fa]"></a>MPU_Read_Byte(unsigned char, unsigned char)</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, mpu_iic.o(i._Z13MPU_Read_Bytehh))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = MPU_Read_Byte(unsigned char, unsigned char) &rArr; IIC_ReadByte(unsigned char) &rArr; IIC_NAck() &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start()
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop()
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_NAck()
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SendByte(unsigned char)
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_ReadByte(unsigned char)
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_WaitAck()
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Get_Accelerometer()
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Get_Gyroscope()
</UL>

<P><STRONG><a name="[fb]"></a>MPU_Write_Len(unsigned char, unsigned char, unsigned char, unsigned char*)</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, mpu_iic.o(i._Z13MPU_Write_LenhhhPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = MPU_Write_Len(unsigned char, unsigned char, unsigned char, unsigned char*) &rArr; IIC_SendByte(unsigned char) &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start()
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop()
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SendByte(unsigned char)
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_WaitAck()
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_int_enable(unsigned char)
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_st_biases(long*, long*, unsigned char)
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sensors
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sample_rate
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_dmp_state
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_init
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_lpf
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_int_latched
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_gyro_fsr
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_bypass
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_accel_fsr
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_reset_fifo
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_read_mem
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_lp_accel_mode
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_load_firmware
</UL>

<P><STRONG><a name="[10b]"></a>range_protect(int, int, int)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, task_balance.o(i._Z13range_protectiii))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Balance_Control()
</UL>

<P><STRONG><a name="[ef]"></a>MPU_Write_Byte(unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, mpu_iic.o(i._Z14MPU_Write_Bytehhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = MPU_Write_Byte(unsigned char, unsigned char, unsigned char) &rArr; IIC_SendByte(unsigned char) &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start()
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay5ms()
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop()
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SendByte(unsigned char)
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_WaitAck()
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU9250_Init()
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Set_Accel_Fsr(unsigned char)
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Set_Gyro_Fsr(unsigned char)
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Set_Rate(unsigned short)
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Set_LPF(unsigned short)
</UL>

<P><STRONG><a name="[104]"></a>MUSIC_Analysis()</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, task_music.o(i._Z14MUSIC_Analysisv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = MUSIC_Analysis() &rArr; OS::delay_ms(unsigned long long) &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS::delay_ms(unsigned long long)
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_MUSIC::MUSIC_FUN(void*)
</UL>

<P><STRONG><a name="[107]"></a>Balance_Control()</STRONG> (Thumb, 438 bytes, Stack size 40 bytes, task_balance.o(i._Z15Balance_Controlv))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = Balance_Control() &rArr; Read_DMP() &rArr; dmp_read_fifo &rArr; mpu_read_fifo_stream &rArr; MPU_Read_Len(unsigned char, unsigned char, unsigned char, unsigned char*) &rArr; IIC_ReadByte(unsigned char) &rArr; IIC_NAck() &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_DMP()
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Get_Accelerometer()
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Get_Gyroscope()
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;range_protect(int, int, int)
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Increase(PID*, float*, int, int)
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Realize(PID*, float*, int, int)
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Filter()
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_BALANCE::BALANCE_FUN(void*)
</UL>

<P><STRONG><a name="[f5]"></a>MPU_Set_Gyro_Fsr(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, mpu9250.o(i._Z16MPU_Set_Gyro_Fsrh))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = MPU_Set_Gyro_Fsr(unsigned char) &rArr; MPU_Write_Byte(unsigned char, unsigned char, unsigned char) &rArr; IIC_SendByte(unsigned char) &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Byte(unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU9250_Init()
</UL>

<P><STRONG><a name="[108]"></a>MPU_Get_Gyroscope()</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, mpu9250.o(i._Z17MPU_Get_Gyroscopev))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = MPU_Get_Gyroscope() &rArr; MPU_Read_Byte(unsigned char, unsigned char) &rArr; IIC_ReadByte(unsigned char) &rArr; IIC_NAck() &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Byte(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Balance_Control()
</UL>

<P><STRONG><a name="[f6]"></a>MPU_Set_Accel_Fsr(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, mpu9250.o(i._Z17MPU_Set_Accel_Fsrh))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = MPU_Set_Accel_Fsr(unsigned char) &rArr; MPU_Write_Byte(unsigned char, unsigned char, unsigned char) &rArr; IIC_SendByte(unsigned char) &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Byte(unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU9250_Init()
</UL>

<P><STRONG><a name="[109]"></a>MPU_Get_Accelerometer()</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, mpu9250.o(i._Z21MPU_Get_Accelerometerv))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = MPU_Get_Accelerometer() &rArr; MPU_Read_Byte(unsigned char, unsigned char) &rArr; IIC_ReadByte(unsigned char) &rArr; IIC_NAck() &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Byte(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Balance_Control()
</UL>

<P><STRONG><a name="[f1]"></a>IIC_Ack()</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, mpu_iic.o(i._Z7IIC_Ackv))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = IIC_Ack() &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_delay()
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_ReadByte(unsigned char)
</UL>

<P><STRONG><a name="[116]"></a>DMP_Init()</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, mpu9250.o(i._Z8DMP_Initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = DMP_Init() &rArr; run_self_test() &rArr; mpu_run_self_test &rArr; get_st_biases(long*, long*, unsigned char) &rArr; OS::delay_ms(unsigned long long) &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sensors
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sample_rate
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_dmp_state
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_init
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_configure_fifo
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_orientation
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_fifo_rate
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_load_motion_driver_firmware
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_orientation_matrix_to_scalar(const signed char*)
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_self_test()
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_BALANCE::BALANCE_FUN(void*)
</UL>

<P><STRONG><a name="[f2]"></a>IIC_NAck()</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, mpu_iic.o(i._Z8IIC_NAckv))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = IIC_NAck() &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_delay()
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Byte(unsigned char, unsigned char)
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_ReadByte(unsigned char)
</UL>

<P><STRONG><a name="[ed]"></a>IIC_Stop()</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, mpu_iic.o(i._Z8IIC_Stopv))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = IIC_Stop() &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_delay()
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Byte(unsigned char, unsigned char, unsigned char)
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Len(unsigned char, unsigned char, unsigned char, unsigned char*)
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Byte(unsigned char, unsigned char)
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Len(unsigned char, unsigned char, unsigned char, unsigned char*)
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_WaitAck()
</UL>

<P><STRONG><a name="[110]"></a>Read_DMP()</STRONG> (Thumb, 390 bytes, Stack size 64 bytes, mpu9250.o(i._Z8Read_DMPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = Read_DMP() &rArr; dmp_read_fifo &rArr; mpu_read_fifo_stream &rArr; MPU_Read_Len(unsigned char, unsigned char, unsigned char, unsigned char*) &rArr; IIC_ReadByte(unsigned char) &rArr; IIC_NAck() &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_read_fifo
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Balance_Control()
</UL>

<P><STRONG><a name="[103]"></a>delay5ms()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mpu_iic.o(i._Z8delay5msv))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Byte(unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[f9]"></a>IIC_Start()</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, mpu_iic.o(i._Z9IIC_Startv))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = IIC_Start() &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_delay()
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Byte(unsigned char, unsigned char, unsigned char)
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Len(unsigned char, unsigned char, unsigned char, unsigned char*)
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Byte(unsigned char, unsigned char)
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Len(unsigned char, unsigned char, unsigned char, unsigned char*)
</UL>

<P><STRONG><a name="[ec]"></a>IIC_delay()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mpu_iic.o(i._Z9IIC_delayv))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start()
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop()
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_NAck()
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Ack()
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SendByte(unsigned char)
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_ReadByte(unsigned char)
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_WaitAck()
</UL>

<P><STRONG><a name="[76]"></a>TASK_MUSIC::MUSIC_FUN(void*)</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, task_music.o(i._ZN10TASK_MUSIC9MUSIC_FUNEPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = TASK_MUSIC::MUSIC_FUN(void*) &rArr; MUSIC_Analysis() &rArr; OS::delay_ms(unsigned long long) &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MUSIC_Analysis()
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS::delay_ms(unsigned long long)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_music.o(i._ZN10TASK_MUSICC1Ev)
</UL>
<P><STRONG><a name="[17d]"></a>TASK_MUSIC::TASK_MUSIC()</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, task_music.o(i._ZN10TASK_MUSICC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_BSP
</UL>

<P><STRONG><a name="[23b]"></a>TASK_MUSIC::TASK_MUSIC__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, task_music.o(i._ZN10TASK_MUSICC1Ev), UNUSED)

<P><STRONG><a name="[80]"></a>UART0_F450::Init(unsigned)</STRONG> (Thumb, 366 bytes, Stack size 48 bytes, uart_f450.o(i._ZN10UART0_F4504InitEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = UART0_F450::Init(unsigned) &rArr; usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_word_length_set
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_transmit_config
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_stop_bit_set
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_receive_config
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_parity_config
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_oversample_config
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_enable
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_dma_transmit_config
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_dma_receive_config
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_baudrate_set
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_single_data_para_struct_init
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_interrupt_enable
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_circulation_disable
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_af_set
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_single_data_mode_init
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_deinit
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_subperipheral_select
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_enable
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_options_set
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_f450.o(.constdata__ZTV10UART0_F450)
</UL>
<P><STRONG><a name="[81]"></a>UART1_F450::Init(unsigned)</STRONG> (Thumb, 366 bytes, Stack size 48 bytes, uart_f450.o(i._ZN10UART1_F4504InitEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = UART1_F450::Init(unsigned) &rArr; usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_word_length_set
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_transmit_config
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_stop_bit_set
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_receive_config
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_parity_config
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_oversample_config
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_enable
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_dma_transmit_config
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_dma_receive_config
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_baudrate_set
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_single_data_para_struct_init
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_interrupt_enable
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_circulation_disable
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_af_set
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_single_data_mode_init
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_deinit
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_subperipheral_select
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_enable
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_options_set
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_f450.o(.constdata__ZTV10UART1_F450)
</UL>
<P><STRONG><a name="[77]"></a>TASK_SCREEN::SCREEN_FUN(void*)</STRONG> (Thumb, 772 bytes, Stack size 40 bytes, task_screen.o(i._ZN11TASK_SCREEN10SCREEN_FUNEPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = TASK_SCREEN::SCREEN_FUN(void*) &rArr; LCD_Init &rArr; OS::delay_ms(unsigned long long) &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS::delete_thread(rt_thread*)
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS::timer_start(TIMER*)
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowPicture
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS::delay_ms(unsigned long long)
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_screen.o(i._ZN11TASK_SCREENC1Ev)
</UL>
<P><STRONG><a name="[17b]"></a>TASK_SCREEN::TASK_SCREEN()</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, task_screen.o(i._ZN11TASK_SCREENC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_BSP
</UL>

<P><STRONG><a name="[23c]"></a>TASK_SCREEN::TASK_SCREEN__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, task_screen.o(i._ZN11TASK_SCREENC1Ev), UNUSED)

<P><STRONG><a name="[78]"></a>TASK_BALANCE::BALANCE_FUN(void*)</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, task_balance.o(i._ZN12TASK_BALANCE11BALANCE_FUNEPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = TASK_BALANCE::BALANCE_FUN(void*) &rArr; DMP_Init() &rArr; run_self_test() &rArr; mpu_run_self_test &rArr; get_st_biases(long*, long*, unsigned char) &rArr; OS::delay_ms(unsigned long long) &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMP_Init()
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU9250_Init()
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Balance_Control()
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS::delay_ms(unsigned long long)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_balance.o(i._ZN12TASK_BALANCEC1Ev)
</UL>
<P><STRONG><a name="[17c]"></a>TASK_BALANCE::TASK_BALANCE()</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, task_balance.o(i._ZN12TASK_BALANCEC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_BSP
</UL>

<P><STRONG><a name="[23d]"></a>TASK_BALANCE::TASK_BALANCE__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, task_balance.o(i._ZN12TASK_BALANCEC1Ev), UNUSED)

<P><STRONG><a name="[82]"></a>IO::Set()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, io_f450.o(i._ZN2IO3SetEv))
<BR>[Address Reference Count : 1]<UL><LI> io_f450.o(.constdata__ZTV2IO)
</UL>
<P><STRONG><a name="[85]"></a>IO::Gets()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, io_f450.o(i._ZN2IO4GetsEv))
<BR>[Address Reference Count : 1]<UL><LI> io_f450.o(.constdata__ZTV2IO)
</UL>
<P><STRONG><a name="[86]"></a>IO::Init()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, io_f450.o(i._ZN2IO4InitEv))
<BR>[Address Reference Count : 1]<UL><LI> io_f450.o(.constdata__ZTV2IO)
</UL>
<P><STRONG><a name="[83]"></a>IO::Reset()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, io_f450.o(i._ZN2IO5ResetEv))
<BR>[Address Reference Count : 1]<UL><LI> io_f450.o(.constdata__ZTV2IO)
</UL>
<P><STRONG><a name="[84]"></a>IO::Toggle()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, io_f450.o(i._ZN2IO6ToggleEv))
<BR>[Address Reference Count : 1]<UL><LI> io_f450.o(.constdata__ZTV2IO)
</UL>
<P><STRONG><a name="[13f]"></a>OS::timer_stop(TIMER*)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, os.o(i._ZN2OS10timer_stopEP5TIMER))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OS::timer_stop(TIMER*) &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Timer1::OS_Timer1_FUN(void*)
</UL>

<P><STRONG><a name="[13e]"></a>OS::timer_start(TIMER*)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, os.o(i._ZN2OS11timer_startEP5TIMER))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = OS::timer_start(TIMER*) &rArr; rt_timer_start &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_SCREEN::SCREEN_FUN(void*)
</UL>

<P><STRONG><a name="[142]"></a>OS::create_timer(TIMER*)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, os.o(i._ZN2OS12create_timerEP5TIMER))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = OS::create_timer(TIMER*) &rArr; rt_timer_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_create
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[144]"></a>OS::thread_start(rt_thread*)</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, os.o(i._ZN2OS12thread_startEP9rt_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = OS::thread_start(rt_thread*) &rArr; rt_thread_startup &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[13d]"></a>OS::delete_thread(rt_thread*)</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, os.o(i._ZN2OS13delete_threadEP9rt_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = OS::delete_thread(rt_thread*) &rArr; rt_thread_delete &rArr; rt_timer_detach &rArr; rt_object_detach
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_SCREEN::SCREEN_FUN(void*)
</UL>

<P><STRONG><a name="[19d]"></a>OS::Init()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, os.o(i._ZN2OS4InitEv))
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[df]"></a>OS::delay_ms(unsigned long long)</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, os.o(i._ZN2OS8delay_msEy))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = OS::delay_ms(unsigned long long) &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_MUSIC::MUSIC_FUN(void*)
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MUSIC_Analysis()
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_SCREEN::SCREEN_FUN(void*)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU9250_Init()
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_BALANCE::BALANCE_FUN(void*)
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_MPU::MPU_FUN(void*)
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_st_biases(long*, long*, unsigned char)
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sensors
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_init
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_bypass
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[148]"></a>OS::newthread(TASK*)</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, os.o(i._ZN2OS9newthreadEP4TASK))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = OS::newthread(TASK*) &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[87]"></a>ADC::Init()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp_f450.o(i._ZN3ADC4InitEv))
<BR>[Address Reference Count : 1]<UL><LI> bsp_f450.o(.constdata__ZTV3ADC)
</UL>
<P><STRONG><a name="[88]"></a>ADC::PeriodRun()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp_f450.o(i._ZN3ADC9PeriodRunEv))
<BR>[Address Reference Count : 1]<UL><LI> bsp_f450.o(.constdata__ZTV3ADC)
</UL>
<P><STRONG><a name="[89]"></a>TIM::Init()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp_f450.o(i._ZN3TIM4InitEv))
<BR>[Address Reference Count : 1]<UL><LI> bsp_f450.o(.constdata__ZTV3TIM)
</UL>
<P><STRONG><a name="[8c]"></a>TIM::ReadCnt()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bsp_f450.o(i._ZN3TIM7ReadCntEv))
<BR>[Address Reference Count : 3]<UL><LI> bsp_f450.o(.constdata__ZTV3TIM)
<LI> tim_f450.o(.constdata__ZTV9TIM8_F450)
<LI> tim_f450.o(.constdata__ZTV9TIM0_F450)
</UL>
<P><STRONG><a name="[8a]"></a>TIM::SetDUTY(short)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp_f450.o(i._ZN3TIM7SetDUTYEs))
<BR>[Address Reference Count : 3]<UL><LI> bsp_f450.o(.constdata__ZTV3TIM)
<LI> tim_f450.o(.constdata__ZTV9TIM2_F450)
<LI> tim_f450.o(.constdata__ZTV9TIM3_F450)
</UL>
<P><STRONG><a name="[8b]"></a>TIM::SetFREQ(float)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp_f450.o(i._ZN3TIM7SetFREQEf))
<BR>[Address Reference Count : 4]<UL><LI> bsp_f450.o(.constdata__ZTV3TIM)
<LI> tim_f450.o(.constdata__ZTV9TIM2_F450)
<LI> tim_f450.o(.constdata__ZTV9TIM3_F450)
<LI> tim_f450.o(.constdata__ZTV9TIM0_F450)
</UL>
<P><STRONG><a name="[152]"></a>TIM::TIM()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bsp_f450.o(i._ZN3TIMC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_F450::BSP_F450()
</UL>

<P><STRONG><a name="[23e]"></a>TIM::TIM__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bsp_f450.o(i._ZN3TIMC1Ev), UNUSED)

<P><STRONG><a name="[8d]"></a>UART::Init(unsigned)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp_f450.o(i._ZN4UART4InitEj))
<BR>[Address Reference Count : 1]<UL><LI> bsp_f450.o(.constdata__ZTV4UART)
</UL>
<P><STRONG><a name="[150]"></a>UART::UART()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bsp_f450.o(i._ZN4UARTC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_F450::BSP_F450()
</UL>

<P><STRONG><a name="[23f]"></a>UART::UART__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bsp_f450.o(i._ZN4UARTC1Ev), UNUSED)

<P><STRONG><a name="[8e]"></a>IO_F450::Set()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, io_f450.o(i._ZN7IO_F4503SetEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IO_F450::Set()
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> io_f450.o(.constdata__ZTV7IO_F450)
</UL>
<P><STRONG><a name="[91]"></a>IO_F450::Gets()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, io_f450.o(i._ZN7IO_F4504GetsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IO_F450::Gets()
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_input_bit_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> io_f450.o(.constdata__ZTV7IO_F450)
</UL>
<P><STRONG><a name="[92]"></a>IO_F450::Init()</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, io_f450.o(i._ZN7IO_F4504InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = IO_F450::Init() &rArr; gpio_output_options_set
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_options_set
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> io_f450.o(.constdata__ZTV7IO_F450)
</UL>
<P><STRONG><a name="[8f]"></a>IO_F450::Reset()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, io_f450.o(i._ZN7IO_F4505ResetEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IO_F450::Reset()
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> io_f450.o(.constdata__ZTV7IO_F450)
</UL>
<P><STRONG><a name="[90]"></a>IO_F450::Toggle()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, io_f450.o(i._ZN7IO_F4506ToggleEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IO_F450::Toggle()
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_toggle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> io_f450.o(.constdata__ZTV7IO_F450)
</UL>
<P><STRONG><a name="[14f]"></a>IO_F450::IO_F450(unsigned, unsigned)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, io_f450.o(i._ZN7IO_F450C1Ejj))
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_F450::BSP_F450()
</UL>

<P><STRONG><a name="[240]"></a>IO_F450::IO_F450__sub_object(unsigned, unsigned)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, io_f450.o(i._ZN7IO_F450C1Ejj), UNUSED)

<P><STRONG><a name="[19e]"></a>BSP_F450::Init()</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, bsp_f450.o(i._ZN8BSP_F4504InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_F450::Init()
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[14d]"></a>BSP_F450::BSP_F450()</STRONG> (Thumb, 474 bytes, Stack size 48 bytes, bsp_f450.o(i._ZN8BSP_F450C1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = BSP_F450::BSP_F450() &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM0_F450::TIM0_F450(unsigned char)
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_F450::IO_F450(unsigned, unsigned)
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART::UART()
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM::TIM()
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_BSP
</UL>

<P><STRONG><a name="[241]"></a>BSP_F450::BSP_F450__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, bsp_f450.o(i._ZN8BSP_F450C1Ev), UNUSED)

<P><STRONG><a name="[79]"></a>TASK_MPU::MPU_FUN(void*)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, task_mpu.o(i._ZN8TASK_MPU7MPU_FUNEPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = TASK_MPU::MPU_FUN(void*) &rArr; OS::delay_ms(unsigned long long) &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS::delay_ms(unsigned long long)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_mpu.o(i._ZN8TASK_MPUC1Ev)
</UL>
<P><STRONG><a name="[17e]"></a>TASK_MPU::TASK_MPU()</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, task_mpu.o(i._ZN8TASK_MPUC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_BSP
</UL>

<P><STRONG><a name="[242]"></a>TASK_MPU::TASK_MPU__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, task_mpu.o(i._ZN8TASK_MPUC1Ev), UNUSED)

<P><STRONG><a name="[93]"></a>ADC0_F450::Init()</STRONG> (Thumb, 312 bytes, Stack size 48 bytes, adc_f450.o(i._ZN9ADC0_F4504InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ADC0_F450::Init() &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_single_data_mode_init
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_deinit
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_circulation_enable
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_subperipheral_select
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_enable
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_sync_mode_config
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_special_function_config
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_software_trigger_enable
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_regular_channel_config
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_external_trigger_source_config
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_external_trigger_config
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_enable
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_dma_request_after_last_enable
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_dma_mode_enable
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_data_alignment_config
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_clock_config
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_channel_length_config
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_calibration_enable
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adc_f450.o(.constdata__ZTV9ADC0_F450)
</UL>
<P><STRONG><a name="[94]"></a>ADC0_F450::PeriodRun()</STRONG> (Thumb, 206 bytes, Stack size 32 bytes, adc_f450.o(i._ZN9ADC0_F4509PeriodRunEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ADC0_F450::PeriodRun() &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adc_f450.o(.constdata__ZTV9ADC0_F450)
</UL>
<P><STRONG><a name="[7a]"></a>OS_Timer1::OS_Timer1_FUN(void*)</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, os_timer.o(i._ZN9OS_Timer113OS_Timer1_FUNEPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = OS_Timer1::OS_Timer1_FUN(void*) &rArr; OS::timer_stop(TIMER*) &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS::timer_stop(TIMER*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_timer.o(i._ZN9OS_Timer1C1Ev)
</UL>
<P><STRONG><a name="[17a]"></a>OS_Timer1::OS_Timer1()</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, os_timer.o(i._ZN9OS_Timer1C1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_BSP
</UL>

<P><STRONG><a name="[243]"></a>OS_Timer1::OS_Timer1__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, os_timer.o(i._ZN9OS_Timer1C1Ev), UNUSED)

<P><STRONG><a name="[95]"></a>TIM0_F450::Init()</STRONG> (Thumb, 342 bytes, Stack size 40 bytes, tim_f450.o(i._ZN9TIM0_F4504InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = TIM0_F450::Init() &rArr; gpio_af_set
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_primary_output_config
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_enable
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_deinit
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_shadow_config
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_pulse_value_config
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_mode_config
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_config
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_auto_reload_shadow_enable
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_timer_clock_prescaler_config
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_af_set
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_options_set
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tim_f450.o(.constdata__ZTV9TIM0_F450)
</UL>
<P><STRONG><a name="[96]"></a>TIM0_F450::SetDUTY(short)</STRONG> (Thumb, 282 bytes, Stack size 16 bytes, tim_f450.o(i._ZN9TIM0_F4507SetDUTYEs))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM0_F450::SetDUTY(short)
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_shadow_config
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_pulse_value_config
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_mode_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tim_f450.o(.constdata__ZTV9TIM0_F450)
</UL>
<P><STRONG><a name="[151]"></a>TIM0_F450::TIM0_F450(unsigned char)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tim_f450.o(i._ZN9TIM0_F450C1Eh))
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_F450::BSP_F450()
</UL>

<P><STRONG><a name="[244]"></a>TIM0_F450::TIM0_F450__sub_object(unsigned char)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, tim_f450.o(i._ZN9TIM0_F450C1Eh), UNUSED)

<P><STRONG><a name="[97]"></a>TIM2_F450::Init()</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, tim_f450.o(i._ZN9TIM2_F4504InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = TIM2_F450::Init() &rArr; gpio_af_set
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_quadrature_decoder_mode_config
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_flag_clear
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_enable
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_input_capture_config
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_enable
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_deinit
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_counter_value_config
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_af_set
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_options_set
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tim_f450.o(.constdata__ZTV9TIM2_F450)
</UL>
<P><STRONG><a name="[98]"></a>TIM2_F450::ReadCnt()</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, tim_f450.o(i._ZN9TIM2_F4507ReadCntEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM2_F450::ReadCnt()
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_counter_value_config
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_counter_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tim_f450.o(.constdata__ZTV9TIM2_F450)
</UL>
<P><STRONG><a name="[99]"></a>TIM3_F450::Init()</STRONG> (Thumb, 216 bytes, Stack size 32 bytes, tim_f450.o(i._ZN9TIM3_F4504InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = TIM3_F450::Init() &rArr; gpio_af_set
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_quadrature_decoder_mode_config
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_flag_clear
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_enable
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_input_capture_config
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_enable
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_deinit
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_counter_value_config
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_af_set
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_options_set
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tim_f450.o(.constdata__ZTV9TIM3_F450)
</UL>
<P><STRONG><a name="[9a]"></a>TIM3_F450::ReadCnt()</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, tim_f450.o(i._ZN9TIM3_F4507ReadCntEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM3_F450::ReadCnt()
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_counter_value_config
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_counter_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tim_f450.o(.constdata__ZTV9TIM3_F450)
</UL>
<P><STRONG><a name="[9b]"></a>TIM8_F450::Init()</STRONG> (Thumb, 216 bytes, Stack size 40 bytes, tim_f450.o(i._ZN9TIM8_F4504InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = TIM8_F450::Init() &rArr; gpio_af_set
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_primary_output_config
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_enable
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_deinit
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_shadow_config
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_pulse_value_config
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_mode_config
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_config
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_auto_reload_shadow_enable
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_timer_clock_prescaler_config
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_af_set
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_options_set
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tim_f450.o(.constdata__ZTV9TIM8_F450)
</UL>
<P><STRONG><a name="[9c]"></a>TIM8_F450::SetDUTY(short)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, tim_f450.o(i._ZN9TIM8_F4507SetDUTYEs))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM8_F450::SetDUTY(short)
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_shadow_config
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_pulse_value_config
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_mode_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tim_f450.o(.constdata__ZTV9TIM8_F450)
</UL>
<P><STRONG><a name="[9d]"></a>TIM8_F450::SetFREQ(float)</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, tim_f450.o(i._ZN9TIM8_F4507SetFREQEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = TIM8_F450::SetFREQ(float) &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tim_f450.o(.constdata__ZTV9TIM8_F450)
</UL>
<P><STRONG><a name="[14e]"></a>operator new(unsigned)</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, new.o(i._Znwj))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_new_handler_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_F450::BSP_F450()
</UL>

<P><STRONG><a name="[175]"></a>__ARM_fpclassifyf</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fpclassifyf.o(i.__ARM_fpclassifyf))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
</UL>

<P><STRONG><a name="[121]"></a>__hardfp_asinf</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, asinf.o(i.__hardfp_asinf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __hardfp_asinf &rArr; sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_DMP()
</UL>

<P><STRONG><a name="[124]"></a>__hardfp_atan2f</STRONG> (Thumb, 594 bytes, Stack size 32 bytes, atan2f.o(i.__hardfp_atan2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __hardfp_atan2f &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan2
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_DMP()
</UL>

<P><STRONG><a name="[172]"></a>__hardfp_sqrtf</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, sqrtf.o(i.__hardfp_sqrtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_F450::SetFREQ(float)
</UL>

<P><STRONG><a name="[177]"></a>__mathlib_flt_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
</UL>

<P><STRONG><a name="[179]"></a>__mathlib_flt_infnan2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan2))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>

<P><STRONG><a name="[178]"></a>__mathlib_flt_invalid</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_invalid))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
</UL>

<P><STRONG><a name="[176]"></a>__mathlib_flt_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_underflow))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
</UL>

<P><STRONG><a name="[1ce]"></a>__rt_ffs</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, kservice.o(i.__rt_ffs))
<BR><BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
</UL>

<P><STRONG><a name="[15f]"></a>adc_calibration_enable</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, gd32f4xx_adc.o(i.adc_calibration_enable))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_F450::Init()
</UL>

<P><STRONG><a name="[158]"></a>adc_channel_length_config</STRONG> (Thumb, 82 bytes, Stack size 12 bytes, gd32f4xx_adc.o(i.adc_channel_length_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = adc_channel_length_config
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_F450::Init()
</UL>

<P><STRONG><a name="[153]"></a>adc_clock_config</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gd32f4xx_adc.o(i.adc_clock_config))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_F450::Init()
</UL>

<P><STRONG><a name="[157]"></a>adc_data_alignment_config</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gd32f4xx_adc.o(i.adc_data_alignment_config))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_F450::Init()
</UL>

<P><STRONG><a name="[15d]"></a>adc_dma_mode_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f4xx_adc.o(i.adc_dma_mode_enable))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_F450::Init()
</UL>

<P><STRONG><a name="[15c]"></a>adc_dma_request_after_last_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f4xx_adc.o(i.adc_dma_request_after_last_enable))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_F450::Init()
</UL>

<P><STRONG><a name="[15e]"></a>adc_enable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32f4xx_adc.o(i.adc_enable))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_F450::Init()
</UL>

<P><STRONG><a name="[15b]"></a>adc_external_trigger_config</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, gd32f4xx_adc.o(i.adc_external_trigger_config))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_F450::Init()
</UL>

<P><STRONG><a name="[15a]"></a>adc_external_trigger_source_config</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, gd32f4xx_adc.o(i.adc_external_trigger_source_config))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_F450::Init()
</UL>

<P><STRONG><a name="[159]"></a>adc_regular_channel_config</STRONG> (Thumb, 172 bytes, Stack size 20 bytes, gd32f4xx_adc.o(i.adc_regular_channel_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = adc_regular_channel_config
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_F450::Init()
</UL>

<P><STRONG><a name="[160]"></a>adc_software_trigger_enable</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, gd32f4xx_adc.o(i.adc_software_trigger_enable))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_F450::Init()
</UL>

<P><STRONG><a name="[156]"></a>adc_special_function_config</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, gd32f4xx_adc.o(i.adc_special_function_config))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_F450::Init()
</UL>

<P><STRONG><a name="[155]"></a>adc_sync_mode_config</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gd32f4xx_adc.o(i.adc_sync_mode_config))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_F450::Init()
</UL>

<P><STRONG><a name="[13a]"></a>dma_channel_enable</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, gd32f4xx_dma.o(i.dma_channel_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dma_channel_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_F450::Init(unsigned)
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_F450::Init(unsigned)
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_F450::Init()
</UL>

<P><STRONG><a name="[138]"></a>dma_channel_subperipheral_select</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, gd32f4xx_dma.o(i.dma_channel_subperipheral_select))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = dma_channel_subperipheral_select
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_F450::Init(unsigned)
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_F450::Init(unsigned)
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_F450::Init()
</UL>

<P><STRONG><a name="[137]"></a>dma_circulation_disable</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, gd32f4xx_dma.o(i.dma_circulation_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dma_circulation_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_F450::Init(unsigned)
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_F450::Init(unsigned)
</UL>

<P><STRONG><a name="[154]"></a>dma_circulation_enable</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, gd32f4xx_dma.o(i.dma_circulation_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dma_circulation_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_F450::Init()
</UL>

<P><STRONG><a name="[135]"></a>dma_deinit</STRONG> (Thumb, 164 bytes, Stack size 8 bytes, gd32f4xx_dma.o(i.dma_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dma_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_F450::Init(unsigned)
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_F450::Init(unsigned)
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_F450::Init()
</UL>

<P><STRONG><a name="[139]"></a>dma_interrupt_enable</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, gd32f4xx_dma.o(i.dma_interrupt_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = dma_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_F450::Init(unsigned)
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_F450::Init(unsigned)
</UL>

<P><STRONG><a name="[da]"></a>dma_interrupt_flag_clear</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, gd32f4xx_dma.o(i.dma_interrupt_flag_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dma_interrupt_flag_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel7_IRQHandler
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel2_IRQHandler
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_Channel6_IRQHandler
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_Channel5_IRQHandler
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_Channel3_IRQHandler
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_Channel1_IRQHandler
</UL>

<P><STRONG><a name="[d9]"></a>dma_interrupt_flag_get</STRONG> (Thumb, 516 bytes, Stack size 20 bytes, gd32f4xx_dma.o(i.dma_interrupt_flag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = dma_interrupt_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel7_IRQHandler
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel2_IRQHandler
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_Channel6_IRQHandler
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_Channel5_IRQHandler
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_Channel3_IRQHandler
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_Channel1_IRQHandler
</UL>

<P><STRONG><a name="[136]"></a>dma_single_data_mode_init</STRONG> (Thumb, 340 bytes, Stack size 16 bytes, gd32f4xx_dma.o(i.dma_single_data_mode_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dma_single_data_mode_init
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_F450::Init(unsigned)
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_F450::Init(unsigned)
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_F450::Init()
</UL>

<P><STRONG><a name="[134]"></a>dma_single_data_para_struct_init</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, gd32f4xx_dma.o(i.dma_single_data_para_struct_init))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_F450::Init(unsigned)
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_F450::Init(unsigned)
</UL>

<P><STRONG><a name="[18a]"></a>dmp_enable_6x_lp_quat</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_enable_6x_lp_quat))
<BR><BR>[Stack]<UL><LI>Max Depth = 100 + Unknown Stack Size
<LI>Call Chain = dmp_enable_6x_lp_quat &rArr; mpu_write_mem &rArr; MPU_Write_Len(unsigned char, unsigned char, unsigned char, unsigned char*) &rArr; IIC_SendByte(unsigned char) &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_reset_fifo
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
</UL>

<P><STRONG><a name="[11d]"></a>dmp_enable_feature</STRONG> (Thumb, 530 bytes, Stack size 24 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_enable_feature))
<BR><BR>[Stack]<UL><LI>Max Depth = 148 + Unknown Stack Size
<LI>Call Chain = dmp_enable_feature &rArr; dmp_set_tap_thresh &rArr; mpu_write_mem &rArr; MPU_Write_Len(unsigned char, unsigned char, unsigned char, unsigned char*) &rArr; IIC_SendByte(unsigned char) &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_time_multi
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_time
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_thresh
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_count
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_axes
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_shake_reject_timeout
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_shake_reject_time
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_shake_reject_thresh
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_lp_quat
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_gyro_cal
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_6x_lp_quat
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_reset_fifo
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMP_Init()
</UL>

<P><STRONG><a name="[18d]"></a>dmp_enable_gyro_cal</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_enable_gyro_cal))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = dmp_enable_gyro_cal &rArr; mpu_write_mem &rArr; MPU_Write_Len(unsigned char, unsigned char, unsigned char, unsigned char*) &rArr; IIC_SendByte(unsigned char) &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
</UL>

<P><STRONG><a name="[196]"></a>dmp_enable_lp_quat</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_enable_lp_quat))
<BR><BR>[Stack]<UL><LI>Max Depth = 100 + Unknown Stack Size
<LI>Call Chain = dmp_enable_lp_quat &rArr; mpu_write_mem &rArr; MPU_Write_Len(unsigned char, unsigned char, unsigned char, unsigned char*) &rArr; IIC_SendByte(unsigned char) &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_reset_fifo
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
</UL>

<P><STRONG><a name="[11b]"></a>dmp_load_motion_driver_firmware</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_load_motion_driver_firmware))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = dmp_load_motion_driver_firmware &rArr; mpu_load_firmware &rArr; mpu_read_mem &rArr; MPU_Read_Len(unsigned char, unsigned char, unsigned char, unsigned char*) &rArr; IIC_ReadByte(unsigned char) &rArr; IIC_NAck() &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_load_firmware
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMP_Init()
</UL>

<P><STRONG><a name="[120]"></a>dmp_read_fifo</STRONG> (Thumb, 456 bytes, Stack size 88 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_read_fifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = dmp_read_fifo &rArr; mpu_read_fifo_stream &rArr; MPU_Read_Len(unsigned char, unsigned char, unsigned char, unsigned char*) &rArr; IIC_ReadByte(unsigned char) &rArr; IIC_NAck() &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_gesture(unsigned char*)
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myget_ms
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_reset_fifo
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_read_fifo_stream
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_DMP()
</UL>

<P><STRONG><a name="[102]"></a>dmp_set_accel_bias</STRONG> (Thumb, 300 bytes, Stack size 48 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_set_accel_bias))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = dmp_set_accel_bias &rArr; mpu_write_mem &rArr; MPU_Write_Len(unsigned char, unsigned char, unsigned char, unsigned char*) &rArr; IIC_SendByte(unsigned char) &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_accel_sens
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_self_test()
</UL>

<P><STRONG><a name="[11e]"></a>dmp_set_fifo_rate</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_set_fifo_rate))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = dmp_set_fifo_rate &rArr; mpu_write_mem &rArr; MPU_Write_Len(unsigned char, unsigned char, unsigned char, unsigned char*) &rArr; IIC_SendByte(unsigned char) &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMP_Init()
</UL>

<P><STRONG><a name="[100]"></a>dmp_set_gyro_bias</STRONG> (Thumb, 294 bytes, Stack size 24 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_set_gyro_bias))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = dmp_set_gyro_bias &rArr; mpu_write_mem &rArr; MPU_Write_Len(unsigned char, unsigned char, unsigned char, unsigned char*) &rArr; IIC_SendByte(unsigned char) &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_self_test()
</UL>

<P><STRONG><a name="[11c]"></a>dmp_set_orientation</STRONG> (Thumb, 290 bytes, Stack size 32 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_set_orientation))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = dmp_set_orientation &rArr; mpu_write_mem &rArr; MPU_Write_Len(unsigned char, unsigned char, unsigned char, unsigned char*) &rArr; IIC_SendByte(unsigned char) &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMP_Init()
</UL>

<P><STRONG><a name="[193]"></a>dmp_set_shake_reject_thresh</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_set_shake_reject_thresh))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = dmp_set_shake_reject_thresh &rArr; mpu_write_mem &rArr; MPU_Write_Len(unsigned char, unsigned char, unsigned char, unsigned char*) &rArr; IIC_SendByte(unsigned char) &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
</UL>

<P><STRONG><a name="[194]"></a>dmp_set_shake_reject_time</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_set_shake_reject_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = dmp_set_shake_reject_time &rArr; mpu_write_mem &rArr; MPU_Write_Len(unsigned char, unsigned char, unsigned char, unsigned char*) &rArr; IIC_SendByte(unsigned char) &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
</UL>

<P><STRONG><a name="[195]"></a>dmp_set_shake_reject_timeout</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_set_shake_reject_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = dmp_set_shake_reject_timeout &rArr; mpu_write_mem &rArr; MPU_Write_Len(unsigned char, unsigned char, unsigned char, unsigned char*) &rArr; IIC_SendByte(unsigned char) &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
</UL>

<P><STRONG><a name="[18f]"></a>dmp_set_tap_axes</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_set_tap_axes))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = dmp_set_tap_axes &rArr; mpu_write_mem &rArr; MPU_Write_Len(unsigned char, unsigned char, unsigned char, unsigned char*) &rArr; IIC_SendByte(unsigned char) &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
</UL>

<P><STRONG><a name="[190]"></a>dmp_set_tap_count</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_set_tap_count))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = dmp_set_tap_count &rArr; mpu_write_mem &rArr; MPU_Write_Len(unsigned char, unsigned char, unsigned char, unsigned char*) &rArr; IIC_SendByte(unsigned char) &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
</UL>

<P><STRONG><a name="[18e]"></a>dmp_set_tap_thresh</STRONG> (Thumb, 412 bytes, Stack size 40 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_set_tap_thresh))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = dmp_set_tap_thresh &rArr; mpu_write_mem &rArr; MPU_Write_Len(unsigned char, unsigned char, unsigned char, unsigned char*) &rArr; IIC_SendByte(unsigned char) &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_accel_fsr
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
</UL>

<P><STRONG><a name="[191]"></a>dmp_set_tap_time</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_set_tap_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = dmp_set_tap_time &rArr; mpu_write_mem &rArr; MPU_Write_Len(unsigned char, unsigned char, unsigned char, unsigned char*) &rArr; IIC_SendByte(unsigned char) &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
</UL>

<P><STRONG><a name="[192]"></a>dmp_set_tap_time_multi</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_set_tap_time_multi))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = dmp_set_tap_time_multi &rArr; mpu_write_mem &rArr; MPU_Write_Len(unsigned char, unsigned char, unsigned char, unsigned char*) &rArr; IIC_SendByte(unsigned char) &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
</UL>

<P><STRONG><a name="[126]"></a>gpio_af_set</STRONG> (Thumb, 94 bytes, Stack size 20 bytes, gd32f4xx_gpio.o(i.gpio_af_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = gpio_af_set
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_F450::Init(unsigned)
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_F450::Init(unsigned)
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_F450::Init()
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_F450::Init()
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_F450::Init()
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM0_F450::Init()
</UL>

<P><STRONG><a name="[14c]"></a>gpio_bit_toggle</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32f4xx_gpio.o(i.gpio_bit_toggle))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_F450::Toggle()
</UL>

<P><STRONG><a name="[14a]"></a>gpio_bit_write</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f4xx_gpio.o(i.gpio_bit_write))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_F450::Reset()
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_F450::Init()
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_F450::Set()
</UL>

<P><STRONG><a name="[14b]"></a>gpio_input_bit_get</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f4xx_gpio.o(i.gpio_input_bit_get))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_F450::Gets()
</UL>

<P><STRONG><a name="[eb]"></a>gpio_mode_set</STRONG> (Thumb, 78 bytes, Stack size 20 bytes, gd32f4xx_gpio.o(i.gpio_mode_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = gpio_mode_set
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start()
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop()
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_NAck()
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Ack()
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SendByte(unsigned char)
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_ReadByte(unsigned char)
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_WaitAck()
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_F450::Init(unsigned)
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_F450::Init(unsigned)
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_F450::Init()
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_F450::Init()
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_F450::Init()
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM0_F450::Init()
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_F450::Init()
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_F450::Init()
</UL>

<P><STRONG><a name="[127]"></a>gpio_output_options_set</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, gd32f4xx_gpio.o(i.gpio_output_options_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = gpio_output_options_set
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_F450::Init(unsigned)
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_F450::Init(unsigned)
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_F450::Init()
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_F450::Init()
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_F450::Init()
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM0_F450::Init()
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_F450::Init()
</UL>

<P><STRONG><a name="[19c]"></a>$Super$$main</STRONG> (Thumb, 166 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = $Super$$main &rArr; OS::newthread(TASK*) &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_F450::Init()
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS::newthread(TASK*)
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS::delay_ms(unsigned long long)
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS::Init()
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS::thread_start(rt_thread*)
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS::create_timer(TIMER*)
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_thread_entry
</UL>

<P><STRONG><a name="[7e]"></a>main_thread_entry</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, components.o(i.main_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = main_thread_entry &rArr; $Super$$main &rArr; OS::newthread(TASK*) &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_components_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> components.o(i.rt_application_init)
</UL>
<P><STRONG><a name="[119]"></a>mpu_configure_fifo</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, inv_mpu.o(i.mpu_configure_fifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = mpu_configure_fifo &rArr; set_int_enable(unsigned char) &rArr; MPU_Write_Len(unsigned char, unsigned char, unsigned char, unsigned char*) &rArr; IIC_SendByte(unsigned char) &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_int_enable(unsigned char)
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_reset_fifo
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMP_Init()
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_self_test
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_init
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_lp_accel_mode
</UL>

<P><STRONG><a name="[19b]"></a>mpu_get_accel_fsr</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, inv_mpu.o(i.mpu_get_accel_fsr))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_self_test
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_thresh
</UL>

<P><STRONG><a name="[101]"></a>mpu_get_accel_sens</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, inv_mpu.o(i.mpu_get_accel_sens))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_accel_bias
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_self_test()
</UL>

<P><STRONG><a name="[1ab]"></a>mpu_get_fifo_config</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, inv_mpu.o(i.mpu_get_fifo_config))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_self_test
</UL>

<P><STRONG><a name="[1a8]"></a>mpu_get_gyro_fsr</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, inv_mpu.o(i.mpu_get_gyro_fsr))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_self_test
</UL>

<P><STRONG><a name="[ff]"></a>mpu_get_gyro_sens</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, inv_mpu.o(i.mpu_get_gyro_sens))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_self_test()
</UL>

<P><STRONG><a name="[1a9]"></a>mpu_get_lpf</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, inv_mpu.o(i.mpu_get_lpf))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_self_test
</UL>

<P><STRONG><a name="[1aa]"></a>mpu_get_sample_rate</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, inv_mpu.o(i.mpu_get_sample_rate))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_self_test
</UL>

<P><STRONG><a name="[117]"></a>mpu_init</STRONG> (Thumb, 248 bytes, Stack size 16 bytes, inv_mpu.o(i.mpu_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = mpu_init &rArr; mpu_set_sample_rate &rArr; mpu_lp_accel_mode &rArr; mpu_configure_fifo &rArr; set_int_enable(unsigned char) &rArr; MPU_Write_Len(unsigned char, unsigned char, unsigned char, unsigned char*) &rArr; IIC_SendByte(unsigned char) &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS::delay_ms(unsigned long long)
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sensors
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sample_rate
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_configure_fifo
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Len(unsigned char, unsigned char, unsigned char, unsigned char*)
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_lpf
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_gyro_fsr
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_bypass
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_accel_fsr
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMP_Init()
</UL>

<P><STRONG><a name="[197]"></a>mpu_load_firmware</STRONG> (Thumb, 180 bytes, Stack size 48 bytes, inv_mpu.o(i.mpu_load_firmware))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = mpu_load_firmware &rArr; mpu_read_mem &rArr; MPU_Read_Len(unsigned char, unsigned char, unsigned char, unsigned char*) &rArr; IIC_ReadByte(unsigned char) &rArr; IIC_NAck() &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Len(unsigned char, unsigned char, unsigned char, unsigned char*)
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_read_mem
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_load_motion_driver_firmware
</UL>

<P><STRONG><a name="[1a6]"></a>mpu_lp_accel_mode</STRONG> (Thumb, 218 bytes, Stack size 16 bytes, inv_mpu.o(i.mpu_lp_accel_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = mpu_lp_accel_mode &rArr; mpu_configure_fifo &rArr; set_int_enable(unsigned char) &rArr; MPU_Write_Len(unsigned char, unsigned char, unsigned char, unsigned char*) &rArr; IIC_SendByte(unsigned char) &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_configure_fifo
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Len(unsigned char, unsigned char, unsigned char, unsigned char*)
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_lpf
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_int_latched
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sample_rate
</UL>

<P><STRONG><a name="[198]"></a>mpu_read_fifo_stream</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, inv_mpu.o(i.mpu_read_fifo_stream))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = mpu_read_fifo_stream &rArr; MPU_Read_Len(unsigned char, unsigned char, unsigned char, unsigned char*) &rArr; IIC_ReadByte(unsigned char) &rArr; IIC_NAck() &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Len(unsigned char, unsigned char, unsigned char, unsigned char*)
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_reset_fifo
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_read_fifo
</UL>

<P><STRONG><a name="[1a4]"></a>mpu_read_mem</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, inv_mpu.o(i.mpu_read_mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = mpu_read_mem &rArr; MPU_Read_Len(unsigned char, unsigned char, unsigned char, unsigned char*) &rArr; IIC_ReadByte(unsigned char) &rArr; IIC_NAck() &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Len(unsigned char, unsigned char, unsigned char, unsigned char*)
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Len(unsigned char, unsigned char, unsigned char, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_load_firmware
</UL>

<P><STRONG><a name="[18c]"></a>mpu_reset_fifo</STRONG> (Thumb, 438 bytes, Stack size 8 bytes, inv_mpu.o(i.mpu_reset_fifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = mpu_reset_fifo &rArr; MPU_Write_Len(unsigned char, unsigned char, unsigned char, unsigned char*) &rArr; IIC_SendByte(unsigned char) &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Len(unsigned char, unsigned char, unsigned char, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_dmp_state
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_configure_fifo
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_read_fifo
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_lp_quat
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_6x_lp_quat
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_read_fifo_stream
</UL>

<P><STRONG><a name="[fe]"></a>mpu_run_self_test</STRONG> (Thumb, 278 bytes, Stack size 88 bytes, inv_mpu.o(i.mpu_run_self_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = mpu_run_self_test &rArr; get_st_biases(long*, long*, unsigned char) &rArr; OS::delay_ms(unsigned long long) &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accel_self_test(long*, long*)
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_self_test(long*, long*)
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_st_biases(long*, long*, unsigned char)
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sensors
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sample_rate
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_dmp_state
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_configure_fifo
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_lpf
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_gyro_fsr
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_accel_fsr
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_sample_rate
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_lpf
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_gyro_fsr
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_fifo_config
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_accel_fsr
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_self_test()
</UL>

<P><STRONG><a name="[1a1]"></a>mpu_set_accel_fsr</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, inv_mpu.o(i.mpu_set_accel_fsr))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = mpu_set_accel_fsr &rArr; MPU_Write_Len(unsigned char, unsigned char, unsigned char, unsigned char*) &rArr; IIC_SendByte(unsigned char) &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Len(unsigned char, unsigned char, unsigned char, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_self_test
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_init
</UL>

<P><STRONG><a name="[1a3]"></a>mpu_set_bypass</STRONG> (Thumb, 340 bytes, Stack size 16 bytes, inv_mpu.o(i.mpu_set_bypass))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = mpu_set_bypass &rArr; OS::delay_ms(unsigned long long) &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS::delay_ms(unsigned long long)
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Len(unsigned char, unsigned char, unsigned char, unsigned char*)
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Len(unsigned char, unsigned char, unsigned char, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_dmp_state
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_init
</UL>

<P><STRONG><a name="[11f]"></a>mpu_set_dmp_state</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, inv_mpu.o(i.mpu_set_dmp_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = mpu_set_dmp_state &rArr; mpu_set_sample_rate &rArr; mpu_lp_accel_mode &rArr; mpu_configure_fifo &rArr; set_int_enable(unsigned char) &rArr; MPU_Write_Len(unsigned char, unsigned char, unsigned char, unsigned char*) &rArr; IIC_SendByte(unsigned char) &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_int_enable(unsigned char)
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sample_rate
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Len(unsigned char, unsigned char, unsigned char, unsigned char*)
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_bypass
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_reset_fifo
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMP_Init()
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_self_test
</UL>

<P><STRONG><a name="[1a0]"></a>mpu_set_gyro_fsr</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, inv_mpu.o(i.mpu_set_gyro_fsr))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = mpu_set_gyro_fsr &rArr; MPU_Write_Len(unsigned char, unsigned char, unsigned char, unsigned char*) &rArr; IIC_SendByte(unsigned char) &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Len(unsigned char, unsigned char, unsigned char, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_self_test
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_init
</UL>

<P><STRONG><a name="[1a7]"></a>mpu_set_int_latched</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, inv_mpu.o(i.mpu_set_int_latched))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = mpu_set_int_latched &rArr; MPU_Write_Len(unsigned char, unsigned char, unsigned char, unsigned char*) &rArr; IIC_SendByte(unsigned char) &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Len(unsigned char, unsigned char, unsigned char, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sensors
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_lp_accel_mode
</UL>

<P><STRONG><a name="[1a2]"></a>mpu_set_lpf</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, inv_mpu.o(i.mpu_set_lpf))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = mpu_set_lpf &rArr; MPU_Write_Len(unsigned char, unsigned char, unsigned char, unsigned char*) &rArr; IIC_SendByte(unsigned char) &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Len(unsigned char, unsigned char, unsigned char, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sample_rate
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_self_test
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_init
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_lp_accel_mode
</UL>

<P><STRONG><a name="[11a]"></a>mpu_set_sample_rate</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, inv_mpu.o(i.mpu_set_sample_rate))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = mpu_set_sample_rate &rArr; mpu_lp_accel_mode &rArr; mpu_configure_fifo &rArr; set_int_enable(unsigned char) &rArr; MPU_Write_Len(unsigned char, unsigned char, unsigned char, unsigned char*) &rArr; IIC_SendByte(unsigned char) &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Len(unsigned char, unsigned char, unsigned char, unsigned char*)
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_lpf
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_lp_accel_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMP_Init()
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_dmp_state
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_self_test
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_init
</UL>

<P><STRONG><a name="[118]"></a>mpu_set_sensors</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, inv_mpu.o(i.mpu_set_sensors))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = mpu_set_sensors &rArr; OS::delay_ms(unsigned long long) &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS::delay_ms(unsigned long long)
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Len(unsigned char, unsigned char, unsigned char, unsigned char*)
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_int_latched
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMP_Init()
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_self_test
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_init
</UL>

<P><STRONG><a name="[18b]"></a>mpu_write_mem</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, inv_mpu.o(i.mpu_write_mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = mpu_write_mem &rArr; MPU_Write_Len(unsigned char, unsigned char, unsigned char, unsigned char*) &rArr; IIC_SendByte(unsigned char) &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Len(unsigned char, unsigned char, unsigned char, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_orientation
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_gyro_bias
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_fifo_rate
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_accel_bias
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_time_multi
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_time
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_thresh
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_count
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_axes
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_shake_reject_timeout
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_shake_reject_time
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_shake_reject_thresh
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_lp_quat
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_gyro_cal
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_6x_lp_quat
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_load_firmware
</UL>

<P><STRONG><a name="[19a]"></a>myget_ms</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, inv_mpu.o(i.myget_ms))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_read_fifo
</UL>

<P><STRONG><a name="[130]"></a>nvic_irq_enable</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, gd32f4xx_misc.o(i.nvic_irq_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nvic_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_priority_group_set
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_F450::Init(unsigned)
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_F450::Init(unsigned)
</UL>

<P><STRONG><a name="[1ac]"></a>nvic_priority_group_set</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f4xx_misc.o(i.nvic_priority_group_set))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
</UL>

<P><STRONG><a name="[1f1]"></a>rcu_clock_freq_get</STRONG> (Thumb, 264 bytes, Stack size 84 bytes, gd32f4xx_rcu.o(i.rcu_clock_freq_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = rcu_clock_freq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_baudrate_set
</UL>

<P><STRONG><a name="[125]"></a>rcu_periph_clock_enable</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, gd32f4xx_rcu.o(i.rcu_periph_clock_enable))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_F450::Init(unsigned)
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_F450::Init(unsigned)
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_F450::Init()
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_F450::Init()
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_F450::Init()
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM0_F450::Init()
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_F450::Init()
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_F450::Init()
</UL>

<P><STRONG><a name="[1ef]"></a>rcu_periph_reset_disable</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, gd32f4xx_rcu.o(i.rcu_periph_reset_disable))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_deinit
</UL>

<P><STRONG><a name="[1ee]"></a>rcu_periph_reset_enable</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, gd32f4xx_rcu.o(i.rcu_periph_reset_enable))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_deinit
</UL>

<P><STRONG><a name="[163]"></a>rcu_timer_clock_prescaler_config</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, gd32f4xx_rcu.o(i.rcu_timer_clock_prescaler_config))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_F450::Init()
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM0_F450::Init()
</UL>

<P><STRONG><a name="[1ad]"></a>rt_application_init</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, components.o(i.rt_application_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = rt_application_init &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[1b7]"></a>rt_components_board_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, components.o(i.rt_components_board_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_components_board_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[19f]"></a>rt_components_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, components.o(i.rt_components_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_components_init
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_thread_entry
</UL>

<P><STRONG><a name="[1ae]"></a>rt_enter_critical</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, scheduler.o(i.rt_enter_critical))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_enter_critical
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
</UL>

<P><STRONG><a name="[1af]"></a>rt_exit_critical</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, scheduler.o(i.rt_exit_critical))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_exit_critical &rArr; rt_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
</UL>

<P><STRONG><a name="[1b1]"></a>rt_free</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, mem.o(i.rt_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = rt_free &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_holes
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
</UL>

<P><STRONG><a name="[1b9]"></a>rt_heap_begin_get</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, board.o(i.rt_heap_begin_get))
<BR><BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[1b8]"></a>rt_heap_end_get</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, board.o(i.rt_heap_end_get))
<BR><BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[1b5]"></a>rt_hw_board_init</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, board.o(i.rt_hw_board_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = rt_hw_board_init &rArr; rt_system_heap_init &rArr; rt_sem_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_config
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_components_board_init
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_heap_end_get
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_heap_begin_get
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[b8]"></a>rt_hw_hard_fault_exception</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, cpuport.o(i.rt_hw_hard_fault_exception))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_hw_hard_fault_exception
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[181]"></a>rt_hw_stack_init</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, cpuport.o(i.rt_hw_stack_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_hw_stack_init
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
</UL>

<P><STRONG><a name="[1bb]"></a>rt_interrupt_enter</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, irq.o(i.rt_interrupt_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_interrupt_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_os_tick_callback
</UL>

<P><STRONG><a name="[1bc]"></a>rt_interrupt_leave</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, irq.o(i.rt_interrupt_leave))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_interrupt_leave
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_os_tick_callback
</UL>

<P><STRONG><a name="[1c4]"></a>rt_malloc</STRONG> (Thumb, 336 bytes, Stack size 24 bytes, mem.o(i.rt_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = rt_malloc &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
</UL>

<P><STRONG><a name="[180]"></a>rt_memset</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, kservice.o(i.rt_memset))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
</UL>

<P><STRONG><a name="[1c5]"></a>rt_object_allocate</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, object.o(i.rt_object_allocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_create
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
</UL>

<P><STRONG><a name="[1c9]"></a>rt_object_delete</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, object.o(i.rt_object_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = rt_object_delete &rArr; rt_free &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
</UL>

<P><STRONG><a name="[1cb]"></a>rt_object_detach</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, object.o(i.rt_object_detach))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_object_detach
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
</UL>

<P><STRONG><a name="[1c6]"></a>rt_object_get_information</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, object.o(i.rt_object_get_information))
<BR><BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
</UL>

<P><STRONG><a name="[1cc]"></a>rt_object_init</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, object.o(i.rt_object_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
</UL>

<P><STRONG><a name="[1de]"></a>rt_object_is_systemobject</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, object.o(i.rt_object_is_systemobject))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
</UL>

<P><STRONG><a name="[e3]"></a>rt_os_tick_callback</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, board.o(i.rt_os_tick_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = rt_os_tick_callback &rArr; rt_tick_increase &rArr; rt_timer_check &rArr; rt_timer_start &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[1b0]"></a>rt_schedule</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, scheduler.o(i.rt_schedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ffs
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_context_switch_interrupt
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_context_switch
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timeout
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
</UL>

<P><STRONG><a name="[1d1]"></a>rt_schedule_insert_thread</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, scheduler.o(i.rt_schedule_insert_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_schedule_insert_thread
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timeout
</UL>

<P><STRONG><a name="[1d2]"></a>rt_schedule_remove_thread</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, scheduler.o(i.rt_schedule_remove_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_schedule_remove_thread
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
</UL>

<P><STRONG><a name="[1d3]"></a>rt_sem_init</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, ipc.o(i.rt_sem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = rt_sem_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
</UL>

<P><STRONG><a name="[1b4]"></a>rt_sem_release</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, ipc.o(i.rt_sem_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = rt_sem_release &rArr; rt_ipc_list_resume &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>

<P><STRONG><a name="[1b2]"></a>rt_sem_take</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, ipc.o(i.rt_sem_take))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>

<P><STRONG><a name="[1ea]"></a>rt_show_version</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, kservice.o(i.rt_show_version))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[1c7]"></a>rt_strncpy</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, kservice.o(i.rt_strncpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
</UL>

<P><STRONG><a name="[1ba]"></a>rt_system_heap_init</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, mem.o(i.rt_system_heap_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = rt_system_heap_init &rArr; rt_sem_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[1d7]"></a>rt_system_scheduler_init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, scheduler.o(i.rt_system_scheduler_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_system_scheduler_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[1d9]"></a>rt_system_scheduler_start</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, scheduler.o(i.rt_system_scheduler_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_system_scheduler_start
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ffs
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_context_switch_to
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[1db]"></a>rt_system_timer_init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, timer.o(i.rt_system_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_system_timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[1eb]"></a>rt_system_timer_thread_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, timer.o(i.rt_system_timer_thread_init))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[149]"></a>rt_thread_create</STRONG> (Thumb, 80 bytes, Stack size 56 bytes, thread.o(i.rt_thread_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS::newthread(TASK*)
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
</UL>

<P><STRONG><a name="[146]"></a>rt_thread_delete</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, thread.o(i.rt_thread_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_thread_delete &rArr; rt_timer_detach &rArr; rt_object_detach
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_cleanup_execute
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS::delete_thread(rt_thread*)
</UL>

<P><STRONG><a name="[7c]"></a>rt_thread_exit</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, thread.o(i.rt_thread_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_thread_exit &rArr; rt_timer_detach &rArr; rt_object_detach
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_cleanup_execute
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread.o(i._rt_thread_init)
</UL>
<P><STRONG><a name="[1df]"></a>rt_thread_idle_excute</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, idle.o(i.rt_thread_idle_excute))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = rt_thread_idle_excute &rArr; rt_object_delete &rArr; rt_free &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_entry
</UL>

<P><STRONG><a name="[1e0]"></a>rt_thread_idle_init</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, idle.o(i.rt_thread_idle_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = rt_thread_idle_init &rArr; rt_thread_init &rArr; _rt_thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[1e1]"></a>rt_thread_init</STRONG> (Thumb, 52 bytes, Stack size 56 bytes, thread.o(i.rt_thread_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = rt_thread_init &rArr; _rt_thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
</UL>

<P><STRONG><a name="[147]"></a>rt_thread_mdelay</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, thread.o(i.rt_thread_mdelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_from_millisecond
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS::delay_ms(unsigned long long)
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_F450::Init()
</UL>

<P><STRONG><a name="[1be]"></a>rt_thread_resume</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, thread.o(i.rt_thread_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume
</UL>

<P><STRONG><a name="[1d5]"></a>rt_thread_self</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, thread.o(i.rt_thread_self))
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
</UL>

<P><STRONG><a name="[1e3]"></a>rt_thread_sleep</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, thread.o(i.rt_thread_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rt_thread_sleep &rArr; rt_timer_start &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
</UL>

<P><STRONG><a name="[145]"></a>rt_thread_startup</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, thread.o(i.rt_thread_startup))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_thread_startup &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS::thread_start(rt_thread*)
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
</UL>

<P><STRONG><a name="[1c0]"></a>rt_thread_suspend</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, thread.o(i.rt_thread_suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_thread_suspend &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
</UL>

<P><STRONG><a name="[7d]"></a>rt_thread_timeout</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, thread.o(i.rt_thread_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_thread_timeout &rArr; rt_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread.o(i._rt_thread_init)
</UL>
<P><STRONG><a name="[1e5]"></a>rt_thread_yield</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, thread.o(i.rt_thread_yield))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_thread_yield &rArr; rt_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
</UL>

<P><STRONG><a name="[1e2]"></a>rt_tick_from_millisecond</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, clock.o(i.rt_tick_from_millisecond))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
</UL>

<P><STRONG><a name="[1e7]"></a>rt_tick_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, clock.o(i.rt_tick_get))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
</UL>

<P><STRONG><a name="[1cd]"></a>rt_tick_increase</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, clock.o(i.rt_tick_increase))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = rt_tick_increase &rArr; rt_timer_check &rArr; rt_timer_start &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_os_tick_callback
</UL>

<P><STRONG><a name="[1e6]"></a>rt_timer_check</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, timer.o(i.rt_timer_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = rt_timer_check &rArr; rt_timer_start &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
</UL>

<P><STRONG><a name="[1d6]"></a>rt_timer_control</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, timer.o(i.rt_timer_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_timer_control
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
</UL>

<P><STRONG><a name="[143]"></a>rt_timer_create</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, timer.o(i.rt_timer_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = rt_timer_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS::create_timer(TIMER*)
</UL>

<P><STRONG><a name="[1dc]"></a>rt_timer_detach</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, timer.o(i.rt_timer_detach))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_timer_detach &rArr; rt_object_detach
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
</UL>

<P><STRONG><a name="[182]"></a>rt_timer_init</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, timer.o(i.rt_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
</UL>

<P><STRONG><a name="[141]"></a>rt_timer_start</STRONG> (Thumb, 226 bytes, Stack size 32 bytes, timer.o(i.rt_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_timer_start &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS::timer_start(TIMER*)
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
</UL>

<P><STRONG><a name="[140]"></a>rt_timer_stop</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, timer.o(i.rt_timer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS::timer_stop(TIMER*)
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
</UL>

<P><STRONG><a name="[d8]"></a>rtthread_startup</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, components.o(i.rtthread_startup))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = rtthread_startup &rArr; rt_thread_idle_init &rArr; rt_thread_init &rArr; _rt_thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_thread_init
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_init
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_init
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_show_version
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[174]"></a>sqrtf</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, sqrtf.o(i.sqrtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
</UL>

<P><STRONG><a name="[1b6]"></a>systick_config</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, systick.o(i.systick_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = systick_config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[16b]"></a>timer_auto_reload_shadow_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f4xx_timer.o(i.timer_auto_reload_shadow_enable))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_F450::Init()
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM0_F450::Init()
</UL>

<P><STRONG><a name="[1f0]"></a>timer_channel_input_capture_prescaler_config</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, gd32f4xx_timer.o(i.timer_channel_input_capture_prescaler_config))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_input_capture_config
</UL>

<P><STRONG><a name="[167]"></a>timer_channel_output_config</STRONG> (Thumb, 484 bytes, Stack size 8 bytes, gd32f4xx_timer.o(i.timer_channel_output_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_channel_output_config
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_F450::Init()
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM0_F450::Init()
</UL>

<P><STRONG><a name="[169]"></a>timer_channel_output_mode_config</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, gd32f4xx_timer.o(i.timer_channel_output_mode_config))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_F450::SetDUTY(short)
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_F450::Init()
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM0_F450::SetDUTY(short)
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM0_F450::Init()
</UL>

<P><STRONG><a name="[168]"></a>timer_channel_output_pulse_value_config</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, gd32f4xx_timer.o(i.timer_channel_output_pulse_value_config))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_F450::SetDUTY(short)
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_F450::Init()
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM0_F450::SetDUTY(short)
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM0_F450::Init()
</UL>

<P><STRONG><a name="[16a]"></a>timer_channel_output_shadow_config</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, gd32f4xx_timer.o(i.timer_channel_output_shadow_config))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_F450::SetDUTY(short)
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_F450::Init()
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM0_F450::SetDUTY(short)
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM0_F450::Init()
</UL>

<P><STRONG><a name="[171]"></a>timer_counter_read</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32f4xx_timer.o(i.timer_counter_read))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_F450::ReadCnt()
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_F450::ReadCnt()
</UL>

<P><STRONG><a name="[16f]"></a>timer_counter_value_config</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32f4xx_timer.o(i.timer_counter_value_config))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_F450::ReadCnt()
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_F450::Init()
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_F450::ReadCnt()
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_F450::Init()
</UL>

<P><STRONG><a name="[164]"></a>timer_deinit</STRONG> (Thumb, 374 bytes, Stack size 8 bytes, gd32f4xx_timer.o(i.timer_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_F450::Init()
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_F450::Init()
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_F450::Init()
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM0_F450::Init()
</UL>

<P><STRONG><a name="[16c]"></a>timer_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f4xx_timer.o(i.timer_enable))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_F450::Init()
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_F450::Init()
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_F450::Init()
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM0_F450::Init()
</UL>

<P><STRONG><a name="[166]"></a>timer_init</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, gd32f4xx_timer.o(i.timer_init))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_F450::SetFREQ(float)
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_F450::Init()
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_F450::Init()
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_F450::Init()
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM0_F450::Init()
</UL>

<P><STRONG><a name="[16d]"></a>timer_input_capture_config</STRONG> (Thumb, 326 bytes, Stack size 16 bytes, gd32f4xx_timer.o(i.timer_input_capture_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = timer_input_capture_config
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_input_capture_prescaler_config
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_F450::Init()
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_F450::Init()
</UL>

<P><STRONG><a name="[170]"></a>timer_interrupt_enable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32f4xx_timer.o(i.timer_interrupt_enable))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_F450::Init()
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_F450::Init()
</UL>

<P><STRONG><a name="[e6]"></a>timer_interrupt_flag_clear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gd32f4xx_timer.o(i.timer_interrupt_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_F450::Init()
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_F450::Init()
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER3_IRQHandler
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2_IRQHandler
</UL>

<P><STRONG><a name="[e5]"></a>timer_interrupt_flag_get</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gd32f4xx_timer.o(i.timer_interrupt_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER3_IRQHandler
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2_IRQHandler
</UL>

<P><STRONG><a name="[165]"></a>timer_primary_output_config</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gd32f4xx_timer.o(i.timer_primary_output_config))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_F450::Init()
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM0_F450::Init()
</UL>

<P><STRONG><a name="[16e]"></a>timer_quadrature_decoder_mode_config</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, gd32f4xx_timer.o(i.timer_quadrature_decoder_mode_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = timer_quadrature_decoder_mode_config
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_F450::Init()
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_F450::Init()
</UL>

<P><STRONG><a name="[12a]"></a>usart_baudrate_set</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, gd32f4xx_usart.o(i.usart_baudrate_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_clock_freq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_F450::Init(unsigned)
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_F450::Init(unsigned)
</UL>

<P><STRONG><a name="[128]"></a>usart_deinit</STRONG> (Thumb, 210 bytes, Stack size 8 bytes, gd32f4xx_usart.o(i.usart_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_F450::Init(unsigned)
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_F450::Init(unsigned)
</UL>

<P><STRONG><a name="[132]"></a>usart_dma_receive_config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f4xx_usart.o(i.usart_dma_receive_config))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_F450::Init(unsigned)
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_F450::Init(unsigned)
</UL>

<P><STRONG><a name="[133]"></a>usart_dma_transmit_config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f4xx_usart.o(i.usart_dma_transmit_config))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_F450::Init(unsigned)
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_F450::Init(unsigned)
</UL>

<P><STRONG><a name="[131]"></a>usart_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f4xx_usart.o(i.usart_enable))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_F450::Init(unsigned)
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_F450::Init(unsigned)
</UL>

<P><STRONG><a name="[129]"></a>usart_oversample_config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f4xx_usart.o(i.usart_oversample_config))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_F450::Init(unsigned)
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_F450::Init(unsigned)
</UL>

<P><STRONG><a name="[12b]"></a>usart_parity_config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f4xx_usart.o(i.usart_parity_config))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_F450::Init(unsigned)
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_F450::Init(unsigned)
</UL>

<P><STRONG><a name="[12e]"></a>usart_receive_config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f4xx_usart.o(i.usart_receive_config))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_F450::Init(unsigned)
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_F450::Init(unsigned)
</UL>

<P><STRONG><a name="[12d]"></a>usart_stop_bit_set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f4xx_usart.o(i.usart_stop_bit_set))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_F450::Init(unsigned)
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_F450::Init(unsigned)
</UL>

<P><STRONG><a name="[12f]"></a>usart_transmit_config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f4xx_usart.o(i.usart_transmit_config))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_F450::Init(unsigned)
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_F450::Init(unsigned)
</UL>

<P><STRONG><a name="[12c]"></a>usart_word_length_set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f4xx_usart.o(i.usart_word_length_set))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_F450::Init(unsigned)
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_F450::Init(unsigned)
</UL>

<P><STRONG><a name="[123]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_DMP()
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_F450::PeriodRun()
</UL>

<P><STRONG><a name="[1f2]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[10e]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Balance_Control()
</UL>

<P><STRONG><a name="[1f5]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
</UL>

<P><STRONG><a name="[1fb]"></a>__fpl_dcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL>

<P><STRONG><a name="[162]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_F450::PeriodRun()
</UL>

<P><STRONG><a name="[1f8]"></a>_ddiv</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[10f]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Balance_Control()
</UL>

<P><STRONG><a name="[1f9]"></a>_dfix</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[10c]"></a>__aeabi_i2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Balance_Control()
</UL>

<P><STRONG><a name="[245]"></a>_dflt</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[161]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_F450::PeriodRun()
</UL>

<P><STRONG><a name="[246]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[13b]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_SCREEN::SCREEN_FUN(void*)
</UL>

<P><STRONG><a name="[1fa]"></a>_dcmple</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[1fe]"></a>__fpl_dcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
</UL>

<P><STRONG><a name="[10d]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_DMP()
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Balance_Control()
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_F450::PeriodRun()
</UL>

<P><STRONG><a name="[1fc]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[1f4]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[1f7]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[13c]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_SCREEN::SCREEN_FUN(void*)
</UL>

<P><STRONG><a name="[1fd]"></a>_drcmple</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmple_InfNaN
</UL>

<P><STRONG><a name="[247]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)

<P><STRONG><a name="[1ff]"></a>_dsub</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[122]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_SCREEN::SCREEN_FUN(void*)
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_DMP()
</UL>

<P><STRONG><a name="[201]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[248]"></a>__aeabi_ul2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ffltll_clz.o(x$fpl$ffltll), UNUSED)

<P><STRONG><a name="[249]"></a>_ll_uto_f</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ffltll_clz.o(x$fpl$ffltll), UNUSED)

<P><STRONG><a name="[e9]"></a>__aeabi_l2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ffltll_clz.o(x$fpl$ffltll))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Filter()
</UL>

<P><STRONG><a name="[24a]"></a>_ll_sto_f</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, ffltll_clz.o(x$fpl$ffltll), UNUSED)

<P><STRONG><a name="[202]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[a9]"></a>_fp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[24b]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[24c]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[1f3]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[a2]"></a>__sti___8_main_cpp_BSP</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, main.o(i.__sti___8_main_cpp_BSP))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __sti___8_main_cpp_BSP &rArr; BSP_F450::BSP_F450() &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Timer1::OS_Timer1()
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_MPU::TASK_MPU()
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_F450::BSP_F450()
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_BALANCE::TASK_BALANCE()
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_SCREEN::TASK_SCREEN()
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_MUSIC::TASK_MUSIC()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.init_array)
</UL>
<P><STRONG><a name="[fd]"></a>run_self_test()</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, mpu9250.o(i._Z13run_self_testv))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = run_self_test() &rArr; mpu_run_self_test &rArr; get_st_biases(long*, long*, unsigned char) &rArr; OS::delay_ms(unsigned long long) &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_self_test
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_gyro_sens
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_accel_sens
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_gyro_bias
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_accel_bias
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMP_Init()
</UL>

<P><STRONG><a name="[115]"></a>inv_row_2_scale(const signed char*)</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, mpu9250.o(i._Z15inv_row_2_scalePKa))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_orientation_matrix_to_scalar(const signed char*)
</UL>

<P><STRONG><a name="[114]"></a>inv_orientation_matrix_to_scalar(const signed char*)</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, mpu9250.o(i._Z32inv_orientation_matrix_to_scalarPKa))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = inv_orientation_matrix_to_scalar(const signed char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_row_2_scale(const signed char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMP_Init()
</UL>

<P><STRONG><a name="[fc]"></a>get_st_biases(long*, long*, unsigned char)</STRONG> (Thumb, 1158 bytes, Stack size 64 bytes, inv_mpu.o(i._Z13get_st_biasesPlS_h))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = get_st_biases(long*, long*, unsigned char) &rArr; OS::delay_ms(unsigned long long) &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS::delay_ms(unsigned long long)
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Len(unsigned char, unsigned char, unsigned char, unsigned char*)
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Len(unsigned char, unsigned char, unsigned char, unsigned char*)
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_self_test
</UL>

<P><STRONG><a name="[105]"></a>gyro_self_test(long*, long*)</STRONG> (Thumb, 262 bytes, Stack size 40 bytes, inv_mpu.o(i._Z14gyro_self_testPlS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = gyro_self_test(long*, long*) &rArr; MPU_Read_Len(unsigned char, unsigned char, unsigned char, unsigned char*) &rArr; IIC_ReadByte(unsigned char) &rArr; IIC_NAck() &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Len(unsigned char, unsigned char, unsigned char, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_self_test
</UL>

<P><STRONG><a name="[106]"></a>set_int_enable(unsigned char)</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, inv_mpu.o(i._Z14set_int_enableh))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = set_int_enable(unsigned char) &rArr; MPU_Write_Len(unsigned char, unsigned char, unsigned char, unsigned char*) &rArr; IIC_SendByte(unsigned char) &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Len(unsigned char, unsigned char, unsigned char, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_dmp_state
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_configure_fifo
</UL>

<P><STRONG><a name="[112]"></a>accel_self_test(long*, long*)</STRONG> (Thumb, 182 bytes, Stack size 40 bytes, inv_mpu.o(i._Z15accel_self_testPlS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = accel_self_test(long*, long*) &rArr; get_accel_prod_shift(float*) &rArr; MPU_Read_Len(unsigned char, unsigned char, unsigned char, unsigned char*) &rArr; IIC_ReadByte(unsigned char) &rArr; IIC_NAck() &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_accel_prod_shift(float*)
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_self_test
</UL>

<P><STRONG><a name="[113]"></a>get_accel_prod_shift(float*)</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, inv_mpu.o(i._Z20get_accel_prod_shiftPf))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = get_accel_prod_shift(float*) &rArr; MPU_Read_Len(unsigned char, unsigned char, unsigned char, unsigned char*) &rArr; IIC_ReadByte(unsigned char) &rArr; IIC_NAck() &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Len(unsigned char, unsigned char, unsigned char, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accel_self_test(long*, long*)
</UL>

<P><STRONG><a name="[199]"></a>decode_gesture(unsigned char*)</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, inv_mpu_dmp_motion_driver.o(i._Z14decode_gesturePh))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = decode_gesture(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_read_fifo
</UL>

<P><STRONG><a name="[1ed]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, systick.o(i.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_config
</UL>

<P><STRONG><a name="[1ec]"></a>system_clock_200m_8m_hxtal</STRONG> (Thumb, 240 bytes, Stack size 0 bytes, system_gd32f4xx.o(i.system_clock_200m_8m_hxtal))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[e4]"></a>system_clock_config</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_gd32f4xx.o(i.system_clock_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = system_clock_config
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_200m_8m_hxtal
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[a0]"></a>rti_board_end</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, components.o(i.rti_board_end))
<BR>[Address Reference Count : 1]<UL><LI> components.o(.rti_fn.1.end)
</UL>
<P><STRONG><a name="[9f]"></a>rti_board_start</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, components.o(i.rti_board_start))
<BR>[Address Reference Count : 1]<UL><LI> components.o(.rti_fn.0.end)
</UL>
<P><STRONG><a name="[a1]"></a>rti_end</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, components.o(i.rti_end))
<BR>[Address Reference Count : 1]<UL><LI> components.o(.rti_fn.6.end)
</UL>
<P><STRONG><a name="[9e]"></a>rti_start</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, components.o(i.rti_start))
<BR>[Address Reference Count : 1]<UL><LI> components.o(.rti_fn.0)
</UL>
<P><STRONG><a name="[7f]"></a>rt_thread_idle_entry</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, idle.o(i.rt_thread_idle_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = rt_thread_idle_entry &rArr; rt_thread_idle_excute &rArr; rt_object_delete &rArr; rt_free &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
</UL>
<BR>[Address Reference Count : 1]<UL><LI> idle.o(i.rt_thread_idle_init)
</UL>
<P><STRONG><a name="[1bd]"></a>rt_ipc_list_resume</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ipc.o(i.rt_ipc_list_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rt_ipc_list_resume &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
</UL>

<P><STRONG><a name="[1bf]"></a>rt_ipc_list_suspend</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, ipc.o(i.rt_ipc_list_suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_before
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
</UL>

<P><STRONG><a name="[1c2]"></a>rt_ipc_object_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ipc.o(i.rt_ipc_object_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_ipc_object_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
</UL>

<P><STRONG><a name="[1c3]"></a>rt_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ipc.o(i.rt_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_object_init
</UL>

<P><STRONG><a name="[1c1]"></a>rt_list_insert_before</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ipc.o(i.rt_list_insert_before))
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
</UL>

<P><STRONG><a name="[1d4]"></a>rt_list_isempty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ipc.o(i.rt_list_isempty))
<BR><BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
</UL>

<P><STRONG><a name="[1b3]"></a>plug_holes</STRONG> (Thumb, 108 bytes, Stack size 12 bytes, mem.o(i.plug_holes))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = plug_holes
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>

<P><STRONG><a name="[1c8]"></a>rt_list_insert_after</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, object.o(i.rt_list_insert_after))
<BR><BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
</UL>

<P><STRONG><a name="[1ca]"></a>rt_list_remove</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, object.o(i.rt_list_remove))
<BR><BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
</UL>

<P><STRONG><a name="[1d8]"></a>rt_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, scheduler.o(i.rt_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_init
</UL>

<P><STRONG><a name="[17f]"></a>_rt_thread_init</STRONG> (Thumb, 124 bytes, Stack size 48 bytes, thread.o(i._rt_thread_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _rt_thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_stack_init
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
</UL>

<P><STRONG><a name="[187]"></a>_thread_cleanup_execute</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, thread.o(i._thread_cleanup_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _thread_cleanup_execute
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
</UL>

<P><STRONG><a name="[1dd]"></a>rt_list_insert_after</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, thread.o(i.rt_list_insert_after))
<BR><BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
</UL>

<P><STRONG><a name="[1e4]"></a>rt_list_remove</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, thread.o(i.rt_list_remove))
<BR><BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timeout
</UL>

<P><STRONG><a name="[183]"></a>_rt_timer_init</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, timer.o(i._rt_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _rt_timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_create
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
</UL>

<P><STRONG><a name="[185]"></a>_rt_timer_remove</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, timer.o(i._rt_timer_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
</UL>

<P><STRONG><a name="[184]"></a>rt_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, timer.o(i.rt_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_init
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_init
</UL>

<P><STRONG><a name="[1e8]"></a>rt_list_insert_after</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, timer.o(i.rt_list_insert_after))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
</UL>

<P><STRONG><a name="[1e9]"></a>rt_list_isempty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, timer.o(i.rt_list_isempty))
<BR><BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
</UL>

<P><STRONG><a name="[186]"></a>rt_list_remove</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, timer.o(i.rt_list_remove))
<BR><BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
</UL>

<P><STRONG><a name="[200]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
</UL>

<P><STRONG><a name="[1f6]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[75]"></a>[local to arm_exceptions_c]::__default_terminate_handler()</STRONG> (Thumb, 6 bytes, Stack size 8 bytes, arm_exceptions_globs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = [local to arm_exceptions_c]::__default_terminate_handler() &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_exceptions_globs.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
