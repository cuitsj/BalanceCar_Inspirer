; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\usb_config.o --asm_dir=.\build\ --list_dir=.\build\ --depend=.\usb_config.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\CMSIS-DAP -I.\USB -I.\User -I.\Driver\STM32F10x_ARM_Driver -I.\Driver\STM32F10x_StdPeriph_Driver\inc -IC:\Keil_v5\ARM\Pack\ARM\CMSIS\5.3.0\CMSIS\Include -IC:\Keil_v5\ARM\Pack\ARM\CMSIS\5.3.0\CMSIS\Driver\Include -ID:\Keil_v5\ARM\RV31\INC -ID:\Keil_v5\ARM\CMSIS\Include -ID:\Keil_v5\ARM\INC\ST\STM32F10x -D__MICROLIB -D__UVISION_VERSION=535 -DUSE_STDPERIPH_DRIVER -DSTM32F10X_MD -DBOARD_V1 -DSWO_PA10 -W --omf_browse=.\usb_config.crf USB\usb_config.c]
                          THUMB

                          AREA ||i.USBD_Configure_Event||, CODE, READONLY, ALIGN=1

                  USBD_Configure_Event PROC
;;;280      #ifndef __RTX
;;;281                                               void USBD_Configure_Event (void)             { USBD_HID_Configure_Event (); }
000000  f7ffbffe          B.W      USBD_HID_Configure_Event
;;;282      #endif
                          ENDP


                          AREA ||i.USBD_EndPoint0_Out_ADC_ReqToEP||, CODE, READONLY, ALIGN=1

                  USBD_EndPoint0_Out_ADC_ReqToEP PROC
;;;757      BOOL USBD_EndPoint0_Out_ADC_ReqToIF     (void)                                        { return (__FALSE); }
;;;758      BOOL USBD_EndPoint0_Out_ADC_ReqToEP     (void)                                        { return (__FALSE); }
000000  2000              MOVS     r0,#0
000002  4770              BX       lr
;;;759    #endif  /* (USBD_MSC_ENABLE) */
                          ENDP


                          AREA ||i.USBD_EndPoint0_Out_ADC_ReqToIF||, CODE, READONLY, ALIGN=1

                  USBD_EndPoint0_Out_ADC_ReqToIF PROC
;;;756      BOOL USBD_EndPoint0_Setup_ADC_ReqToEP   (void)                                        { return (__FALSE); }
;;;757      BOOL USBD_EndPoint0_Out_ADC_ReqToIF     (void)                                        { return (__FALSE); }
000000  2000              MOVS     r0,#0
000002  4770              BX       lr
;;;758      BOOL USBD_EndPoint0_Out_ADC_ReqToEP     (void)                                        { return (__FALSE); }
                          ENDP


                          AREA ||i.USBD_EndPoint0_Out_CLS_ReqToDEV||, CODE, READONLY, ALIGN=1

                  USBD_EndPoint0_Out_CLS_ReqToDEV PROC
;;;1034     BOOL USBD_EndPoint0_Setup_CLS_ReqToEP   (void)                                        { return (__FALSE); }
;;;1035     BOOL USBD_EndPoint0_Out_CLS_ReqToDEV    (void)                                        { return (__FALSE); }
000000  2000              MOVS     r0,#0
000002  4770              BX       lr
;;;1036     BOOL USBD_EndPoint0_Out_CLS_ReqToIF     (void)                                        { return (__FALSE); }
                          ENDP


                          AREA ||i.USBD_EndPoint0_Out_CLS_ReqToEP||, CODE, READONLY, ALIGN=1

                  USBD_EndPoint0_Out_CLS_ReqToEP PROC
;;;1036     BOOL USBD_EndPoint0_Out_CLS_ReqToIF     (void)                                        { return (__FALSE); }
;;;1037     BOOL USBD_EndPoint0_Out_CLS_ReqToEP     (void)                                        { return (__FALSE); }
000000  2000              MOVS     r0,#0
000002  4770              BX       lr
;;;1038   #endif  /* (USBD_CLS_ENABLE) */
                          ENDP


                          AREA ||i.USBD_EndPoint0_Out_CLS_ReqToIF||, CODE, READONLY, ALIGN=1

                  USBD_EndPoint0_Out_CLS_ReqToIF PROC
;;;1035     BOOL USBD_EndPoint0_Out_CLS_ReqToDEV    (void)                                        { return (__FALSE); }
;;;1036     BOOL USBD_EndPoint0_Out_CLS_ReqToIF     (void)                                        { return (__FALSE); }
000000  2000              MOVS     r0,#0
000002  4770              BX       lr
;;;1037     BOOL USBD_EndPoint0_Out_CLS_ReqToEP     (void)                                        { return (__FALSE); }
                          ENDP


                          AREA ||i.USBD_EndPoint0_Out_MSC_ReqToIF||, CODE, READONLY, ALIGN=1

                  USBD_EndPoint0_Out_MSC_ReqToIF PROC
;;;750      BOOL USBD_EndPoint0_Setup_MSC_ReqToIF   (void)                                        { return (__FALSE); }
;;;751      BOOL USBD_EndPoint0_Out_MSC_ReqToIF     (void)                                        { return (__FALSE); }
000000  2000              MOVS     r0,#0
000002  4770              BX       lr
;;;752    #endif  /* (USBD_MSC_ENABLE) */
                          ENDP


                          AREA ||i.USBD_EndPoint0_Setup_ADC_ReqToEP||, CODE, READONLY, ALIGN=1

                  USBD_EndPoint0_Setup_ADC_ReqToEP PROC
;;;755      BOOL USBD_EndPoint0_Setup_ADC_ReqToIF   (void)                                        { return (__FALSE); }
;;;756      BOOL USBD_EndPoint0_Setup_ADC_ReqToEP   (void)                                        { return (__FALSE); }
000000  2000              MOVS     r0,#0
000002  4770              BX       lr
;;;757      BOOL USBD_EndPoint0_Out_ADC_ReqToIF     (void)                                        { return (__FALSE); }
                          ENDP


                          AREA ||i.USBD_EndPoint0_Setup_ADC_ReqToIF||, CODE, READONLY, ALIGN=1

                  USBD_EndPoint0_Setup_ADC_ReqToIF PROC
;;;754    #if    (USBD_ADC_ENABLE == 0)
;;;755      BOOL USBD_EndPoint0_Setup_ADC_ReqToIF   (void)                                        { return (__FALSE); }
000000  2000              MOVS     r0,#0
000002  4770              BX       lr
;;;756      BOOL USBD_EndPoint0_Setup_ADC_ReqToEP   (void)                                        { return (__FALSE); }
                          ENDP


                          AREA ||i.USBD_EndPoint0_Setup_CLS_ReqToDEV||, CODE, READONLY, ALIGN=1

                  USBD_EndPoint0_Setup_CLS_ReqToDEV PROC
;;;1031   #else
;;;1032     BOOL USBD_EndPoint0_Setup_CLS_ReqToDEV  (void)                                        { return (__FALSE); }
000000  2000              MOVS     r0,#0
000002  4770              BX       lr
;;;1033     BOOL USBD_EndPoint0_Setup_CLS_ReqToIF   (void)                                        { return (__FALSE); }
                          ENDP


                          AREA ||i.USBD_EndPoint0_Setup_CLS_ReqToEP||, CODE, READONLY, ALIGN=1

                  USBD_EndPoint0_Setup_CLS_ReqToEP PROC
;;;1033     BOOL USBD_EndPoint0_Setup_CLS_ReqToIF   (void)                                        { return (__FALSE); }
;;;1034     BOOL USBD_EndPoint0_Setup_CLS_ReqToEP   (void)                                        { return (__FALSE); }
000000  2000              MOVS     r0,#0
000002  4770              BX       lr
;;;1035     BOOL USBD_EndPoint0_Out_CLS_ReqToDEV    (void)                                        { return (__FALSE); }
                          ENDP


                          AREA ||i.USBD_EndPoint0_Setup_CLS_ReqToIF||, CODE, READONLY, ALIGN=1

                  USBD_EndPoint0_Setup_CLS_ReqToIF PROC
;;;1032     BOOL USBD_EndPoint0_Setup_CLS_ReqToDEV  (void)                                        { return (__FALSE); }
;;;1033     BOOL USBD_EndPoint0_Setup_CLS_ReqToIF   (void)                                        { return (__FALSE); }
000000  2000              MOVS     r0,#0
000002  4770              BX       lr
;;;1034     BOOL USBD_EndPoint0_Setup_CLS_ReqToEP   (void)                                        { return (__FALSE); }
                          ENDP


                          AREA ||i.USBD_EndPoint0_Setup_MSC_ReqToIF||, CODE, READONLY, ALIGN=1

                  USBD_EndPoint0_Setup_MSC_ReqToIF PROC
;;;749      void USBD_ReqClrFeature_MSC             (U32 EPNum)                                   { }
;;;750      BOOL USBD_EndPoint0_Setup_MSC_ReqToIF   (void)                                        { return (__FALSE); }
000000  2000              MOVS     r0,#0
000002  4770              BX       lr
;;;751      BOOL USBD_EndPoint0_Out_MSC_ReqToIF     (void)                                        { return (__FALSE); }
                          ENDP


                          AREA ||i.USBD_RTX_TaskInit||, CODE, READONLY, ALIGN=1

                  USBD_RTX_TaskInit PROC
;;;1322   
;;;1323   void USBD_RTX_TaskInit (void) {
000000  4770              BX       lr
;;;1324   
;;;1325   #ifdef __RTX
;;;1326     /* Initialize memory pools for endpoints */
;;;1327     U32 i;
;;;1328   
;;;1329     USBD_RTX_DevTask = 0;
;;;1330     if (USBD_RTX_P_Device) {
;;;1331       USBD_RTX_DevTask = os_tsk_create(USBD_RTX_Device,      3);
;;;1332     }
;;;1333   
;;;1334     for (i = 0; i <= 15; i++) {
;;;1335       USBD_RTX_EPTask[i] = 0;
;;;1336       if (USBD_RTX_P_EP[i]) {
;;;1337         USBD_RTX_EPTask[i] = os_tsk_create(USBD_RTX_P_EP[i], 2);
;;;1338       }
;;;1339     }
;;;1340   
;;;1341     USBD_RTX_CoreTask = 0;
;;;1342     if (USBD_RTX_P_Core) {
;;;1343       USBD_RTX_CoreTask = os_tsk_create(USBD_RTX_Core,       2);
;;;1344     }
;;;1345   #endif
;;;1346   }
;;;1347   
                          ENDP


                          AREA ||i.USBD_ReqClrFeature_MSC||, CODE, READONLY, ALIGN=1

                  USBD_ReqClrFeature_MSC PROC
;;;748    #else
;;;749      void USBD_ReqClrFeature_MSC             (U32 EPNum)                                   { }
000000  4770              BX       lr
;;;750      BOOL USBD_EndPoint0_Setup_MSC_ReqToIF   (void)                                        { return (__FALSE); }
                          ENDP


                          AREA ||i.USBD_Reset_Event||, CODE, READONLY, ALIGN=1

                  USBD_Reset_Event PROC
;;;1041     #ifndef __RTX
;;;1042     void USBD_Reset_Event (void) {
000000  f7ffbffe          B.W      USBD_CDC_ACM_Reset_Event
;;;1043       #if    (USBD_CDC_ACM_ENABLE)
;;;1044       USBD_CDC_ACM_Reset_Event ();
;;;1045       #endif
;;;1046     }
;;;1047     #endif
                          ENDP


                          AREA ||i.USBD_SOF_Event||, CODE, READONLY, ALIGN=1

                  USBD_SOF_Event PROC
;;;1051     #ifndef __RTX
;;;1052     void USBD_SOF_Event (void) {
000000  b510              PUSH     {r4,lr}
;;;1053       #if    (USBD_HID_ENABLE)
;;;1054       USBD_HID_SOF_Event     ();
000002  f7fffffe          BL       USBD_HID_SOF_Event
;;;1055       #endif
;;;1056       #if    (USBD_ADC_ENABLE)
;;;1057       USBD_ADC_SOF_Event     ();
;;;1058       #endif
;;;1059       #if    (USBD_CDC_ACM_ENABLE)
;;;1060       USBD_CDC_ACM_SOF_Event ();
000006  e8bd4010          POP      {r4,lr}
00000a  f7ffbffe          B.W      USBD_CDC_ACM_SOF_Event
;;;1061       #endif
;;;1062       #if    (USBD_CLS_ENABLE)
;;;1063       USBD_CLS_SOF_Event     ();
;;;1064       #endif
;;;1065     }
;;;1066     #endif
                          ENDP


                          AREA ||i.usbd_class_init||, CODE, READONLY, ALIGN=1

                  usbd_class_init PROC
;;;1304   
;;;1305   void usbd_class_init     (void)                                       {
000000  b510              PUSH     {r4,lr}
;;;1306   #if (USBD_HID_ENABLE)
;;;1307                                                                           usbd_hid_init();
000002  f7fffffe          BL       usbd_hid_init
;;;1308   #endif
;;;1309   #if (USBD_MSC_ENABLE)
;;;1310                                                                           usbd_msc_init();
;;;1311   #endif
;;;1312   #if (USBD_ADC_ENABLE)
;;;1313                                                                           usbd_adc_init();
;;;1314   #endif
;;;1315   #if (USBD_CDC_ACM_ENABLE)
;;;1316                                                                           USBD_CDC_ACM_Initialize();
000006  e8bd4010          POP      {r4,lr}
00000a  f7ffbffe          B.W      USBD_CDC_ACM_Initialize
;;;1317   #endif
;;;1318   #if (USBD_CLS_ENABLE)
;;;1319                                                                           usbd_cls_init();
;;;1320   #endif
;;;1321                                                                         }
;;;1322   
                          ENDP


                          AREA ||i.usbd_os_evt_get||, CODE, READONLY, ALIGN=1

                  usbd_os_evt_get PROC
;;;1300   void usbd_os_evt_set     (U16 event_flags, U32 task)                  { }
;;;1301   U16  usbd_os_evt_get     (void)                                       { return (0); }
000000  2000              MOVS     r0,#0
000002  4770              BX       lr
;;;1302   U32  usbd_os_evt_wait_or (U16 wait_flags, U16 timeout)                { return (0); }
                          ENDP


                          AREA ||i.usbd_os_evt_set||, CODE, READONLY, ALIGN=1

                  usbd_os_evt_set PROC
;;;1299   
;;;1300   void usbd_os_evt_set     (U16 event_flags, U32 task)                  { }
000000  4770              BX       lr
;;;1301   U16  usbd_os_evt_get     (void)                                       { return (0); }
                          ENDP


                          AREA ||i.usbd_os_evt_wait_or||, CODE, READONLY, ALIGN=1

                  usbd_os_evt_wait_or PROC
;;;1301   U16  usbd_os_evt_get     (void)                                       { return (0); }
;;;1302   U32  usbd_os_evt_wait_or (U16 wait_flags, U16 timeout)                { return (0); }
000000  2000              MOVS     r0,#0
000002  4770              BX       lr
;;;1303   #endif
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  USBD_EP0Buf
                          %        64
                  USBD_HID_InReport
                          %        65
                  USBD_HID_OutReport
                          %        65
                  USBD_CDC_ACM_SendBuf
                          %        64
                  USBD_CDC_ACM_ReceiveBuf
                          %        64
                  USBD_CDC_ACM_NotifyBuf
                          %        10

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  usbd_power
000000  00                DCB      0x00
                  usbd_hs_enable
000001  00                DCB      0x00
                  usbd_if_num
000002  0003              DCW      0x0003
                  usbd_ep_num
000004  03                DCB      0x03
                  usbd_max_packet0
000005  40                DCB      0x40
                  usbd_hid_if_num
000006  02                DCB      0x02
                  usbd_hid_ep_intin
000007  03                DCB      0x03
                  usbd_hid_ep_intout
000008  0300              DCB      0x03,0x00
                  usbd_hid_interval
00000a  0001              DCW      0x0001
00000c  0040              DCW      0x0040
                  usbd_hid_maxpacketsize
00000e  0040              DCW      0x0040
000010  0004              DCW      0x0004
                  usbd_hid_inreport_num
000012  01                DCB      0x01
                  usbd_hid_outreport_num
000013  01                DCB      0x01
                  usbd_hid_inreport_max_sz
000014  0040              DCW      0x0040
                  usbd_hid_outreport_max_sz
000016  0040              DCW      0x0040
                  usbd_hid_featreport_max_sz
000018  0001              DCW      0x0001
                  usbd_cdc_acm_cif_num
00001a  00                DCB      0x00
                  usbd_cdc_acm_dif_num
00001b  01                DCB      0x01
                  usbd_cdc_acm_ep_intin
00001c  01                DCB      0x01
                  usbd_cdc_acm_ep_bulkin
00001d  02                DCB      0x02
                  usbd_cdc_acm_ep_bulkout
00001e  0200              DCB      0x02,0x00
                  usbd_cdc_acm_sendbuf_sz
000020  0040              DCW      0x0040
                  usbd_cdc_acm_receivebuf_sz
000022  0040              DCW      0x0040
                  usbd_cdc_acm_maxpacketsize
000024  00400010          DCW      0x0040,0x0010
                  usbd_cdc_acm_maxpacketsize1
000028  00400040          DCW      0x0040,0x0040
                  USBD_P_Power_Event
                          DCD      USBD_Power_Event
                  USBD_P_Reset_Event
                          DCD      USBD_Reset_Event
                  USBD_P_Suspend_Event
                          DCD      USBD_Suspend_Event
                  USBD_P_Resume_Event
                          DCD      USBD_Resume_Event
                  USBD_P_WakeUp_Event
                          DCD      USBD_WakeUp_Event
                  USBD_P_SOF_Event
                          DCD      USBD_SOF_Event
                  USBD_P_Error_Event
                          DCD      USBD_Error_Event
                  USBD_P_EP
                          DCD      USBD_EndPoint0
                          DCD      USBD_CDC_ACM_EP_INTIN_Event
                          DCD      USBD_CDC_ACM_EP_BULK_Event
                          DCD      USBD_HID_EP_INT_Event
                          DCD      USBD_EndPoint4
                          DCD      USBD_EndPoint5
                          DCD      USBD_EndPoint6
                          DCD      USBD_EndPoint7
                          DCD      USBD_EndPoint8
                          DCD      USBD_EndPoint9
                          DCD      USBD_EndPoint10
                          DCD      USBD_EndPoint11
                          DCD      USBD_EndPoint12
                          DCD      USBD_EndPoint13
                          DCD      USBD_EndPoint14
                          DCD      USBD_EndPoint15
                  USBD_P_Configure_Event
                          DCD      USBD_Configure_Event
                  USBD_P_Interface_Event
                          DCD      USBD_Interface_Event
                  USBD_P_Feature_Event
                          DCD      USBD_Feature_Event
                  __rtx
                          DCD      0x00000000
                  USBD_HID_ReportDescriptor
000098  0600ff09          DCB      0x06,0x00,0xff,0x09
00009c  01a10115          DCB      0x01,0xa1,0x01,0x15
0000a0  0026ff00          DCB      0x00,0x26,0xff,0x00
0000a4  75089540          DCB      0x75,0x08,0x95,0x40
0000a8  09018102          DCB      0x09,0x01,0x81,0x02
0000ac  95400901          DCB      0x95,0x40,0x09,0x01
0000b0  91029501          DCB      0x91,0x02,0x95,0x01
0000b4  0901b102          DCB      0x09,0x01,0xb1,0x02
0000b8  c000              DCB      0xc0,0x00
                  USBD_HID_ReportDescriptorSize
0000ba  0021              DCW      0x0021
                  USBD_HID_DescriptorOffset
0000bc  0054              DCW      0x0054
                  USBD_DeviceDescriptor
0000be  1201              DCB      0x12,0x01
0000c0  0002ef02          DCB      0x00,0x02,0xef,0x02
0000c4  014051c2          DCB      0x01,0x40,0x51,0xc2
0000c8  01f00001          DCB      0x01,0xf0,0x00,0x01
0000cc  01020301          DCB      0x01,0x02,0x03,0x01
                  USBD_DeviceQualifier
0000d0  00                DCB      0x00
                  USBD_DeviceQualifier_HS
0000d1  00                DCB      0x00
                  USBD_ConfigDescriptor
0000d2  0902              DCB      0x09,0x02
0000d4  6b000301          DCB      0x6b,0x00,0x03,0x01
0000d8  0080fa08          DCB      0x00,0x80,0xfa,0x08
0000dc  0b000202          DCB      0x0b,0x00,0x02,0x02
0000e0  02010409          DCB      0x02,0x01,0x04,0x09
0000e4  04000001          DCB      0x04,0x00,0x00,0x01
0000e8  02020004          DCB      0x02,0x02,0x00,0x04
0000ec  05240010          DCB      0x05,0x24,0x00,0x10
0000f0  01052401          DCB      0x01,0x05,0x24,0x01
0000f4  01010424          DCB      0x01,0x01,0x04,0x24
0000f8  02020524          DCB      0x02,0x02,0x05,0x24
0000fc  06000107          DCB      0x06,0x00,0x01,0x07
000100  05810340          DCB      0x05,0x81,0x03,0x40
000104  00020904          DCB      0x00,0x02,0x09,0x04
000108  0100020a          DCB      0x01,0x00,0x02,0x0a
00010c  00000507          DCB      0x00,0x00,0x05,0x07
000110  05020240          DCB      0x05,0x02,0x02,0x40
000114  00000705          DCB      0x00,0x00,0x07,0x05
000118  82024000          DCB      0x82,0x02,0x40,0x00
00011c  00090402          DCB      0x00,0x09,0x04,0x02
000120  00020300          DCB      0x00,0x02,0x03,0x00
000124  00060921          DCB      0x00,0x06,0x09,0x21
000128  00010001          DCB      0x00,0x01,0x00,0x01
00012c  22210007          DCB      0x22,0x21,0x00,0x07
000130  05830340          DCB      0x05,0x83,0x03,0x40
000134  00010705          DCB      0x00,0x01,0x07,0x05
000138  03034000          DCB      0x03,0x03,0x40,0x00
00013c  0100              DCB      0x01,0x00
                  USBD_ConfigDescriptor_HS
00013e  00                DCB      0x00
                  USBD_OtherSpeedConfigDescriptor
00013f  00                DCB      0x00
                  USBD_OtherSpeedConfigDescriptor_HS
000140  0000              DCB      0x00,0x00
                  USBD_StringDescriptor
000142  0403              DCB      0x04,0x03
000144  0409              DCW      0x0409
000146  3c03              DCB      0x3c,0x03
000148  43004d00          DCB      0x43,0x00,0x4d,0x00
00014c  53004900          DCB      0x53,0x00,0x49,0x00
000150  53002d00          DCB      0x53,0x00,0x2d,0x00
000154  44004100          DCB      0x44,0x00,0x41,0x00
000158  50002000          DCB      0x50,0x00,0x20,0x00
00015c  62007900          DCB      0x62,0x00,0x79,0x00
000160  20006d00          DCB      0x20,0x00,0x6d,0x00
000164  75007300          DCB      0x75,0x00,0x73,0x00
000168  65006c00          DCB      0x65,0x00,0x6c,0x00
00016c  61006200          DCB      0x61,0x00,0x62,0x00
000170  2d007400          DCB      0x2d,0x00,0x74,0x00
000174  65006300          DCB      0x65,0x00,0x63,0x00
000178  68002e00          DCB      0x68,0x00,0x2e,0x00
00017c  63006f00          DCB      0x63,0x00,0x6f,0x00
000180  6d002403          DCB      0x6d,0x00,0x24,0x03
000184  43004d00          DCB      0x43,0x00,0x4d,0x00
000188  53004900          DCB      0x53,0x00,0x49,0x00
00018c  53002d00          DCB      0x53,0x00,0x2d,0x00
000190  44004100          DCB      0x44,0x00,0x41,0x00
000194  50002d00          DCB      0x50,0x00,0x2d,0x00
000198  4d007500          DCB      0x4d,0x00,0x75,0x00
00019c  73006500          DCB      0x73,0x00,0x65,0x00
0001a0  4c006100          DCB      0x4c,0x00,0x61,0x00
0001a4  62001a03          DCB      0x62,0x00,0x1a,0x03
0001a8  30003000          DCB      0x30,0x00,0x30,0x00
0001ac  30003100          DCB      0x30,0x00,0x31,0x00
0001b0  41003000          DCB      0x41,0x00,0x30,0x00
0001b4  30003000          DCB      0x30,0x00,0x30,0x00
0001b8  30003000          DCB      0x30,0x00,0x30,0x00
0001bc  30003100          DCB      0x30,0x00,0x31,0x00
0001c0  1c034300          DCB      0x1c,0x03,0x43,0x00
0001c4  4d005300          DCB      0x4d,0x00,0x53,0x00
0001c8  49005300          DCB      0x49,0x00,0x53,0x00
0001cc  2d004400          DCB      0x2d,0x00,0x44,0x00
0001d0  41005000          DCB      0x41,0x00,0x50,0x00
0001d4  20004300          DCB      0x20,0x00,0x43,0x00
0001d8  44004300          DCB      0x44,0x00,0x43,0x00
0001dc  1c034300          DCB      0x1c,0x03,0x43,0x00
0001e0  4d005300          DCB      0x4d,0x00,0x53,0x00
0001e4  49005300          DCB      0x49,0x00,0x53,0x00
0001e8  2d004400          DCB      0x2d,0x00,0x44,0x00
0001ec  41005000          DCB      0x41,0x00,0x50,0x00
0001f0  20004400          DCB      0x20,0x00,0x44,0x00
0001f4  43004900          DCB      0x43,0x00,0x49,0x00
0001f8  14034300          DCB      0x14,0x03,0x43,0x00
0001fc  4d005300          DCB      0x4d,0x00,0x53,0x00
000200  49005300          DCB      0x49,0x00,0x53,0x00
000204  2d004400          DCB      0x2d,0x00,0x44,0x00
000208  41005000          DCB      0x41,0x00,0x50,0x00

                          AREA ||.data||, DATA, ALIGN=1

                  USBD_AltSetting
000000  00000000          DCB      0x00,0x00,0x00,0x00
                  USBD_HID_PollingCnt
000004  0000              DCB      0x00,0x00
                  USBD_HID_IdleCnt
000006  00                DCB      0x00
                  USBD_HID_IdleReload
000007  00                DCB      0x00
                  USBD_HID_IdleSet
000008  00                DCB      0x00
                  USBD_HID_FeatReport
000009  0000              DCB      0x00,0x00
