L 1 "USB\usb_config.c"
N/*------------------------------------------------------------------------------
N *      RL-ARM - USB
N *------------------------------------------------------------------------------
N *      Name:    usb_config.c
N *      Purpose: System Configuration
N *      Rev.:    V4.70
N *------------------------------------------------------------------------------
N *      This code is part of the RealView Run-Time Library.
N *      Copyright (c) 2004-2013 KEIL - An ARM Company. All rights reserved.
N *----------------------------------------------------------------------------*/
N
N//-------- <<< Use Configuration Wizard in Context Menu >>> --------------------
N
N/*------------------------------------------------------------------------------
N *      USB Host Configuration
N *----------------------------------------------------------------------------*/
N
N// <h> USB Host
N//   <e> USB Host 0
N//     <i> Enable the USB Host 0 functionality
N//     <o1> Controller Interface 
N//       <i> Selects the USB Host 0 controller interface
N//       <0=> Custom <1=> OHCI <2=> Custom EHCI for NXP Devices
N//   </e>
N#define USBH0_ENABLE                0
N#define USBH0_HC_IF                 0
N
N//   <e> USB Host 1
N//     <i> Enable the USB Host 1 functionality
N//     <o1> Controller Interface 
N//       <i> Selects the USB Host 1 controller interface
N//       <0=> Custom <1=> OHCI <2=> Custom EHCI for NXP Devices
N//   </e>
N#define USBH1_ENABLE                0
N#define USBH1_HC_IF                 0
N
N//   <h> Class Configuration
N//     <i> Selects supported classes
N//     <e0.0> Mass Storage Device Class (MSC)
N//       <o1> Number of concurrent MSC Devices on single USB Host controller <0-15>
N//     </e>
N//     <e0.1> Human Interface Device Class (HID)
N//       <o2> Number of concurrent HID Devices on single USB Host controller <0-15>
N//     </e>
N//     <e0.2> USB Device Class
N//       <o3> Number of concurrent Custom Class Devices on single USB Host controller <0-15>
N//     </e>
N//   </h>
N#define USBH_CLASS                  0x0000
N#define USBH_MSC_NUM                0
N#define USBH_HID_NUM                0
N#define USBH_CLS_NUM                0
N
N// </h>
N
N
N/*------------------------------------------------------------------------------
N *      USB Device Configuration
N *----------------------------------------------------------------------------*/
N
N// <e> USB Device
N//   <i> Enable the USB Device functionality
N#define USBD_ENABLE                 1
N
N//   <o0.0> High-speed
N//     <i> Enable high-speed functionality (if device supports it)
N#define USBD_HS_ENABLE              0
N
N//   <h> Device Settings
N//     <i> These settings affect Device Descriptor
N//     <o0> Power
N//       <i> Default Power Setting
N//       <0=> Bus-powered
N//       <1=> Self-powered
N//     <o1> Max Endpoint 0 Packet Size
N//       <i> Maximum packet size for endpoint zero (bMaxPacketSize0)
N//       <8=> 8 Bytes <16=> 16 Bytes <32=> 32 Bytes <64=> 64 Bytes
N//     <o2.0..15> Vendor ID <0x0000-0xFFFF>
N//       <i> Vendor ID assigned by the USB-IF (idVendor)
N//     <o3.0..15> Product ID <0x0000-0xFFFF>
N//       <i> Product ID assigned by the manufacturer (idProduct)
N//     <o4.0..15> Device Release Number <0x0000-0xFFFF>
N//       <i> Device release number in binary-coded decimal (bcdDevice)
N//   </h>
N#define USBD_POWER                  0
N#define USBD_MAX_PACKET0            64
N#define USBD_DEVDESC_IDVENDOR       0xC251
N#define USBD_DEVDESC_IDPRODUCT      0xF001
N#define USBD_DEVDESC_BCDDEVICE      0x0100
N
N//   <h> Configuration Settings
N//     <i> These settings affect Configuration Descriptor
N//     <o0.5> Remote Wakeup
N//       <i> Configuration support for remote wakeup (D5: of bmAttributes)
N//     <o1.0..7> Maximum Power Consumption (in mA) <0-510><#/2>
N//       <i> Maximum power consumption of the USB device 
N//       <i> from the bus in this specific configuration 
N//       <i> when the device is fully operational (bMaxPower)
N//   </h>
N#define USBD_CFGDESC_BMATTRIBUTES   0x80
N#define USBD_CFGDESC_BMAXPOWER      0xFA
N
N//   <h> String Settings
N//     <i> These settings affect String Descriptor
N//     <o0.0..15> Language ID <0x0000-0xFCFF>
N//       <i> English (United States) = 0x0409
N//     <s0.126> Manufacturer String
N//       <i> String descriptor describing manufacturer
N//     <s1.126> Product String
N//       <i> String descriptor describing product
N//     <e1.0> Serial Number
N//       <i> Enable serial number string
N//       <i> If disabled serial number string will not be assigned to the USB Device
N//       <s2.126> Serial Number String
N//         <i> String descriptor describing device's serial number
N//     </e>
N//   </h>
N#define USBD_STRDESC_LANGID         0x0409
N#define USBD_STRDESC_MAN            L"CMSIS-DAP by muselab-tech.com"
N#define USBD_STRDESC_PROD           L"CMSIS-DAP-MuseLab"
N#define USBD_STRDESC_SER_ENABLE     1
N#define USBD_STRDESC_SER            L"0001A0000001"
N
N//   <e0> Class Support
N//     <i> Enables USB Device Class specific Requests
N#define USBD_CLASS_ENABLE           1
N
N//     <e0.0> Human Interface Device (HID)
N//       <i> Enable class support for Human Interface Device (HID)
N//       <h> Interrupt Endpoint Settings
N//         <o1.0..4> Interrupt In Endpoint Number                  <1=>   1 <2=>   2 <3=>   3
N//                                                 <4=>   4        <5=>   5 <6=>   6 <7=>   7
N//                                                 <8=>   8        <9=>   9 <10=> 10 <11=> 11
N//                                                 <12=>  12       <13=> 13 <14=> 14 <15=> 15
N//         <o2.0..4> Interrupt Out Endpoint Number <0=>   Not used <1=>   1 <2=>   2 <3=>   3
N//                                                 <4=>   4        <5=>   5 <6=>   6 <7=>   7
N//                                                 <8=>   8        <9=>   9 <10=> 10 <11=> 11
N//                                                 <12=>  12       <13=> 13 <14=> 14 <15=> 15
N//           <i> If interrupt out endpoint is not used select "Not used"
N//         <h> Endpoint Settings
N//           <o3.0..7> Maximum Endpoint Packet Size (in bytes) <0-64>
N//           <o4.0..7> Endpoint polling Interval (in ms) <1-255>
N//           <e5> High-speed
N//             <i> If high-speed is enabled set endpoint settings for it
N//             <o6.0..10> Maximum Endpoint Packet Size (in bytes) <0-1024>
N//             <o6.11..12> Additional transactions per microframe <0=> None <1=> 1 additional <2=> 2 additional
N//             <o7.0..7> Endpoint polling Interval (in ms) <1=>      1 <2=>      2 <3=>      4 <4=>      8
N//                                                         <5=>     16 <6=>     32 <7=>     64 <8=>    128
N//                                                         <9=>    256 <10=>   512 <11=>  1024 <12=>  2048
N//                                                         <13=>  4096 <14=>  8192 <15=> 16384 <16=> 32768
N//           </e>
N//         </h>
N//       </h>
N//       <h> Human Interface Device Settings
N//         <i> Device specific settings
N//         <s0.126> HID Interface String
N//         <o8.0..4> Number of Input Reports <1-32>
N//         <o9.0..4> Number of Output Reports <1-32>
N//         <o10.0..15> Maximum Input Report Size (in bytes) <1-65535>
N//         <o11.0..15> Maximum Output Report Size (in bytes) <1-65535>
N//         <o12.0..15> Maximum Feature Report Size (in bytes) <1-65535>
N//       </h>
N//     </e>
N#define USBD_HID_ENABLE             1
N#define USBD_HID_EP_INTIN           3
N#define USBD_HID_EP_INTOUT          3
N#define USBD_HID_WMAXPACKETSIZE     64
N#define USBD_HID_BINTERVAL          1
N#define USBD_HID_HS_ENABLE          0
N#define USBD_HID_HS_WMAXPACKETSIZE  4
N#define USBD_HID_HS_BINTERVAL       6
N#define USBD_HID_STRDESC            L"CMSIS-DAP"
N#define USBD_HID_INREPORT_NUM       1
N#define USBD_HID_OUTREPORT_NUM      1
N#define USBD_HID_INREPORT_MAX_SZ    64
N#define USBD_HID_OUTREPORT_MAX_SZ   64
N#define USBD_HID_FEATREPORT_MAX_SZ  1
N
N//     <e0.0> Mass Storage Device (MSC)
N//       <i> Enable class support for Mass Storage Device (MSC)
N//       <h> Bulk Endpoint Settings
N//         <o1.0..4> Bulk In Endpoint Number                  <1=>   1 <2=>   2 <3=>   3
N//                                            <4=>   4        <5=>   5 <6=>   6 <7=>   7
N//                                            <8=>   8        <9=>   9 <10=> 10 <11=> 11
N//                                            <12=>  12       <13=> 13 <14=> 14 <15=> 15
N//         <o2.0..4> Bulk Out Endpoint Number                 <1=>   1 <2=>   2 <3=>   3
N//                                            <4=>   4        <5=>   5 <6=>   6 <7=>   7
N//                                            <8=>   8        <9=>   9 <10=> 10 <11=> 11
N//                                            <12=>  12       <13=> 13 <14=> 14 <15=> 15
N//         <h> Endpoint Settings
N//           <o3> Maximum Packet Size <1-1024>
N//           <e4> High-speed
N//             <i> If high-speed is enabled set endpoint settings for it
N//             <o5> Maximum Packet Size <1-1024>
N//             <o6> Maximum NAK Rate <0-255>
N//           </e>
N//         </h>
N//       </h>
N//       <h> Mass Storage Device Settings
N//         <i> Device specific settings
N//         <s0.126> MSC Interface String
N//         <h> Inquiry Data
N//           <s1.8>  Vendor Identification
N//           <s2.16> Product Identification
N//           <s3.4>  Product Revision Level
N//         </h>
N//       </h>
N//     </e>
N#define USBD_MSC_ENABLE             0
N#define USBD_MSC_EP_BULKIN          2
N#define USBD_MSC_EP_BULKOUT         2
N#define USBD_MSC_WMAXPACKETSIZE     64
N#define USBD_MSC_HS_ENABLE          0
N#define USBD_MSC_HS_WMAXPACKETSIZE  512
N#define USBD_MSC_HS_BINTERVAL       0
N#define USBD_MSC_STRDESC            L"USB_MSC"
N#define USBD_MSC_INQUIRY_DATA       "Keil    "         \
N                                    "LPC23xx Disk    " \
N                                    "1.0 "
X#define USBD_MSC_INQUIRY_DATA       "Keil    "                                             "LPC23xx Disk    "                                     "1.0 "
N
N//     <e0.0> Audio Device (ADC)
N//       <i> Enable class support for Audio Device (ADC)
N//       <h> Isochronous Endpoint Settings
N//         <o1.0..4> Isochronous Out Endpoint Number                 <1=>   1 <2=>   2 <3=>   3
N//                                                   <4=>   4        <5=>   5 <6=>   6 <7=>   7
N//                                                   <8=>   8        <9=>   9 <10=> 10 <11=> 11
N//                                                   <12=>  12       <13=> 13 <14=> 14 <15=> 15
N//         <h> Endpoint Settings
N//           <o2.0..10> Maximum Endpoint Packet Size (in bytes) <0-1024>
N//           <o3.0..10> Endpoint polling Interval (in ms) <1=>      1 <2=>      2 <3=>      4 <4=>      8
N//                                                        <5=>     16 <6=>     32 <7=>     64 <8=>    128
N//                                                        <9=>    256 <10=>   512 <11=>  1024 <12=>  2048
N//                                                        <13=>  4096 <14=>  8192 <15=> 16384 <16=> 32768
N//           <e4> High-speed
N//             <i> If high-speed is enabled set endpoint settings for it
N//             <o5.0..10> Maximum Endpoint Packet Size (in bytes) <0-1024>
N//             <o5.11..12> Additional transactions per microframe <0=> None <1=> 1 additional <2=> 2 additional
N//           </e>
N//         </h>
N//       </h>
N//       <h> Audio Device Settings
N//         <i> Device specific settings
N//         <s0.126> Audio Control Interface String
N//         <s1.126> Audio Streaming (Zero Bandwidth) Interface String
N//         <s2.126> Audio Streaming (Operational) Interface String
N//         <o6.0..7> Audio Subframe Size (in bytes) <0-255>
N//         <o7.0..7> Sample Resolution (in bits) <0-255>
N//         <o8.0..23> Sample Frequency (in Hz) <0-16777215>
N//         <o9> Packet Size (in bytes) <1-256>
N//         <o10> Packet Count <1-16>
N//       </h>
N//     </e>
N#define USBD_ADC_ENABLE             0
N#define USBD_ADC_EP_ISOOUT          3
N#define USBD_ADC_WMAXPACKETSIZE     64
N#define USBD_ADC_BINTERVAL          1
N#define USBD_ADC_HS_ENABLE          0
N#define USBD_ADC_HS_WMAXPACKETSIZE  64
N#define USBD_ADC_CIF_STRDESC        L"USB_ADC"
N#define USBD_ADC_SIF1_STRDESC       L"USB_ADC1"
N#define USBD_ADC_SIF2_STRDESC       L"USB_ADC2"
N#define USBD_ADC_BSUBFRAMESIZE      2
N#define USBD_ADC_BBITRESOLUTION     16
N#define USBD_ADC_TSAMFREQ           32000
N#define USBD_ADC_CFG_P_S            32
N#define USBD_ADC_CFG_P_C            1
N
N//     <e0> Communication Device (CDC) - Abstract Control Model (ACM)
N//       <i> Enable class support for Communication Device (CDC) - Abstract Control Model (ACM)
N//       <h> Interrupt Endpoint Settings
N//         <o1.0..4> Interrupt In Endpoint Number                 <1=>   1 <2=>   2 <3=>   3
N//                                                <4=>   4        <5=>   5 <6=>   6 <7=>   7
N//                                                <8=>   8        <9=>   9 <10=> 10 <11=> 11
N//                                                <12=>  12       <13=> 13 <14=> 14 <15=> 15
N//         <h> Endpoint Settings
N//           <o2.0..10> Maximum Endpoint Packet Size (in bytes) <0-1024>
N//           <o3.0..10> Endpoint polling Interval (in ms) <0-255>
N//           <e4> High-speed
N//             <i> If high-speed is enabled set endpoint settings for it
N//             <o5.0..10> Maximum Endpoint Packet Size (in bytes) <0-1024>
N//             <o5.11..12> Additional transactions per microframe <0=> None <1=> 1 additional <2=> 2 additional
N//             <o6.0..10> Endpoint polling Interval (in ms) <1=>      1 <2=>      2 <3=>      4 <4=>      8
N//                                                          <5=>     16 <6=>     32 <7=>     64 <8=>    128
N//                                                          <9=>    256 <10=>   512 <11=>  1024 <12=>  2048
N//                                                          <13=>  4096 <14=>  8192 <15=> 16384 <16=> 32768
N//           </e4>
N//         </h>
N//       </h>
N//       <h> Bulk Endpoint Settings
N//         <o7.0..4> Bulk In Endpoint Number                  <1=>   1 <2=>   2 <3=>   3
N//                                            <4=>   4        <5=>   5 <6=>   6 <7=>   7
N//                                            <8=>   8        <9=>   9 <10=> 10 <11=> 11
N//                                            <12=>  12       <13=> 13 <14=> 14 <15=> 15
N//         <o8.0..4> Bulk Out Endpoint Number                 <1=>   1 <2=>   2 <3=>   3
N//                                            <4=>   4        <5=>   5 <6=>   6 <7=>   7
N//                                            <8=>   8        <9=>   9 <10=> 10 <11=> 11
N//                                            <12=>  12       <13=> 13 <14=> 14 <15=> 15
N//         <h> Endpoint Settings
N//           <o9> Maximum Packet Size <1-1024>
N//           <e10> High-speed
N//             <i> If high-speed is enabled set endpoint settings for it
N//             <o11> Maximum Packet Size <1-1024>
N//             <o12> Maximum NAK Rate <0-255>
N//           </e10>
N//         </h>
N//       </h>
N//       <h> Communication Device Settings
N//         <i> Device specific settings
N//         <s0.126> Communication Class Interface String
N//         <s1.126> Data Class Interface String
N//         <o13> Maximum Communication Device Send Buffer Size
N//            <8=>     8 Bytes <16=>   16 Bytes <32=>     32 Bytes <64=>  64 Bytes <128=> 128 Bytes 
N//            <256=> 256 Bytes <512=> 512 Bytes <1024=> 1024 Bytes
N//         <o14> Maximum Communication Device Receive Buffer Size
N//            <i> Minimum size must be as big as maximum packet size for Bulk Out Endpoint
N//            <8=>     8 Bytes <16=>   16 Bytes <32=>     32 Bytes <64=>  64 Bytes <128=> 128 Bytes 
N//            <256=> 256 Bytes <512=> 512 Bytes <1024=> 1024 Bytes
N//       </h>
N//     </e>
N
N#define USBD_CDC_ACM_ENABLE             1
N#define USBD_CDC_ACM_EP_INTIN           1
N#define USBD_CDC_ACM_WMAXPACKETSIZE     64
N#define USBD_CDC_ACM_BINTERVAL          2
N#define USBD_CDC_ACM_HS_ENABLE          0
N#define USBD_CDC_ACM_HS_WMAXPACKETSIZE  16
N#define USBD_CDC_ACM_HS_BINTERVAL       2
N#define USBD_CDC_ACM_EP_BULKIN          2
N#define USBD_CDC_ACM_EP_BULKOUT         2
N#define USBD_CDC_ACM_WMAXPACKETSIZE1    64
N#define USBD_CDC_ACM_HS_ENABLE1         0
N#define USBD_CDC_ACM_HS_WMAXPACKETSIZE1 64
N#define USBD_CDC_ACM_HS_BINTERVAL1      0
N#define USBD_CDC_ACM_CIF_STRDESC        L"CMSIS-DAP CDC"
N#define USBD_CDC_ACM_DIF_STRDESC        L"CMSIS-DAP DCI"
N#define USBD_CDC_ACM_SENDBUF_SIZE       64
N#define USBD_CDC_ACM_RECEIVEBUF_SIZE    64
N
N#if (((USBD_CDC_ACM_HS_ENABLE1) && (USBD_CDC_ACM_SENDBUF_SIZE    < USBD_CDC_ACM_HS_WMAXPACKETSIZE1)) || (USBD_CDC_ACM_SENDBUF_SIZE    < USBD_CDC_ACM_WMAXPACKETSIZE1))
X#if (((0) && (64    < 64)) || (64    < 64))
S	#error "Send Buffer size must be larger or equal to Bulk In maximum packet size!"
N#endif
N
N#if (((USBD_CDC_ACM_HS_ENABLE1) && (USBD_CDC_ACM_RECEIVEBUF_SIZE < USBD_CDC_ACM_HS_WMAXPACKETSIZE1)) || (USBD_CDC_ACM_RECEIVEBUF_SIZE < USBD_CDC_ACM_WMAXPACKETSIZE1))
X#if (((0) && (64 < 64)) || (64 < 64))
S	#error "Receive Buffer size must be larger or equal to Bulk Out maximum packet size!"
N#endif
N
N//     <e0> Custom Class Device
N//       <i> Enables USB Custom Class Requests
N//       <i> Class IDs:
N//       <i> 0x00 - Class Reserved ID
N//       <i> 0x01 - Class Audio ID
N//       <i> 0x02 - Class Communications ID
N//       <i> 0x03 - Class Human Interface ID
N//       <i> 0x04 - Class Monitor ID
N//       <i> 0x05 - Class Physical Interface ID
N//       <i> 0x06 - Class Power ID
N//       <i> 0x07 - Class Printer ID
N//       <i> 0x08 - Class Storage ID
N//       <i> 0x09 - Class HUB ID
N//       <i> 0xEF - Class Miscellaneous ID
N//       <i> 0xFF - Class Vendor Specific ID
N//     </e>
N#define USBD_CLS_ENABLE             0
N
N//   </e>
N// </e>
N
N
N/* USB Device Calculations ---------------------------------------------------*/
N
N#define USBD_IF_NUM                (USBD_HID_ENABLE+USBD_MSC_ENABLE+(USBD_ADC_ENABLE*2)+(USBD_CDC_ACM_ENABLE*2)+USBD_CLS_ENABLE)
N#define USBD_MULTI_IF              (USBD_CDC_ACM_ENABLE*(USBD_HID_ENABLE|USBD_MSC_ENABLE|USBD_ADC_ENABLE))
N#define MAX(x, y)         	       (((x) < (y)) ? (y) : (x))
N#define USBD_EP_NUM_CALC0           MAX((USBD_HID_ENABLE    *(USBD_HID_EP_INTIN     )), (USBD_HID_ENABLE    *(USBD_HID_EP_INTOUT!=0)*(USBD_HID_EP_INTOUT)))
N#define USBD_EP_NUM_CALC1           MAX((USBD_MSC_ENABLE    *(USBD_MSC_EP_BULKIN    )), (USBD_MSC_ENABLE    *(USBD_MSC_EP_BULKOUT)))
N#define USBD_EP_NUM_CALC2           MAX((USBD_ADC_ENABLE    *(USBD_ADC_EP_ISOOUT    )), (USBD_CDC_ACM_ENABLE*(USBD_CDC_ACM_EP_INTIN)))
N#define USBD_EP_NUM_CALC3           MAX((USBD_CDC_ACM_ENABLE*(USBD_CDC_ACM_EP_BULKIN)), (USBD_CDC_ACM_ENABLE*(USBD_CDC_ACM_EP_BULKOUT)))
N#define USBD_EP_NUM_CALC4           MAX(USBD_EP_NUM_CALC0, USBD_EP_NUM_CALC1)
N#define USBD_EP_NUM_CALC5           MAX(USBD_EP_NUM_CALC2, USBD_EP_NUM_CALC3)
N#define USBD_EP_NUM_CALC6           MAX(USBD_EP_NUM_CALC4, USBD_EP_NUM_CALC5)
N#define USBD_EP_NUM                (USBD_EP_NUM_CALC6)
N
N#if	(USBD_HID_ENABLE)
X#if	(1)
N#if	(USBD_MSC_ENABLE)
X#if	(0)
S#if	((((USBD_HID_EP_INTIN   == USBD_MSC_EP_BULKIN)	|| \
S	(USBD_HID_EP_INTIN   == USBD_MSC_EP_BULKIN)))	|| \
S	((USBD_HID_EP_INTOUT  != 0)						&& \
S	(USBD_HID_EP_INTOUT  == USBD_MSC_EP_BULKIN)		|| \
S	(USBD_HID_EP_INTOUT  == USBD_MSC_EP_BULKOUT)))
X#if	((((USBD_HID_EP_INTIN   == USBD_MSC_EP_BULKIN)	|| 	(USBD_HID_EP_INTIN   == USBD_MSC_EP_BULKIN)))	|| 	((USBD_HID_EP_INTOUT  != 0)						&& 	(USBD_HID_EP_INTOUT  == USBD_MSC_EP_BULKIN)		|| 	(USBD_HID_EP_INTOUT  == USBD_MSC_EP_BULKOUT)))
S	#error "HID and Mass Storage Device Interface can not use same Endpoints!"
S#endif
N#endif
N
N#if	(USBD_ADC_ENABLE)
X#if	(0)
S#if	((USBD_HID_EP_INTIN   == USBD_ADC_EP_ISOOUT)	|| \
S	((USBD_HID_EP_INTOUT  != 0)						&& \
S	(USBD_HID_EP_INTOUT  == USBD_ADC_EP_ISOOUT)))
X#if	((USBD_HID_EP_INTIN   == USBD_ADC_EP_ISOOUT)	|| 	((USBD_HID_EP_INTOUT  != 0)						&& 	(USBD_HID_EP_INTOUT  == USBD_ADC_EP_ISOOUT)))
S	#error "HID and Audio Device Interface can not use same Endpoints!"
S#endif
N#endif
N
N#if	(USBD_CDC_ACM_ENABLE)
X#if	(1)
N#if	(((USBD_HID_EP_INTIN   == USBD_CDC_ACM_EP_INTIN)	|| \
N	(USBD_HID_EP_INTIN   == USBD_CDC_ACM_EP_BULKIN)		|| \
N	(USBD_HID_EP_INTIN   == USBD_CDC_ACM_EP_BULKOUT))	|| \
N	((USBD_HID_EP_INTOUT  != 0)							&& \
N	((USBD_HID_EP_INTOUT  == USBD_CDC_ACM_EP_INTIN)		|| \
N	(USBD_HID_EP_INTOUT  == USBD_CDC_ACM_EP_BULKIN)		|| \
N	(USBD_HID_EP_INTOUT  == USBD_CDC_ACM_EP_BULKOUT))))
X#if	(((3   == 1)	|| 	(3   == 2)		|| 	(3   == 2))	|| 	((3  != 0)							&& 	((3  == 1)		|| 	(3  == 2)		|| 	(3  == 2))))
S	#error "HID and Communication Device Interface can not use same Endpoints!"
N#endif
N#endif
N#endif
N
N#if	(USBD_MSC_ENABLE)
X#if	(0)
S#if	(USBD_ADC_ENABLE)
S#if	((USBD_MSC_EP_BULKIN  == USBD_ADC_EP_ISOOUT)	|| \
S	(USBD_MSC_EP_BULKOUT == USBD_ADC_EP_ISOOUT))
X#if	((USBD_MSC_EP_BULKIN  == USBD_ADC_EP_ISOOUT)	|| 	(USBD_MSC_EP_BULKOUT == USBD_ADC_EP_ISOOUT))
S	#error "Mass Storage Device and Audio Device Interface can not use same Endpoints!"
S#endif
S#endif
S
S#if	(USBD_CDC_ACM_ENABLE)
S#if	((USBD_MSC_EP_BULKIN  == USBD_CDC_ACM_EP_INTIN)		|| \
S	(USBD_MSC_EP_BULKIN  == USBD_CDC_ACM_EP_BULKIN)		|| \
S	(USBD_MSC_EP_BULKIN  == USBD_CDC_ACM_EP_BULKOUT)	|| \
S	(USBD_MSC_EP_BULKOUT == USBD_CDC_ACM_EP_INTIN)		|| \
S	(USBD_MSC_EP_BULKOUT == USBD_CDC_ACM_EP_BULKIN)		|| \
S	(USBD_MSC_EP_BULKOUT == USBD_CDC_ACM_EP_BULKOUT))
X#if	((USBD_MSC_EP_BULKIN  == USBD_CDC_ACM_EP_INTIN)		|| 	(USBD_MSC_EP_BULKIN  == USBD_CDC_ACM_EP_BULKIN)		|| 	(USBD_MSC_EP_BULKIN  == USBD_CDC_ACM_EP_BULKOUT)	|| 	(USBD_MSC_EP_BULKOUT == USBD_CDC_ACM_EP_INTIN)		|| 	(USBD_MSC_EP_BULKOUT == USBD_CDC_ACM_EP_BULKIN)		|| 	(USBD_MSC_EP_BULKOUT == USBD_CDC_ACM_EP_BULKOUT))
S	#error "Mass Storage Device and Communication Device Interface can not use same Endpoints!"
S#endif
S#endif
N#endif
N
N#if (USBD_ADC_ENABLE)
X#if (0)
S#if (USBD_CDC_ACM_ENABLE)
S#if ((USBD_ADC_EP_ISOOUT  == USBD_CDC_ACM_EP_INTIN)		|| \
S	(USBD_ADC_EP_ISOOUT  == USBD_CDC_ACM_EP_BULKIN)		|| \
S	(USBD_ADC_EP_ISOOUT  == USBD_CDC_ACM_EP_BULKOUT))
X#if ((USBD_ADC_EP_ISOOUT  == USBD_CDC_ACM_EP_INTIN)		|| 	(USBD_ADC_EP_ISOOUT  == USBD_CDC_ACM_EP_BULKIN)		|| 	(USBD_ADC_EP_ISOOUT  == USBD_CDC_ACM_EP_BULKOUT))
S	#error "Audio Device and Communication Device Interface can not use same Endpoints!"
S#endif
S#endif
N#endif
N
N#define USBD_ADC_CIF_NUM           (0)
N#define USBD_ADC_SIF1_NUM          (1)
N#define USBD_ADC_SIF2_NUM          (2)
N#define USBD_CDC_ACM_CIF_NUM       (USBD_ADC_ENABLE * 2 + 0)
N#define USBD_CDC_ACM_DIF_NUM       (USBD_ADC_ENABLE * 2 + 1)
N#define USBD_HID_IF_NUM            (USBD_ADC_ENABLE * 2 + USBD_CDC_ACM_ENABLE * 2)
N#define USBD_MSC_IF_NUM            (USBD_ADC_ENABLE * 2 + USBD_CDC_ACM_ENABLE * 2 + USBD_HID_ENABLE)
N
N#define USBD_ADC_CIF_STR_NUM       (3 + USBD_STRDESC_SER_ENABLE + 0)
N#define USBD_ADC_SIF1_STR_NUM      (3 + USBD_STRDESC_SER_ENABLE + 1)
N#define USBD_ADC_SIF2_STR_NUM      (3 + USBD_STRDESC_SER_ENABLE + 2)
N#define USBD_CDC_ACM_CIF_STR_NUM   (3 + USBD_STRDESC_SER_ENABLE + USBD_ADC_ENABLE * 3 + 0)
N#define USBD_CDC_ACM_DIF_STR_NUM   (3 + USBD_STRDESC_SER_ENABLE + USBD_ADC_ENABLE * 3 + 1)
N#define USBD_HID_IF_STR_NUM        (3 + USBD_STRDESC_SER_ENABLE + USBD_ADC_ENABLE * 3 + USBD_CDC_ACM_ENABLE * 2)
N#define USBD_MSC_IF_STR_NUM        (3 + USBD_STRDESC_SER_ENABLE + USBD_ADC_ENABLE * 3 + USBD_CDC_ACM_ENABLE * 2 + USBD_HID_ENABLE)
N
N#if    (USBD_HID_ENABLE)
X#if    (1)
N#if    (USBD_HID_HS_ENABLE)
X#if    (0)
S#define USBD_HID_MAX_PACKET       ((USBD_HID_HS_WMAXPACKETSIZE > USBD_HID_WMAXPACKETSIZE) ? USBD_HID_HS_WMAXPACKETSIZE : USBD_HID_WMAXPACKETSIZE)
N#else
N#define USBD_HID_MAX_PACKET        (USBD_HID_WMAXPACKETSIZE)
N#endif
N#else
S#define USBD_HID_MAX_PACKET        (0)
N#endif
N
N#if    (USBD_MSC_ENABLE)
X#if    (0)
S	#if    (USBD_MSC_HS_ENABLE)
S		#define USBD_MSC_MAX_PACKET			((USBD_MSC_HS_WMAXPACKETSIZE > USBD_MSC_WMAXPACKETSIZE) ? USBD_MSC_HS_WMAXPACKETSIZE : USBD_MSC_WMAXPACKETSIZE)
S	#else
S		#define USBD_MSC_MAX_PACKET			(USBD_MSC_WMAXPACKETSIZE)
S	#endif
N#else
N	#define USBD_MSC_MAX_PACKET		(0)
N#endif
N
N#if    (USBD_ADC_ENABLE)
X#if    (0)
S	#if    (USBD_ADC_HS_ENABLE)
S		#define USBD_ADC_MAX_PACKET			((USBD_ADC_HS_WMAXPACKETSIZE > USBD_ADC_WMAXPACKETSIZE) ? USBD_ADC_HS_WMAXPACKETSIZE : USBD_ADC_WMAXPACKETSIZE)
S	#else
S		#define USBD_ADC_MAX_PACKET			(USBD_ADC_WMAXPACKETSIZE)
S	#endif
N#else
N	#define USBD_ADC_MAX_PACKET		(0)
N#endif
N
N#if    (USBD_CDC_ACM_ENABLE)
X#if    (1)
N	#if    (USBD_CDC_ACM_HS_ENABLE)
X	#if    (0)
S		#define USBD_CDC_ACM_MAX_PACKET		((USBD_CDC_ACM_HS_WMAXPACKETSIZE > USBD_CDC_ACM_WMAXPACKETSIZE) ? USBD_CDC_ACM_HS_WMAXPACKETSIZE : USBD_CDC_ACM_WMAXPACKETSIZE)
N	#else
N		#define USBD_CDC_ACM_MAX_PACKET		(USBD_CDC_ACM_WMAXPACKETSIZE)
N	#endif
N	#if    (USBD_CDC_ACM_HS_ENABLE1)
X	#if    (0)
S		#define USBD_CDC_ACM_MAX_PACKET1	((USBD_CDC_ACM_HS_WMAXPACKETSIZE1 > USBD_CDC_ACM_WMAXPACKETSIZE1) ? USBD_CDC_ACM_HS_WMAXPACKETSIZE1 : USBD_CDC_ACM_WMAXPACKETSIZE1)
N	#else
N		#define USBD_CDC_ACM_MAX_PACKET1	(USBD_CDC_ACM_WMAXPACKETSIZE1)
N	#endif
N#else
S	#define USBD_CDC_ACM_MAX_PACKET			(0)
S	#define USBD_CDC_ACM_MAX_PACKET1		(0)
N#endif
N
N#define USBD_MAX_PACKET_CALC0     ((USBD_HID_MAX_PACKET   > USBD_HID_MAX_PACKET      ) ? (USBD_HID_MAX_PACKET  ) : (USBD_HID_MAX_PACKET      ))
N#define USBD_MAX_PACKET_CALC1     ((USBD_ADC_MAX_PACKET   > USBD_CDC_ACM_MAX_PACKET  ) ? (USBD_ADC_MAX_PACKET  ) : (USBD_CDC_ACM_MAX_PACKET  ))
N#define USBD_MAX_PACKET_CALC2     ((USBD_MAX_PACKET_CALC0 > USBD_MAX_PACKET_CALC1    ) ? (USBD_MAX_PACKET_CALC0) : (USBD_MAX_PACKET_CALC1    ))
N#define USBD_MAX_PACKET           ((USBD_MAX_PACKET_CALC2 > USBD_CDC_ACM_MAX_PACKET1 ) ? (USBD_MAX_PACKET_CALC2) : (USBD_CDC_ACM_MAX_PACKET1 ))
N
N
N/*------------------------------------------------------------------------------
N *      USB Config Functions
N *----------------------------------------------------------------------------*/
N
N#ifndef  __USB_CONFIG___
N#define  __USB_CONFIG__
N
N	#ifndef  __NO_USB_LIB_C
N		#include <usb_lib.c>
L 1 "D:\Keil_v5\ARM\RV31\INC\usb_lib.c" 1
N/*------------------------------------------------------------------------------
N *      RL-ARM - USB
N *------------------------------------------------------------------------------
N *      Name:    usb_lib.c
N *      Purpose: System Configuration
N *      Rev.:    V4.74
N *------------------------------------------------------------------------------
N *      This code is part of the RealView Run-Time Library.
N *      Copyright (c) 2004-2014 KEIL - An ARM Company. All rights reserved.
N *----------------------------------------------------------------------------*/
N
N#include <RTL.h>
L 1 "D:\Keil_v5\ARM\RV31\INC\RTL.h" 1
N/*----------------------------------------------------------------------------
N *      RL-ARM - A P I 
N *----------------------------------------------------------------------------
N *      Name:    RTL.H 
N *      Purpose: Application Programming Interface 
N *      Rev.:    V4.73
N *----------------------------------------------------------------------------
N *      This code is part of the RealView Run-Time Library.
N *      Copyright (c) 2004-2014 KEIL - An ARM Company. All rights reserved.
N *---------------------------------------------------------------------------*/
N
N#ifndef __RTL_H__
N#define __RTL_H__
N
N/* RL-ARM version number. */
N#define __RL_ARM_VER    473
N 
N#define __task          __declspec(noreturn)
N#define __used          __attribute__((used))
N
N#ifndef NULL
N #ifdef __cplusplus
S  #define NULL          0
N #else
N  #define NULL          ((void *) 0)
N #endif
N#endif
N
N#ifndef EOF
N #define EOF            (-1)
N#endif
N
N#ifndef __size_t
N #define __size_t       1
N typedef unsigned int   size_t;
N#endif
N
Ntypedef signed char     S8;
Ntypedef unsigned char   U8;
Ntypedef short           S16;
Ntypedef unsigned short  U16;
Ntypedef int             S32;
Ntypedef unsigned int    U32;
Ntypedef long long       S64;
Ntypedef unsigned long long U64;
Ntypedef unsigned char   BIT;
Ntypedef unsigned int    BOOL;
N
N#ifndef __TRUE
N #define __TRUE         1
N#endif
N#ifndef __FALSE
N #define __FALSE        0
N#endif
N
N#ifdef __BIG_ENDIAN
S #define U32_LE(v)      (U32)(__rev(v))
S #define U16_LE(v)      (U16)(__rev(v) >> 16)
S #define U32_BE(v)      (U32)(v)
S #define U16_BE(v)      (U16)(v)
N#else
N #define U32_BE(v)      (U32)(__rev(v))
N #define U16_BE(v)      (U16)(__rev(v) >> 16)
N #define U32_LE(v)      (U32)(v)
N #define U16_LE(v)      (U16)(v)
N#endif
N#define ntohs(v)        U16_BE(v)
N#define ntohl(v)        U32_BE(v)
N#define htons(v)        ntohs(v)
N#define htonl(v)        ntohl(v)
N
N/*----------------------------------------------------------------------------
N *                             RTX Kernel API
N *---------------------------------------------------------------------------*/
N
N#ifdef __cplusplus
Sextern "C"  {
N#endif
N
N/* Definition of Semaphore type */
Ntypedef U32 OS_SEM[2];
N
N/* Definition of Mailbox type */
N#define os_mbx_declare(name,cnt)    U32 name [4 + cnt]
Ntypedef U32 OS_MBX[];
N
N/* Definition of Mutex type */
Ntypedef U32 OS_MUT[4];
N
N/* Task Identification number. */
Ntypedef U32 OS_TID;
N
N/* Function return of system calls returning an object identification */
Ntypedef void *OS_ID;
N
N/* Function return of system calls indicating an event or completion state */
Ntypedef U32 OS_RESULT;
N
N/* Return codes */
N#define OS_R_TMO        0x01
N#define OS_R_EVT        0x02
N#define OS_R_SEM        0x03
N#define OS_R_MBX        0x04
N#define OS_R_MUT        0x05
N
N#define OS_R_OK         0x00
N#define OS_R_NOK        0xff
N
N#define OS_TCB_SIZE     56
N#define OS_TMR_SIZE     8
N
N/* Error Codes */
N#define OS_ERR_STK_OVF  1
N#define OS_ERR_FIFO_OVF 2
N#define OS_ERR_MBX_OVF  3
N
N#if !(__TARGET_ARCH_6S_M || __TARGET_ARCH_7_M || __TARGET_ARCH_7E_M)
X#if !(__TARGET_ARCH_6S_M || 1 || __TARGET_ARCH_7E_M)
S
S/*----------------------------------------------------------------------------
S *      Functions ARM
S *---------------------------------------------------------------------------*/
S
S/* Task Management */
S#define os_sys_init(tsk)              os_sys_init0(tsk,0,NULL)
S#define os_sys_init_prio(tsk,prio)    os_sys_init0(tsk,prio,NULL)
S#define os_sys_init_user(tsk,prio,stk,size)                                   \
S                                      os_sys_init0(tsk,prio|(size<<8),stk)
X#define os_sys_init_user(tsk,prio,stk,size)                                                                         os_sys_init0(tsk,prio|(size<<8),stk)
S#define os_tsk_create(tsk,prio)       os_tsk_create0(tsk,prio,NULL,NULL)
S#define os_tsk_create_user(tsk,prio,stk,size)                                 \
S                                      os_tsk_create0(tsk,prio|(size<<8),stk,NULL)
X#define os_tsk_create_user(tsk,prio,stk,size)                                                                       os_tsk_create0(tsk,prio|(size<<8),stk,NULL)
S#define os_tsk_create_ex(tsk,prio,argv) os_tsk_create_ex0(tsk,prio,NULL,argv)
S#define os_tsk_create_user_ex(tsk,prio,stk,size,argv)                         \
S                                      os_tsk_create_ex0(tsk,prio|(size<<8),stk,argv)
X#define os_tsk_create_user_ex(tsk,prio,stk,size,argv)                                                               os_tsk_create_ex0(tsk,prio|(size<<8),stk,argv)
S#define os_tsk_delete_self()          { os_tsk_delete(0); for(;;); }
S#define os_tsk_prio_self(prio)        os_tsk_prio(0,prio)
S#define isr_tsk_get()                 os_tsk_self()
S
Sextern void      os_sys_init0 (void (*task)(void), U32 prio_stksz, void *stk);
Sextern OS_TID    os_tsk_create0 (void (*task)(void), U32 prio_stksz, 
S                                 void *stk, void *argv);
Sextern OS_TID    os_tsk_create_ex0 (void (*task)(void *), U32 prio_stksz, 
S                                    void *stk, void *argv);
Sextern OS_TID    os_tsk_self (void);
Sextern void      os_tsk_pass (void);
Sextern OS_RESULT os_tsk_prio (OS_TID task_id, U8 new_prio);
Sextern OS_RESULT os_tsk_delete (OS_TID task_id);
S
S/* Event flag Management */
S#define os_evt_wait_or(wflags,tmo)      os_evt_wait(wflags,tmo,__FALSE)
S#define os_evt_wait_and(wflags,tmo)     os_evt_wait(wflags,tmo,__TRUE)
S
Sextern OS_RESULT os_evt_wait (U16 wait_flags, U16 timeout, BOOL and_wait);
Sextern void      os_evt_set (U16 event_flags, OS_TID task_id);
Sextern void      os_evt_clr (U16 clear_flags, OS_TID task_id);
Sextern void      isr_evt_set (U16 event_flags, OS_TID task_id);
Sextern U16       os_evt_get (void);
S
S/* Semaphore Management */
Sextern void      os_sem_init (OS_ID semaphore, U16 token_count);
Sextern OS_RESULT os_sem_send (OS_ID semaphore);
Sextern OS_RESULT os_sem_wait (OS_ID semaphore, U16 timeout);
Sextern void      isr_sem_send (OS_ID semaphore);
S
S/* Mailbox Management */
S#define isr_mbx_check(mbx)              os_mbx_check(mbx)
S
Sextern void      os_mbx_init (OS_ID mailbox, U16 mbx_size);
Sextern OS_RESULT os_mbx_send (OS_ID mailbox, void *message_ptr, U16 timeout);
Sextern OS_RESULT os_mbx_wait (OS_ID mailbox, void  **message, U16 timeout);
Sextern OS_RESULT os_mbx_check (OS_ID mailbox);
Sextern void      isr_mbx_send (OS_ID mailbox, void *message_ptr);
Sextern OS_RESULT isr_mbx_receive (OS_ID mailbox, void **message);
S
S/* Mutex Management */
Sextern void      os_mut_init (OS_ID mutex);
Sextern OS_RESULT os_mut_release (OS_ID mutex);
Sextern OS_RESULT os_mut_wait (OS_ID mutex, U16 timeout);
S
S/* Time Management */
Sextern U32       os_time_get (void);
Sextern void      os_dly_wait (U16 delay_time);
Sextern void      os_itv_set (U16 interval_time);
Sextern void      os_itv_wait (void);
S
S/* User Timer Management */
Sextern OS_ID     os_tmr_create (U16 tcnt, U16 info);
Sextern OS_ID     os_tmr_kill (OS_ID timer);
S
S/* System Functions */
Sextern U32       os_suspend (void);
Sextern void      os_resume (U32 sleep_time);
Sextern void      tsk_lock (void) __swi (5);
Sextern void      tsk_unlock (void);
S
S/* Fixed Memory Block Management Functions */
Sextern int       _init_box (void *box_mem, U32 box_size, U32 blk_size);
Sextern void     *_alloc_box (void *box_mem) __swi (1);
Sextern void     *_calloc_box (void *box_mem);
Sextern int       _free_box (void *box_mem, void *box) __swi (2);
S
N#else
N
N/*----------------------------------------------------------------------------
N *      Functions Cortex-M
N *---------------------------------------------------------------------------*/
N
N#define __SVC_0         __svc_indirect(0)
N
N/* Task Management */
Nextern void      os_set_env    (void);
Nextern void      rt_sys_init   (void (*task)(void), U8 priority, void *stk);
Nextern void      rt_tsk_pass   (void);
Nextern OS_TID    rt_tsk_self   (void);
Nextern OS_RESULT rt_tsk_prio   (OS_TID task_id, U8 new_prio);
Nextern OS_TID    rt_tsk_create (void (*task)(void), U8 priority, void *stk, void *argv);
Nextern OS_RESULT rt_tsk_delete (OS_TID task_id);
N
N#define os_sys_init(tsk)              os_set_env();                           \
N                                      _os_sys_init((U32)rt_sys_init,tsk,0,NULL)
X#define os_sys_init(tsk)              os_set_env();                                                                 _os_sys_init((U32)rt_sys_init,tsk,0,NULL)
N#define os_sys_init_user(tsk,prio,stk,size)                                   \
N                                      os_set_env();                           \
N                                      _os_sys_init((U32)rt_sys_init,tsk,prio|(size<<8),stk)
X#define os_sys_init_user(tsk,prio,stk,size)                                                                         os_set_env();                                                                 _os_sys_init((U32)rt_sys_init,tsk,prio|(size<<8),stk)
N#define os_sys_init_prio(tsk,prio)    os_set_env();                           \
N                                      _os_sys_init((U32)rt_sys_init,tsk,prio,NULL)
X#define os_sys_init_prio(tsk,prio)    os_set_env();                                                                 _os_sys_init((U32)rt_sys_init,tsk,prio,NULL)
N#define os_tsk_create(tsk,prio)       _os_tsk_create((U32)rt_tsk_create,tsk,prio,NULL,NULL)
N#define os_tsk_create_user(tsk,prio,stk,size)                                 \
N                                      _os_tsk_create((U32)rt_tsk_create,tsk,prio|(size<<8),stk,NULL)
X#define os_tsk_create_user(tsk,prio,stk,size)                                                                       _os_tsk_create((U32)rt_tsk_create,tsk,prio|(size<<8),stk,NULL)
N#define os_tsk_create_ex(tsk,prio,argv) _os_tsk_create_ex((U32)rt_tsk_create,tsk,prio,NULL,argv)
N#define os_tsk_create_user_ex(tsk,prio,stk,size,argv)                         \
N                                      _os_tsk_create_ex((U32)rt_tsk_create,tsk,prio|(size<<8),stk,argv)
X#define os_tsk_create_user_ex(tsk,prio,stk,size,argv)                                                               _os_tsk_create_ex((U32)rt_tsk_create,tsk,prio|(size<<8),stk,argv)
N#define os_tsk_self()                 _os_tsk_self((U32)rt_tsk_self)
N#define os_tsk_pass()                 _os_tsk_pass((U32)rt_tsk_pass)
N#define os_tsk_prio(task_id,new_prio) _os_tsk_prio((U32)rt_tsk_prio,task_id,new_prio)
N#define os_tsk_prio_self(prio)        _os_tsk_prio((U32)rt_tsk_prio,0,prio)
N#define os_tsk_delete(task_id)        _os_tsk_delete((U32)rt_tsk_delete,task_id)
N#define os_tsk_delete_self()          { _os_tsk_delete((U32)rt_tsk_delete, 0); for(;;); }
N#define isr_tsk_get()                 rt_tsk_self()
N
Nextern void      _os_sys_init(U32 p, void (*task)(void), U32 prio_stksz,
N                                     void *stk)                        __SVC_0;
X                                     void *stk)                        __svc_indirect(0);
Nextern OS_TID    _os_tsk_create (U32 p, void (*task)(void), U32 prio_stksz,
N                                        void *stk, void *argv)         __SVC_0;
X                                        void *stk, void *argv)         __svc_indirect(0);
Nextern OS_TID    _os_tsk_create_ex (U32 p, void (*task)(void *), U32 prio_stksz,
N                                           void *stk, void *argv)      __SVC_0;
X                                           void *stk, void *argv)      __svc_indirect(0);
Nextern OS_TID    _os_tsk_self (U32 p)                                  __SVC_0;
Xextern OS_TID    _os_tsk_self (U32 p)                                  __svc_indirect(0);
Nextern void      _os_tsk_pass (U32 p)                                  __SVC_0;
Xextern void      _os_tsk_pass (U32 p)                                  __svc_indirect(0);
Nextern OS_RESULT _os_tsk_prio (U32 p, OS_TID task_id, U8 new_prio)     __SVC_0;
Xextern OS_RESULT _os_tsk_prio (U32 p, OS_TID task_id, U8 new_prio)     __svc_indirect(0);
Nextern OS_RESULT _os_tsk_delete (U32 p, OS_TID task_id)                __SVC_0;
Xextern OS_RESULT _os_tsk_delete (U32 p, OS_TID task_id)                __svc_indirect(0);
N
N/* Event flag Management */
Nextern OS_RESULT rt_evt_wait (U16 wait_flags,  U16 timeout, BOOL and_wait);
Nextern void      rt_evt_set  (U16 event_flags, OS_TID task_id);
Nextern void      rt_evt_clr  (U16 clear_flags, OS_TID task_id);
Nextern U16       rt_evt_get  (void);
N
N#define os_evt_wait_or(wflags,tmo)    _os_evt_wait((U32)rt_evt_wait,wflags,tmo,__FALSE)
N#define os_evt_wait_and(wflags,tmo)   _os_evt_wait((U32)rt_evt_wait,wflags,tmo,__TRUE)
N#define os_evt_set(evt_flags,task_id) _os_evt_set((U32)rt_evt_set,evt_flags,task_id)
N#define os_evt_clr(clr_flags,task_id) _os_evt_clr((U32)rt_evt_clr,clr_flags,task_id)
N#define os_evt_get()                  _os_evt_get((U32)rt_evt_get)
N
Nextern OS_RESULT _os_evt_wait(U32 p, U16 wait_flags, U16 timeout,
N                                     BOOL and_wait)                    __SVC_0;
X                                     BOOL and_wait)                    __svc_indirect(0);
Nextern void      _os_evt_set (U32 p, U16 event_flags, OS_TID task_id)  __SVC_0;
Xextern void      _os_evt_set (U32 p, U16 event_flags, OS_TID task_id)  __svc_indirect(0);
Nextern void      _os_evt_clr (U32 p, U16 clear_flags, OS_TID task_id)  __SVC_0;
Xextern void      _os_evt_clr (U32 p, U16 clear_flags, OS_TID task_id)  __svc_indirect(0);
Nextern U16       _os_evt_get (U32 p)                                   __SVC_0;
Xextern U16       _os_evt_get (U32 p)                                   __svc_indirect(0);
Nextern void      isr_evt_set (U16 event_flags, OS_TID task_id);
N
N/* Semaphore Management */
Nextern void      rt_sem_init (OS_ID semaphore, U16 token_count);
Nextern OS_RESULT rt_sem_send (OS_ID semaphore);
Nextern OS_RESULT rt_sem_wait (OS_ID semaphore, U16 timeout);
N
N#define os_sem_init(sem,t_count)     _os_sem_init((U32)rt_sem_init,sem,t_count)
N#define os_sem_send(sem)             _os_sem_send((U32)rt_sem_send,sem)
N#define os_sem_wait(sem,tmo)         _os_sem_wait((U32)rt_sem_wait,sem,tmo)
N
Nextern void      _os_sem_init (U32 p, OS_ID semaphore, 
N                                      U16 token_count)                 __SVC_0;
X                                      U16 token_count)                 __svc_indirect(0);
Nextern OS_RESULT _os_sem_send (U32 p, OS_ID semaphore)                 __SVC_0;
Xextern OS_RESULT _os_sem_send (U32 p, OS_ID semaphore)                 __svc_indirect(0);
Nextern OS_RESULT _os_sem_wait (U32 p, OS_ID semaphore, U16 timeout)    __SVC_0;
Xextern OS_RESULT _os_sem_wait (U32 p, OS_ID semaphore, U16 timeout)    __svc_indirect(0);
Nextern void      isr_sem_send (OS_ID semaphore);
N
N/* Mailbox Management */
Nextern void      rt_mbx_init  (OS_ID mailbox, U16 mbx_size);
Nextern OS_RESULT rt_mbx_send  (OS_ID mailbox, void *p_msg,    U16 timeout);
Nextern OS_RESULT rt_mbx_wait  (OS_ID mailbox, void **message, U16 timeout);
Nextern OS_RESULT rt_mbx_check (OS_ID mailbox);
N
N#define os_mbx_init(mbx,mbx_size)     _os_mbx_init((U32)rt_mbx_init,mbx,mbx_size)
N#define os_mbx_send(mbx,p_msg,tmo)    _os_mbx_send((U32)rt_mbx_send,mbx,p_msg,tmo)
N#define os_mbx_wait(mbx,message,tmo)  _os_mbx_wait((U32)rt_mbx_wait,mbx,message,tmo)
N#define os_mbx_check(mbx)             _os_mbx_check((U32)rt_mbx_check,mbx)
N#define isr_mbx_check(mbx)            rt_mbx_check(mbx)
N
Nextern void      _os_mbx_init (U32 p, OS_ID mailbox, U16 mbx_size)     __SVC_0;
Xextern void      _os_mbx_init (U32 p, OS_ID mailbox, U16 mbx_size)     __svc_indirect(0);
Nextern OS_RESULT _os_mbx_send (U32 p, OS_ID mailbox, void *message_ptr,
N                                      U16 timeout)                     __SVC_0;
X                                      U16 timeout)                     __svc_indirect(0);
Nextern OS_RESULT _os_mbx_wait (U32 p, OS_ID mailbox, void  **message,
N                                      U16 timeout)                     __SVC_0;
X                                      U16 timeout)                     __svc_indirect(0);
Nextern OS_RESULT _os_mbx_check (U32 p, OS_ID mailbox)                  __SVC_0;
Xextern OS_RESULT _os_mbx_check (U32 p, OS_ID mailbox)                  __svc_indirect(0);
Nextern void      isr_mbx_send (OS_ID mailbox, void *message_ptr);
Nextern OS_RESULT isr_mbx_receive (OS_ID mailbox, void **message);
N
N/* Mutex Management */
Nextern void      rt_mut_init    (OS_ID mutex);
Nextern OS_RESULT rt_mut_release (OS_ID mutex);
Nextern OS_RESULT rt_mut_wait    (OS_ID mutex, U16 timeout);
N
N#define os_mut_init(mutex)         _os_mut_init((U32)rt_mut_init,mutex)
N#define os_mut_release(mutex)      _os_mut_release((U32)rt_mut_release,mutex)
N#define os_mut_wait(mutex,timeout) _os_mut_wait((U32)rt_mut_wait,mutex,timeout)
N
Nextern void      _os_mut_init (U32 p, OS_ID mutex)                     __SVC_0;
Xextern void      _os_mut_init (U32 p, OS_ID mutex)                     __svc_indirect(0);
Nextern OS_RESULT _os_mut_release (U32 p, OS_ID mutex)                  __SVC_0;
Xextern OS_RESULT _os_mut_release (U32 p, OS_ID mutex)                  __svc_indirect(0);
Nextern OS_RESULT _os_mut_wait (U32 p, OS_ID mutex, U16 timeout)        __SVC_0;
Xextern OS_RESULT _os_mut_wait (U32 p, OS_ID mutex, U16 timeout)        __svc_indirect(0);
N
N/* Time Management */
Nextern U32       rt_time_get (void);
Nextern void      rt_dly_wait (U16 delay_time);
Nextern void      rt_itv_set  (U16 interval_time);
Nextern void      rt_itv_wait (void);
N
N#define os_time_get()              _os_time_get((U32)rt_time_get)
N#define os_dly_wait(delay_time)    _os_dly_wait((U32)rt_dly_wait,delay_time)
N#define os_itv_set(interval_time)  _os_itv_set((U32)rt_itv_set,interval_time)
N#define os_itv_wait()              _os_itv_wait((U32)rt_itv_wait)
N
Nextern U32       _os_time_get (U32 p)                                  __SVC_0;
Xextern U32       _os_time_get (U32 p)                                  __svc_indirect(0);
Nextern void      _os_dly_wait (U32 p, U16 delay_time)                  __SVC_0;
Xextern void      _os_dly_wait (U32 p, U16 delay_time)                  __svc_indirect(0);
Nextern void      _os_itv_set (U32 p, U16 interval_time)                __SVC_0;
Xextern void      _os_itv_set (U32 p, U16 interval_time)                __svc_indirect(0);
Nextern void      _os_itv_wait (U32 p)                                  __SVC_0;
Xextern void      _os_itv_wait (U32 p)                                  __svc_indirect(0);
N
N/* User Timer Management */
Nextern OS_ID     rt_tmr_create (U16 tcnt, U16 info);
Nextern OS_ID     rt_tmr_kill   (OS_ID timer);
N
N#define os_tmr_create(tcnt,info)   _os_tmr_create((U32)rt_tmr_create,tcnt,info)
N#define os_tmr_kill(timer)         _os_tmr_kill((U32)rt_tmr_kill,timer)
N
Nextern OS_ID     _os_tmr_create (U32 p, U16 tcnt, U16 info)            __SVC_0;
Xextern OS_ID     _os_tmr_create (U32 p, U16 tcnt, U16 info)            __svc_indirect(0);
Nextern OS_ID     _os_tmr_kill (U32 p, OS_ID timer)                     __SVC_0;
Xextern OS_ID     _os_tmr_kill (U32 p, OS_ID timer)                     __svc_indirect(0);
N
N/* System Functions */
Nextern U32       rt_suspend    (void);
Nextern void      rt_resume     (U32 sleep_time);
Nextern void      rt_tsk_lock   (void);
Nextern void      rt_tsk_unlock (void);
N
N#define os_suspend()               _os_suspend((U32)rt_suspend)
N#define os_resume(sleep_time)      _os_resume((U32)rt_resume,sleep_time)
N#define tsk_lock()                 _os_tsk_lock((U32)rt_tsk_lock)
N#define tsk_unlock()               _os_tsk_unlock((U32)rt_tsk_unlock)
N
Nextern U32       _os_suspend (U32 p)                                   __SVC_0;
Xextern U32       _os_suspend (U32 p)                                   __svc_indirect(0);
Nextern void      _os_resume (U32 p, U32 sleep_time)                    __SVC_0;
Xextern void      _os_resume (U32 p, U32 sleep_time)                    __svc_indirect(0);
Nextern void      _os_tsk_lock (U32 p)                                  __SVC_0;
Xextern void      _os_tsk_lock (U32 p)                                  __svc_indirect(0);
Nextern void      _os_tsk_unlock (U32 p)                                __SVC_0;
Xextern void      _os_tsk_unlock (U32 p)                                __svc_indirect(0);
N
N/* Fixed Memory Block Management Functions */
Nextern int       _init_box (void *box_mem, U32 box_size, U32 blk_size);
Nextern void     *_alloc_box (void *box_mem);
Nextern void     *_calloc_box (void *box_mem);
Nextern int       _free_box (void *box_mem, void *box);
N
N#endif
N
N#define BOX_ALIGN_8     0x80000000
N#define _declare_box(pool,size,cnt)   U32 pool[(((size)+3)/4)*(cnt) + 3]
N#define _declare_box8(pool,size,cnt)  U64 pool[(((size)+7)/8)*(cnt) + 2]
N#define _init_box8(pool,size,bsize)   _init_box (pool,size,bsize | BOX_ALIGN_8)
N
N/* For compatibility with older configurations.*/
N#define os_stk_overflow         os_error
N
N/*----------------------------------------------------------------------------
N *                        Flash File System API
N *---------------------------------------------------------------------------*/
N
N/* File System Type */
Ntypedef enum _FS_TYPE {
N  FS_TYPE_NONE = 0,                     /* No file system (volume unformatted)*/
N  FS_TYPE_UNKNOWN,                      /* File system type is unknown       */
N  FS_TYPE_FAT12,                        /* File system type is FAT12         */
N  FS_TYPE_FAT16,                        /* File system type is FAT16         */
N  FS_TYPE_FAT32,                        /* File system type is FAT32         */
N  FS_TYPE_EFS                           /* File system type is EFS           */
N} FS_TYPE;
N
Ntypedef struct {                        /* RL Time format (FFS, TCPnet)      */
N  U8  hr;                               /* Hours    [0..23]                  */
N  U8  min;                              /* Minutes  [0..59]                  */
N  U8  sec;                              /* Seconds  [0..59]                  */
N  U8  day;                              /* Day      [1..31]                  */
N  U8  mon;                              /* Month    [1..12]                  */
N  U16 year;                             /* Year     [1980..2107]             */
N} RL_TIME;
N
Ntypedef struct {                        /* Search info record                */
N  S8  name[256];                        /* Name                              */
N  U32 size;                             /* File size in bytes                */
N  U16 fileID;                           /* System Identification             */
N  U8  attrib;                           /* Attributes                        */
N  RL_TIME time;                         /* Create/Modify Time                */
N} FINFO;
N
N/* Drive information */
Ntypedef struct {
N  FS_TYPE fs_type;                      /* Drives file system type           */
N  U64     capacity;                     /* Drives capacity in bytes          */
N} Drive_INFO;
N
Nextern int finit (const char *drive);
Nextern int funinit (const char *drive);
Nextern int fdelete (const char *filename);
Nextern int frename (const char *oldname, const char *newname);
Nextern int ffind (const char *pattern, FINFO *info);
Nextern U64 ffree (const char *drive);
Nextern int fformat (const char *drive);
Nextern int fanalyse (const char *drive);
Nextern int fcheck (const char *drive);
Nextern int fdefrag (const char *drive);
Nextern int fattrib (const char *par, const char *path);
Nextern int fvol    (const char *drive, char *buf);
Nextern int finfo   (const char *drive, Drive_INFO *info);
N
N/* The following macros provide for common functions */
N#define unlink(fn)      fdelete(fn);
N
N/*----------------------------------------------------------------------------
N *                             TCPnet API
N *---------------------------------------------------------------------------*/
N
N/* UDP Options */
N#define UDP_OPT_SEND_CS    0x01   /* Calculate Checksum for UDP send frames  */
N#define UDP_OPT_CHK_CS     0x02   /* Verify Checksum for received UDP frames */
N
N/* TCP Socket Types */
N#define TCP_TYPE_SERVER    0x01   /* Socket Type Server (open for listening) */
N#define TCP_TYPE_CLIENT    0x02   /* Socket Type Client (initiate connect)   */
N#define TCP_TYPE_DELAY_ACK 0x04   /* Socket Type Delayed Acknowledge         */
N#define TCP_TYPE_FLOW_CTRL 0x08   /* Socket Type Flow Control                */
N#define TCP_TYPE_KEEP_ALIVE 0x10  /* Socket Type Keep Alive                  */
N#define TCP_TYPE_CLIENT_SERVER (TCP_TYPE_SERVER | TCP_TYPE_CLIENT)
N
N/* TCP Callback Events */
N#define TCP_EVT_CONREQ     0      /* Connect request received event          */
N#define TCP_EVT_CONNECT    1      /* Connection established event            */
N#define TCP_EVT_CLOSE      2      /* Connection was properly closed          */
N#define TCP_EVT_ABORT      3      /* Connection is for some reason aborted   */
N#define TCP_EVT_ACK        4      /* Previously send data acknowledged       */
N#define TCP_EVT_DATA       5      /* Data received event                     */
N
N/* TCP States */
N#define TCP_STATE_FREE     0      /* Entry is free and unused                */
N#define TCP_STATE_CLOSED   1      /* Entry allocated, socket still closed    */
N#define TCP_STATE_LISTEN   2      /* Socket waiting for incoming connection  */
N#define TCP_STATE_SYN_REC  3      /* SYN frame received                      */
N#define TCP_STATE_SYN_SENT 4      /* SYN packet sent to establish a connect. */
N#define TCP_STATE_FINW1    5      /* Tcp_close started FIN packet was sent   */
N#define TCP_STATE_FINW2    6      /* Our FIN ack-ed, waiting for remote FIN  */
N#define TCP_STATE_CLOSING  7      /* Received FIN independently of our FIN   */
N#define TCP_STATE_LAST_ACK 8      /* Waiting for last ACK for our FIN        */
N#define TCP_STATE_TWAIT    9      /* Timed waiting for 2MSL                  */
N#define TCP_STATE_CONNECT  10     /* TCP Connection established              */
N
N/* BSD Socket Address Family */
N#define AF_UNSPEC          0      /* Unspecified                             */
N#define AF_INET            1      /* Internet Address Family (UDP, TCP)      */
N#define AF_NETBIOS         2      /* NetBios-style addresses                 */
N
N/* BSD Protocol families, same as address families */
N#define PF_UNSPEC          AF_UNSPEC
N#define PF_INET            AF_INET
N#define PF_NETBIOS         AF_NETBIOS
N
N/* BSD Socket Type */
N#define SOCK_STREAM        1      /* Stream Socket (Connection oriented)     */
N#define SOCK_DGRAM         2      /* Datagram Socket (Connectionless)        */
N
N/* BSD Socket Protocol */
N#define IPPROTO_TCP        1      /* TCP Protocol                            */
N#define IPPROTO_UDP        2      /* UDP Protocol                            */
N
N/* BSD Internet Addresses */
N#define INADDR_ANY     0x00000000 /* All IP addresses accepted               */
N#define INADDR_NONE    0xffffffff /* No IP address accepted                  */
N
N/* BSD Socket Return values */
N#define SCK_SUCCESS         0     /* Success                                 */
N#define SCK_ERROR         (-1)    /* General Error                           */
N#define SCK_EINVALID      (-2)    /* Invalid socket descriptor               */
N#define SCK_EINVALIDPARA  (-3)    /* Invalid parameter                       */
N#define SCK_EWOULDBLOCK   (-4)    /* It would have blocked.                  */
N#define SCK_EMEMNOTAVAIL  (-5)    /* Not enough memory in memory pool        */
N#define SCK_ECLOSED       (-6)    /* Connection is closed or aborted         */
N#define SCK_ELOCKED       (-7)    /* Socket is locked in RTX environment     */
N#define SCK_ETIMEOUT      (-8)    /* Socket, Host Resolver timeout           */
N#define SCK_EINPROGRESS   (-9)    /* Host Name resolving in progress         */
N#define SCK_ENONAME       (-10)   /* Host Name not existing                  */
N
N/* BSD Socket flags parameter */
N#define MSG_DONTWAIT       0x01   /* Enables non-blocking operation          */
N#define MSG_PEEK           0x02   /* Peeks at the incoming data              */
N
N/* BSD Socket ioctl commands */
N#define FIONBIO            1      /* Set mode (blocking/non-blocking)        */
N#define FIO_DELAY_ACK      2      /* Set DELAY_ACK mode for stream socket    */
N#define FIO_KEEP_ALIVE     3      /* Set KEEP_ALIVE mode for stream socket   */
N#define FIO_FLOW_CTRL      4      /* Set FLOW_CTRL mode for stream socket    */
N
N/* ICMP (ping) Callback Events */
N#define ICMP_EVT_SUCCESS   0      /* Pinged Host responded                   */
N#define ICMP_EVT_TIMEOUT   1      /* Timeout, no ping response received      */
N
N/* DNS Client Callback Events */
N#define DNS_EVT_SUCCESS    0      /* Host name successfully resolved         */
N#define DNS_EVT_NONAME     1      /* DNS Error, no such name                 */
N#define DNS_EVT_TIMEOUT    2      /* Timeout resolving host                  */
N#define DNS_EVT_ERROR      3      /* Erroneous response packet               */
N
N/* DNS 'get_host_by_name()' result codes */
N#define DNS_RES_OK         0      /* Resolver successfully started           */
N#define DNS_ERROR_BUSY     1      /* Resolver busy, can't process request    */
N#define DNS_ERROR_LABEL    2      /* Label in Hostname not valid             */
N#define DNS_ERROR_NAME     3      /* Entire Hostname not valid               */
N#define DNS_ERROR_NOSRV    4      /* Prim. DNS server not specified (0.0.0.0)*/
N#define DNS_ERROR_PARAM    5      /* Invalid parameter                       */
N
N/* SMTP Client Callback Events */
N#define SMTP_EVT_SUCCESS   0      /* Email successfully sent                 */
N#define SMTP_EVT_TIMEOUT   1      /* Timeout sending email                   */
N#define SMTP_EVT_ERROR     2      /* Error when sending email                */
N
N/* FTP Client Commands */
N#define FTPC_CMD_PUT       0      /* Puts a file on FTP server               */
N#define FTPC_CMD_GET       1      /* Retrieves a file from FTP server        */
N#define FTPC_CMD_APPEND    2      /* Append file on FTP server (with create) */
N#define FTPC_CMD_DELETE    3      /* Deletes a file on FTP server            */
N#define FTPC_CMD_LIST      4      /* Lists files stored on FTP server        */
N#define FTPC_CMD_RENAME    5      /* Renames a file on FTP server            */
N#define FTPC_CMD_MKDIR     6      /* Makes a directory on FTP server         */
N#define FTPC_CMD_RMDIR     7      /* Removes an empty directory on FTP server*/
N#define FTPC_CMD_NLIST     8      /* Lists file names only (short format)    */
N
N/* FTP Client Callback Events */
N#define FTPC_EVT_SUCCESS   0      /* File operation successful               */
N#define FTPC_EVT_TIMEOUT   1      /* Timeout on file operation               */
N#define FTPC_EVT_LOGINFAIL 2      /* Login error, username/passw invalid     */
N#define FTPC_EVT_NOACCESS  3      /* File access not allowed                 */
N#define FTPC_EVT_NOTFOUND  4      /* File not found                          */
N#define FTPC_EVT_NOPATH    5      /* Working directory path not found        */
N#define FTPC_EVT_ERRLOCAL  6      /* Local file open error                   */
N#define FTPC_EVT_ERROR     7      /* Generic FTP client error                */
N
N/* TFTP Client Callback Events */
N#define TFTPC_EVT_SUCCESS  0      /* File operation successful               */
N#define TFTPC_EVT_TIMEOUT  1      /* Timeout on file operation               */
N#define TFTPC_EVT_NOACCESS 2      /* File access not allowed                 */
N#define TFTPC_EVT_NOTFOUND 3      /* File not found                          */
N#define TFTPC_EVT_DISKFULL 4      /* Disk full (local or remote)             */
N#define TFTPC_EVT_ERROR    5      /* Generic TFTP client error               */
N
N/* FTP Server Notification events */
N#define FTP_EVT_LOGIN      0      /* User logged in, session is busy         */
N#define FTP_EVT_LOGOUT     1      /* User logged out, session is idle        */
N#define FTP_EVT_LOGFAIL    2      /* User login failed (invalid credentials) */
N#define FTP_EVT_DOWNLOAD   3      /* File download ended                     */
N#define FTP_EVT_UPLOAD     4      /* File upload ended                       */
N#define FTP_EVT_DELETE     5      /* File deleted                            */
N#define FTP_EVT_RENAME     6      /* File or directory renamed               */
N#define FTP_EVT_MKDIR      7      /* Directory created                       */
N#define FTP_EVT_RMDIR      8      /* Directory removed                       */
N#define FTP_EVT_ERRLOCAL   9      /* Local file operation error              */
N#define FTP_EVT_DENIED     10     /* Requested file operation denied         */
N#define FTP_EVT_ERROR      11     /* Generic file operation error            */
N
N/* ARP Cache Entry types */
N#define ARP_FIXED_IP       0      /* Fixed IP adrs is refreshed after tout   */
N#define ARP_TEMP_IP        1      /* Temp adrs is removed after timeout      */
N
N/* BSD Socket typedef's */
Ntypedef struct sockaddr {         /* << Generic Socket Address structure >>  */
N  U16  sa_family;                 /* Address family                          */
N  char sa_data[14];               /* Direct address (up to 14 bytes)         */
N} SOCKADDR;
N
N#pragma push
N#pragma anon_unions
N
Ntypedef struct in_addr {          /* << Generic IPv4 Address structure >>    */
N  union {
N    struct {
N      U8 s_b1,s_b2,s_b3,s_b4;     /* IP address, byte access                 */
N    };
N    struct {
N      U16 s_w1,s_w2;              /* IP address, short int access            */
N    };
N    U32 s_addr;                   /* IP address in network byte order        */
N  };
N} IN_ADDR;
N#pragma pop
N
Ntypedef struct sockaddr_in {      /* << IPv4 Socket Address structure >>     */
N  S16 sin_family;                 /* Socket domain                           */
N  U16 sin_port;                   /* Port                                    */
N  IN_ADDR sin_addr;               /* IP address                              */
N  S8  sin_zero[8];                /* reserved                                */
N} SOCKADDR_IN;
N
Ntypedef struct hostent {          /* << BSD Host Entry structure >>          */
N  char *h_name;                   /* Official name of host                   */
N  char **h_aliases;               /* Pointer to an array of alias names      */
N  S16  h_addrtype;                /* Address Type: AF_INET, AF_NETBIOS       */
N  S16  h_length;                  /* Length of address in bytes              */
N  char **h_addr_list;             /* Pointer to an array of IPv4 addresses   */
N} HOSTENT;
N
Nextern void init_TcpNet (void);
Nextern BOOL main_TcpNet (void);
Nextern void timer_tick (void);
Nextern U8   udp_get_socket (U8 tos, U8 opt, 
N                            U16 (*listener)(U8 socket, U8 *remip, U16 port, U8 *buf, U16 len));
Nextern BOOL udp_release_socket (U8 socket);
Nextern BOOL udp_open (U8 socket, U16 locport);
Nextern BOOL udp_close (U8 socket);
Nextern BOOL udp_mcast_ttl (U8 socket, U8 ttl);
Nextern U8  *udp_get_buf (U16 size);
Nextern BOOL udp_send (U8 socket, U8 *remip, U16 remport, U8 *buf, U16 dlen);
Nextern U8   tcp_get_socket (U8 type, U8 tos, U16 tout,
N                            U16 (*listener)(U8 socket, U8 event, U8 *buf, U16 len));
Nextern BOOL tcp_release_socket (U8 socket);
Nextern BOOL tcp_listen (U8 socket, U16 locport);
Nextern BOOL tcp_connect (U8 socket, U8 *remip, U16 remport, U16 locport);
Nextern U8  *tcp_get_buf (U16 size);
Nextern U16  tcp_max_dsize (U8 socket);
Nextern BOOL tcp_check_send (U8 socket);
Nextern U8   tcp_get_state (U8 socket);
Nextern BOOL tcp_send (U8 socket, U8 *buf, U16 dlen);
Nextern BOOL tcp_close (U8 socket);
Nextern BOOL tcp_abort (U8 socket);
Nextern void tcp_reset_window (U8 socket);
Nextern BOOL arp_cache_ip (U8 *ipadr, U8 type);
Nextern BOOL arp_cache_mac (U8 *hwadr);
Nextern void ppp_listen (const char *user, const char *passw);
Nextern void ppp_connect (const char *dialnum, const char *user, const char *passw);
Nextern void ppp_close (void);
Nextern BOOL ppp_is_up (void);
Nextern void slip_listen (void);
Nextern void slip_connect (const char *dialnum);
Nextern void slip_close (void);
Nextern BOOL slip_is_up (void);
Nextern U8   get_host_by_name (U8 *hostn, void (*cbfunc)(U8 event, U8 *host_ip));
Nextern BOOL smtp_connect (U8 *ipadr, U16 port, void (*cbfunc)(U8 event));
Nextern void dhcp_disable (void);
Nextern BOOL igmp_join (U8 *group_ip);
Nextern BOOL igmp_leave (U8 *group_ip);
Nextern BOOL snmp_trap (U8 *manager_ip, U8 gen_trap, U8 spec_trap, U16 *obj_list);
Nextern BOOL snmp_set_community (const char *community);
Nextern BOOL icmp_ping (U8 *remip, void (*cbfunc)(U8 event));
Nextern BOOL ftpc_connect (U8 *ipadr, U16 port, U8 command, void (*cbfunc)(U8 event));
Nextern BOOL tftpc_put (U8 *ipadr, U16 port,
N                       const char *src, const char *dst, void (*cbfunc)(U8 event));
Nextern BOOL tftpc_get (U8 *ipadr, U16 port, 
N                       const char *src, const char *dst, void (*cbfunc)(U8 event));
Nextern BOOL sntp_get_time (U8 *ipadr, void (*cbfunc)(U32 utc_time));
Nextern void ftp_evt_notify (U8 evt);
N
N/* BSD Socket API */
Nextern int  socket (int family, int type, int protocol);
Nextern int  bind (int sock, const SOCKADDR *addr, int addrlen);
Nextern int  listen (int sock, int backlog);
Nextern int  accept (int sock, SOCKADDR *addr, int *addrlen);
Nextern int  connect (int sock, SOCKADDR *addr, int addrlen);
Nextern int  send (int sock, const char *buf, int len, int flags);
Nextern int  sendto (int sock, const char *buf, int len, int flags, SOCKADDR *to, int tolen);
Nextern int  recv (int sock, char *buf, int len, int flags);
Nextern int  recvfrom (int sock, char *buf, int len, int flags, SOCKADDR *from, int *fromlen);
Nextern int  closesocket (int sock);
Nextern int  getpeername (int sock, SOCKADDR *name, int *namelen);
Nextern int  getsockname (int sock, SOCKADDR *name, int *namelen);
Nextern int  ioctlsocket (int sock, long cmd, unsigned long *argp);
Nextern HOSTENT *gethostbyname (const char *name, int *err);
N
N#ifdef __cplusplus
S}
N#endif
N
N/*----------------------------------------------------------------------------
N * end of file
N *---------------------------------------------------------------------------*/
N
N#endif
N 
L 13 "D:\Keil_v5\ARM\RV31\INC\usb_lib.c" 2
N#include <rl_usb.h>
L 1 "D:\Keil_v5\ARM\RV31\INC\rl_usb.h" 1
N/*------------------------------------------------------------------------------
N *      RL-ARM - USB
N *------------------------------------------------------------------------------
N *      Name:    rl_usb.h
N *      Purpose: Main header file
N *      Rev.:    V4.70
N *------------------------------------------------------------------------------
N *      This code is part of the RealView Run-Time Library.
N *      Copyright (c) 2004-2014 KEIL - An ARM Company. All rights reserved.
N *----------------------------------------------------------------------------*/
N
N#ifndef __RL_USB_H__
N#define __RL_USB_H__
N
N#ifdef __cplusplus
Sextern "C"  {
N#endif
N
N#include <stdint.h>
L 1 "D:\Keil_v5\ARM\ARMCC\Bin\..\include\stdint.h" 1
N/* Copyright (C) ARM Ltd., 1999,2014 */
N/* All rights reserved */
N
N/*
N * RCS $Revision$
N * Checkin $Date$
N * Revising $Author: agrant $
N */
N
N#ifndef __stdint_h
N#define __stdint_h
N#define __ARMCLIB_VERSION 5060044
N
N  #ifdef __INT64_TYPE__
S    /* armclang predefines '__INT64_TYPE__' and '__INT64_C_SUFFIX__' */
S    #define __INT64 __INT64_TYPE__
N  #else
N    /* armcc has builtin '__int64' which can be used in --strict mode */
N    #define __INT64 __int64
N    #define __INT64_C_SUFFIX__ ll
N  #endif
N  #define __PASTE2(x, y) x ## y
N  #define __PASTE(x, y) __PASTE2(x, y)
N  #define __INT64_C(x)  __ESCAPE__(__PASTE(x, __INT64_C_SUFFIX__))
N  #define __UINT64_C(x)  __ESCAPE__(__PASTE(x ## u, __INT64_C_SUFFIX__))
N  #if defined(__clang__) || (defined(__ARMCC_VERSION) && !defined(__STRICT_ANSI__))
X  #if 0L || (1L && !0L)
N    /* armclang and non-strict armcc allow 'long long' in system headers */
N    #define __LONGLONG long long
N  #else
S    /* strict armcc has '__int64' */
S    #define __LONGLONG __int64
N  #endif
N
N  #ifndef __STDINT_DECLS
N  #define __STDINT_DECLS
N
N    #undef __CLIBNS
N
N    #ifdef __cplusplus
S      namespace std {
S          #define __CLIBNS std::
S          extern "C" {
N    #else
N      #define __CLIBNS
N    #endif  /* __cplusplus */
N
N
N/*
N * 'signed' is redundant below, except for 'signed char' and if
N * the typedef is used to declare a bitfield.
N */
N
N    /* 7.18.1.1 */
N
N    /* exact-width signed integer types */
Ntypedef   signed          char int8_t;
Ntypedef   signed short     int int16_t;
Ntypedef   signed           int int32_t;
Ntypedef   signed       __INT64 int64_t;
Xtypedef   signed       __int64 int64_t;
N
N    /* exact-width unsigned integer types */
Ntypedef unsigned          char uint8_t;
Ntypedef unsigned short     int uint16_t;
Ntypedef unsigned           int uint32_t;
Ntypedef unsigned       __INT64 uint64_t;
Xtypedef unsigned       __int64 uint64_t;
N
N    /* 7.18.1.2 */
N
N    /* smallest type of at least n bits */
N    /* minimum-width signed integer types */
Ntypedef   signed          char int_least8_t;
Ntypedef   signed short     int int_least16_t;
Ntypedef   signed           int int_least32_t;
Ntypedef   signed       __INT64 int_least64_t;
Xtypedef   signed       __int64 int_least64_t;
N
N    /* minimum-width unsigned integer types */
Ntypedef unsigned          char uint_least8_t;
Ntypedef unsigned short     int uint_least16_t;
Ntypedef unsigned           int uint_least32_t;
Ntypedef unsigned       __INT64 uint_least64_t;
Xtypedef unsigned       __int64 uint_least64_t;
N
N    /* 7.18.1.3 */
N
N    /* fastest minimum-width signed integer types */
Ntypedef   signed           int int_fast8_t;
Ntypedef   signed           int int_fast16_t;
Ntypedef   signed           int int_fast32_t;
Ntypedef   signed       __INT64 int_fast64_t;
Xtypedef   signed       __int64 int_fast64_t;
N
N    /* fastest minimum-width unsigned integer types */
Ntypedef unsigned           int uint_fast8_t;
Ntypedef unsigned           int uint_fast16_t;
Ntypedef unsigned           int uint_fast32_t;
Ntypedef unsigned       __INT64 uint_fast64_t;
Xtypedef unsigned       __int64 uint_fast64_t;
N
N    /* 7.18.1.4 integer types capable of holding object pointers */
N#if __sizeof_ptr == 8
X#if 4 == 8
Stypedef   signed       __INT64 intptr_t;
Stypedef unsigned       __INT64 uintptr_t;
N#else
Ntypedef   signed           int intptr_t;
Ntypedef unsigned           int uintptr_t;
N#endif
N
N    /* 7.18.1.5 greatest-width integer types */
Ntypedef   signed     __LONGLONG intmax_t;
Xtypedef   signed     long long intmax_t;
Ntypedef unsigned     __LONGLONG uintmax_t;
Xtypedef unsigned     long long uintmax_t;
N
N
N#if !defined(__cplusplus) || defined(__STDC_LIMIT_MACROS)
X#if !0L || 0L
N
N    /* 7.18.2.1 */
N
N    /* minimum values of exact-width signed integer types */
N#define INT8_MIN                   -128
N#define INT16_MIN                -32768
N#define INT32_MIN          (~0x7fffffff)   /* -2147483648 is unsigned */
N#define INT64_MIN  __INT64_C(~0x7fffffffffffffff) /* -9223372036854775808 is unsigned */
N
N    /* maximum values of exact-width signed integer types */
N#define INT8_MAX                    127
N#define INT16_MAX                 32767
N#define INT32_MAX            2147483647
N#define INT64_MAX  __INT64_C(9223372036854775807)
N
N    /* maximum values of exact-width unsigned integer types */
N#define UINT8_MAX                   255
N#define UINT16_MAX                65535
N#define UINT32_MAX           4294967295u
N#define UINT64_MAX __UINT64_C(18446744073709551615)
N
N    /* 7.18.2.2 */
N
N    /* minimum values of minimum-width signed integer types */
N#define INT_LEAST8_MIN                   -128
N#define INT_LEAST16_MIN                -32768
N#define INT_LEAST32_MIN          (~0x7fffffff)
N#define INT_LEAST64_MIN  __INT64_C(~0x7fffffffffffffff)
N
N    /* maximum values of minimum-width signed integer types */
N#define INT_LEAST8_MAX                    127
N#define INT_LEAST16_MAX                 32767
N#define INT_LEAST32_MAX            2147483647
N#define INT_LEAST64_MAX  __INT64_C(9223372036854775807)
N
N    /* maximum values of minimum-width unsigned integer types */
N#define UINT_LEAST8_MAX                   255
N#define UINT_LEAST16_MAX                65535
N#define UINT_LEAST32_MAX           4294967295u
N#define UINT_LEAST64_MAX __UINT64_C(18446744073709551615)
N
N    /* 7.18.2.3 */
N
N    /* minimum values of fastest minimum-width signed integer types */
N#define INT_FAST8_MIN           (~0x7fffffff)
N#define INT_FAST16_MIN          (~0x7fffffff)
N#define INT_FAST32_MIN          (~0x7fffffff)
N#define INT_FAST64_MIN  __INT64_C(~0x7fffffffffffffff)
N
N    /* maximum values of fastest minimum-width signed integer types */
N#define INT_FAST8_MAX             2147483647
N#define INT_FAST16_MAX            2147483647
N#define INT_FAST32_MAX            2147483647
N#define INT_FAST64_MAX  __INT64_C(9223372036854775807)
N
N    /* maximum values of fastest minimum-width unsigned integer types */
N#define UINT_FAST8_MAX            4294967295u
N#define UINT_FAST16_MAX           4294967295u
N#define UINT_FAST32_MAX           4294967295u
N#define UINT_FAST64_MAX __UINT64_C(18446744073709551615)
N
N    /* 7.18.2.4 */
N
N    /* minimum value of pointer-holding signed integer type */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define INTPTR_MIN INT64_MIN
N#else
N#define INTPTR_MIN INT32_MIN
N#endif
N
N    /* maximum value of pointer-holding signed integer type */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define INTPTR_MAX INT64_MAX
N#else
N#define INTPTR_MAX INT32_MAX
N#endif
N
N    /* maximum value of pointer-holding unsigned integer type */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define UINTPTR_MAX UINT64_MAX
N#else
N#define UINTPTR_MAX UINT32_MAX
N#endif
N
N    /* 7.18.2.5 */
N
N    /* minimum value of greatest-width signed integer type */
N#define INTMAX_MIN  __ESCAPE__(~0x7fffffffffffffffll)
N
N    /* maximum value of greatest-width signed integer type */
N#define INTMAX_MAX  __ESCAPE__(9223372036854775807ll)
N
N    /* maximum value of greatest-width unsigned integer type */
N#define UINTMAX_MAX __ESCAPE__(18446744073709551615ull)
N
N    /* 7.18.3 */
N
N    /* limits of ptrdiff_t */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define PTRDIFF_MIN INT64_MIN
S#define PTRDIFF_MAX INT64_MAX
N#else
N#define PTRDIFF_MIN INT32_MIN
N#define PTRDIFF_MAX INT32_MAX
N#endif
N
N    /* limits of sig_atomic_t */
N#define SIG_ATOMIC_MIN (~0x7fffffff)
N#define SIG_ATOMIC_MAX   2147483647
N
N    /* limit of size_t */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define SIZE_MAX UINT64_MAX
N#else
N#define SIZE_MAX UINT32_MAX
N#endif
N
N    /* limits of wchar_t */
N    /* NB we have to undef and redef because they're defined in both
N     * stdint.h and wchar.h */
N#undef WCHAR_MIN
N#undef WCHAR_MAX
N
N#if defined(__WCHAR32) || (defined(__ARM_SIZEOF_WCHAR_T) && __ARM_SIZEOF_WCHAR_T == 4)
X#if 0L || (0L && __ARM_SIZEOF_WCHAR_T == 4)
S  #define WCHAR_MIN   0
S  #define WCHAR_MAX   0xffffffffU
N#else
N  #define WCHAR_MIN   0
N  #define WCHAR_MAX   65535
N#endif
N
N    /* limits of wint_t */
N#define WINT_MIN (~0x7fffffff)
N#define WINT_MAX 2147483647
N
N#endif /* __STDC_LIMIT_MACROS */
N
N#if !defined(__cplusplus) || defined(__STDC_CONSTANT_MACROS)
X#if !0L || 0L
N
N    /* 7.18.4.1 macros for minimum-width integer constants */
N#define INT8_C(x)   (x)
N#define INT16_C(x)  (x)
N#define INT32_C(x)  (x)
N#define INT64_C(x)  __INT64_C(x)
N
N#define UINT8_C(x)  (x ## u)
N#define UINT16_C(x) (x ## u)
N#define UINT32_C(x) (x ## u)
N#define UINT64_C(x) __UINT64_C(x)
N
N    /* 7.18.4.2 macros for greatest-width integer constants */
N#define INTMAX_C(x)  __ESCAPE__(x ## ll)
N#define UINTMAX_C(x) __ESCAPE__(x ## ull)
N
N#endif /* __STDC_CONSTANT_MACROS */
N
N    #ifdef __cplusplus
S         }  /* extern "C" */
S      }  /* namespace std */
N    #endif /* __cplusplus */
N  #endif /* __STDINT_DECLS */
N
N  #ifdef __cplusplus
S    #ifndef __STDINT_NO_EXPORTS
S      using ::std::int8_t;
S      using ::std::int16_t;
S      using ::std::int32_t;
S      using ::std::int64_t;
S      using ::std::uint8_t;
S      using ::std::uint16_t;
S      using ::std::uint32_t;
S      using ::std::uint64_t;
S      using ::std::int_least8_t;
S      using ::std::int_least16_t;
S      using ::std::int_least32_t;
S      using ::std::int_least64_t;
S      using ::std::uint_least8_t;
S      using ::std::uint_least16_t;
S      using ::std::uint_least32_t;
S      using ::std::uint_least64_t;
S      using ::std::int_fast8_t;
S      using ::std::int_fast16_t;
S      using ::std::int_fast32_t;
S      using ::std::int_fast64_t;
S      using ::std::uint_fast8_t;
S      using ::std::uint_fast16_t;
S      using ::std::uint_fast32_t;
S      using ::std::uint_fast64_t;
S      using ::std::intptr_t;
S      using ::std::uintptr_t;
S      using ::std::intmax_t;
S      using ::std::uintmax_t;
S    #endif
N  #endif /* __cplusplus */
N
N#undef __INT64
N#undef __LONGLONG
N
N#endif /* __stdint_h */
N
N/* end of stdint.h */
L 20 "D:\Keil_v5\ARM\RV31\INC\rl_usb.h" 2
N#include <..\..\RL\USB\INC\usb.h>
L 1 "D:\Keil_v5\ARM\ARMCC\Bin\..\include\..\..\RL\USB\INC\usb.h" 1
N/*------------------------------------------------------------------------------
N *      RL-ARM - USB
N *------------------------------------------------------------------------------
N *      Name:    usb.h
N *      Purpose: Main USB header file
N *      Rev.:    V4.70
N *------------------------------------------------------------------------------
N *      This code is part of the RealView Run-Time Library.
N *      Copyright (c) 2004-2013 KEIL - An ARM Company. All rights reserved.
N *----------------------------------------------------------------------------*/
N
N#ifndef __USB_H__
N#define __USB_H__
N
N/* General USB header files                                                   */
N#include "usb_def.h"
L 1 "D:\Keil_v5\ARM\ARMCC\Bin\..\include\..\..\RL\USB\INC\usb_def.h" 1
N/*------------------------------------------------------------------------------
N *      RL-ARM - USB
N *------------------------------------------------------------------------------
N *      Name:    usb_def.h
N *      Purpose: USB Definitions
N *      Rev.:    V4.74
N *------------------------------------------------------------------------------
N *      This code is part of the RealView Run-Time Library.
N *      Copyright (c) 2004-2013 KEIL - An ARM Company. All rights reserved.
N *----------------------------------------------------------------------------*/
N
N#ifndef __USB_DEF_H__
N#define __USB_DEF_H__
N
N#pragma anon_unions
N
N
N/* bmRequestType.Dir */
N#define REQUEST_HOST_TO_DEVICE     0
N#define REQUEST_DEVICE_TO_HOST     1
N
N/* bmRequestType.Type */
N#define REQUEST_STANDARD           0
N#define REQUEST_CLASS              1
N#define REQUEST_VENDOR             2
N#define REQUEST_RESERVED           3
N
N/* bmRequestType.Recipient */
N#define REQUEST_TO_DEVICE          0
N#define REQUEST_TO_INTERFACE       1
N#define REQUEST_TO_ENDPOINT        2
N#define REQUEST_TO_OTHER           3
N
N/* bmRequestType Definition */
Ntypedef __packed struct _REQUEST_TYPE {
N  U8 Recipient : 5;                     /* D4..0: Recipient */
N  U8 Type      : 2;                     /* D6..5: Type */
N  U8 Dir       : 1;                     /* D7:    Data Phase Txsfer Direction */
N} REQUEST_TYPE;
N
N/* USB Standard Request Codes */
N#define USB_REQUEST_GET_STATUS                 0
N#define USB_REQUEST_CLEAR_FEATURE              1
N#define USB_REQUEST_SET_FEATURE                3
N#define USB_REQUEST_SET_ADDRESS                5
N#define USB_REQUEST_GET_DESCRIPTOR             6
N#define USB_REQUEST_SET_DESCRIPTOR             7
N#define USB_REQUEST_GET_CONFIGURATION          8
N#define USB_REQUEST_SET_CONFIGURATION          9
N#define USB_REQUEST_GET_INTERFACE              10
N#define USB_REQUEST_SET_INTERFACE              11
N#define USB_REQUEST_SYNC_FRAME                 12
N
N/* USB GET_STATUS Bit Values */
N#define USB_GETSTATUS_SELF_POWERED             0x01
N#define USB_GETSTATUS_REMOTE_WAKEUP            0x02
N#define USB_GETSTATUS_ENDPOINT_STALL           0x01
N
N/* USB Standard Feature selectors */
N#define USB_FEATURE_ENDPOINT_STALL             0
N#define USB_FEATURE_REMOTE_WAKEUP              1
N
N/* USB Default Control Pipe Setup Packet */
Ntypedef __packed struct _USB_SETUP_PACKET {
N  REQUEST_TYPE bmRequestType;           /* bmRequestType */
N  U8  bRequest;                         /* bRequest */
N  __packed union {
N    U16        wValue;                  /* wValue */
N    __packed struct {
N      U8         wValueL;
N      U8         wValueH;
N    };
N  };
N  __packed union {
N    U16        wIndex;                  /* wIndex */
N    __packed struct {
N      U8         wIndexL;
N      U8         wIndexH;
N    };
N  };
N  U16          wLength;                 /* wLength */
N} USB_SETUP_PACKET;
N
N
N/* USB Descriptor Types */
N#define USB_DEVICE_DESCRIPTOR_TYPE                  1
N#define USB_CONFIGURATION_DESCRIPTOR_TYPE           2
N#define USB_STRING_DESCRIPTOR_TYPE                  3
N#define USB_INTERFACE_DESCRIPTOR_TYPE               4
N#define USB_ENDPOINT_DESCRIPTOR_TYPE                5
N#define USB_DEVICE_QUALIFIER_DESCRIPTOR_TYPE        6
N#define USB_OTHER_SPEED_CONFIG_DESCRIPTOR_TYPE      7
N#define USB_INTERFACE_POWER_DESCRIPTOR_TYPE         8
N#define USB_OTG_DESCRIPTOR_TYPE                     9
N#define USB_DEBUG_DESCRIPTOR_TYPE                  10
N#define USB_INTERFACE_ASSOCIATION_DESCRIPTOR_TYPE  11
N
N/* USB Device Classes */
N#define USB_DEVICE_CLASS_RESERVED              0x00
N#define USB_DEVICE_CLASS_AUDIO                 0x01
N#define USB_DEVICE_CLASS_COMMUNICATIONS        0x02
N#define USB_DEVICE_CLASS_HUMAN_INTERFACE       0x03
N#define USB_DEVICE_CLASS_MONITOR               0x04
N#define USB_DEVICE_CLASS_PHYSICAL_INTERFACE    0x05
N#define USB_DEVICE_CLASS_POWER                 0x06
N#define USB_DEVICE_CLASS_PRINTER               0x07
N#define USB_DEVICE_CLASS_STORAGE               0x08
N#define USB_DEVICE_CLASS_HUB                   0x09
N#define USB_DEVICE_CLASS_MISCELLANEOUS         0xEF
N#define USB_DEVICE_CLASS_VENDOR_SPECIFIC       0xFF
N
N/* bmAttributes in Configuration Descriptor */
N#define USB_CONFIG_POWERED_MASK                0x40
N#define USB_CONFIG_BUS_POWERED                 0x80
N#define USB_CONFIG_SELF_POWERED                0xC0
N#define USB_CONFIG_REMOTE_WAKEUP               0x20
N
N/* bMaxPower in Configuration Descriptor */
N#define USB_CONFIG_POWER_MA(mA)                ((mA)/2)
N
N/* bEndpointAddress in Endpoint Descriptor */
N#define USB_ENDPOINT_DIRECTION_MASK            0x80
N#define USB_ENDPOINT_OUT(addr)                 ((addr) | 0x00)
N#define USB_ENDPOINT_IN(addr)                  ((addr) | 0x80)
N
N/* bmAttributes in Endpoint Descriptor */
N#define USB_ENDPOINT_TYPE_MASK                 0x03
N#define USB_ENDPOINT_TYPE_CONTROL              0x00
N#define USB_ENDPOINT_TYPE_ISOCHRONOUS          0x01
N#define USB_ENDPOINT_TYPE_BULK                 0x02
N#define USB_ENDPOINT_TYPE_INTERRUPT            0x03
N#define USB_ENDPOINT_SYNC_MASK                 0x0C
N#define USB_ENDPOINT_SYNC_NO_SYNCHRONIZATION   0x00
N#define USB_ENDPOINT_SYNC_ASYNCHRONOUS         0x04
N#define USB_ENDPOINT_SYNC_ADAPTIVE             0x08
N#define USB_ENDPOINT_SYNC_SYNCHRONOUS          0x0C
N#define USB_ENDPOINT_USAGE_MASK                0x30
N#define USB_ENDPOINT_USAGE_DATA                0x00
N#define USB_ENDPOINT_USAGE_FEEDBACK            0x10
N#define USB_ENDPOINT_USAGE_IMPLICIT_FEEDBACK   0x20
N#define USB_ENDPOINT_USAGE_RESERVED            0x30
N
N/* USB Standard Device Descriptor */
Ntypedef __packed struct _USB_DEVICE_DESCRIPTOR {
N  U8  bLength;
N  U8  bDescriptorType;
N  U16 bcdUSB;
N  U8  bDeviceClass;
N  U8  bDeviceSubClass;
N  U8  bDeviceProtocol;
N  U8  bMaxPacketSize0;
N  U16 idVendor;
N  U16 idProduct;
N  U16 bcdDevice;
N  U8  iManufacturer;
N  U8  iProduct;
N  U8  iSerialNumber;
N  U8  bNumConfigurations;
N} USB_DEVICE_DESCRIPTOR;
N
N/* USB 2.0 Device Qualifier Descriptor */
Ntypedef __packed struct _USB_DEVICE_QUALIFIER_DESCRIPTOR {
N  U8  bLength;
N  U8  bDescriptorType;
N  U16 bcdUSB;
N  U8  bDeviceClass;
N  U8  bDeviceSubClass;
N  U8  bDeviceProtocol;
N  U8  bMaxPacketSize0;
N  U8  bNumConfigurations;
N  U8  bReserved;
N} USB_DEVICE_QUALIFIER_DESCRIPTOR;
N
N/* USB Standard Configuration Descriptor */
Ntypedef __packed struct _USB_CONFIGURATION_DESCRIPTOR {
N  U8  bLength;
N  U8  bDescriptorType;
N  U16 wTotalLength;
N  U8  bNumInterfaces;
N  U8  bConfigurationValue;
N  U8  iConfiguration;
N  U8  bmAttributes;
N  U8  bMaxPower;
N} USB_CONFIGURATION_DESCRIPTOR;
N
N/* USB Standard Interface Descriptor */
Ntypedef __packed struct _USB_INTERFACE_DESCRIPTOR {
N  U8  bLength;
N  U8  bDescriptorType;
N  U8  bInterfaceNumber;
N  U8  bAlternateSetting;
N  U8  bNumEndpoints;
N  U8  bInterfaceClass;
N  U8  bInterfaceSubClass;
N  U8  bInterfaceProtocol;
N  U8  iInterface;
N} USB_INTERFACE_DESCRIPTOR;
N
N/* USB Standard Endpoint Descriptor */
Ntypedef __packed struct _USB_ENDPOINT_DESCRIPTOR {
N  U8  bLength;
N  U8  bDescriptorType;
N  U8  bEndpointAddress;
N  U8  bmAttributes;
N  U16 wMaxPacketSize;
N  U8  bInterval;
N} USB_ENDPOINT_DESCRIPTOR;
N
N/* USB String Descriptor */
Ntypedef __packed struct _USB_STRING_DESCRIPTOR {
N  U8  bLength;
N  U8  bDescriptorType;
N  U16 bString/*[]*/;
N} USB_STRING_DESCRIPTOR;
N
N/* USB Common Descriptor */
Ntypedef __packed struct _USB_COMMON_DESCRIPTOR {
N  U8  bLength;
N  U8  bDescriptorType;
N} USB_COMMON_DESCRIPTOR;
N
N/* USB Interface Association Descriptor */
Ntypedef __packed struct _USB_INTERFACE_ASSOCIATION_DESCRIPTOR {
N  U8  bLength;
N  U8  bDescriptorType;
N  U8  bFirstInterface;
N  U8  bInterfaceCount;
N  U8  bFunctionClass;
N  U8  bFunctionSubclass;
N  U8  bFunctionProtocol;
N  U8  iFunction;
N} USB_INTERFACE_ASSOCIATION_DESCRIPTOR;
N
N
N#endif  /* __USB_DEF_H__ */
L 17 "D:\Keil_v5\ARM\ARMCC\Bin\..\include\..\..\RL\USB\INC\usb.h" 2
N#include "usb_adc.h"
L 1 "D:\Keil_v5\ARM\ARMCC\Bin\..\include\..\..\RL\USB\INC\usb_adc.h" 1
N/*------------------------------------------------------------------------------
N *      RL-ARM - USB
N *------------------------------------------------------------------------------
N *      Name:    usb_adc.h
N *      Purpose: USB Audio Device Class Definitions
N *      Rev.:    V4.70
N *------------------------------------------------------------------------------
N *      This code is part of the RealView Run-Time Library.
N *      Copyright (c) 2004-2013 KEIL - An ARM Company. All rights reserved.
N *----------------------------------------------------------------------------*/
N
N#ifndef __USB_ADC_H__
N#define __USB_ADC_H__
N
N
N/* Audio Interface Subclass Codes */
N#define AUDIO_SUBCLASS_UNDEFINED                0x00
N#define AUDIO_SUBCLASS_AUDIOCONTROL             0x01
N#define AUDIO_SUBCLASS_AUDIOSTREAMING           0x02
N#define AUDIO_SUBCLASS_MIDISTREAMING            0x03
N
N/* Audio Interface Protocol Codes */
N#define AUDIO_PROTOCOL_UNDEFINED                0x00
N
N
N/* Audio Descriptor Types */
N#define AUDIO_UNDEFINED_DESCRIPTOR_TYPE         0x20
N#define AUDIO_DEVICE_DESCRIPTOR_TYPE            0x21
N#define AUDIO_CONFIGURATION_DESCRIPTOR_TYPE     0x22
N#define AUDIO_STRING_DESCRIPTOR_TYPE            0x23
N#define AUDIO_INTERFACE_DESCRIPTOR_TYPE         0x24
N#define AUDIO_ENDPOINT_DESCRIPTOR_TYPE          0x25
N
N
N/* Audio Control Interface Descriptor Subtypes */
N#define AUDIO_CONTROL_UNDEFINED                 0x00
N#define AUDIO_CONTROL_HEADER                    0x01
N#define AUDIO_CONTROL_INPUT_TERMINAL            0x02
N#define AUDIO_CONTROL_OUTPUT_TERMINAL           0x03
N#define AUDIO_CONTROL_MIXER_UNIT                0x04
N#define AUDIO_CONTROL_SELECTOR_UNIT             0x05
N#define AUDIO_CONTROL_FEATURE_UNIT              0x06
N#define AUDIO_CONTROL_PROCESSING_UNIT           0x07
N#define AUDIO_CONTROL_EXTENSION_UNIT            0x08
N
N/* Audio Streaming Interface Descriptor Subtypes */
N#define AUDIO_STREAMING_UNDEFINED               0x00
N#define AUDIO_STREAMING_GENERAL                 0x01
N#define AUDIO_STREAMING_FORMAT_TYPE             0x02
N#define AUDIO_STREAMING_FORMAT_SPECIFIC         0x03
N
N/* Audio Endpoint Descriptor Subtypes */
N#define AUDIO_ENDPOINT_UNDEFINED                0x00
N#define AUDIO_ENDPOINT_GENERAL                  0x01
N
N
N/* Audio Descriptor Sizes */
N#define AUDIO_CONTROL_INTERFACE_DESC_SZ(n)      0x08+n
N#define AUDIO_STREAMING_INTERFACE_DESC_SIZE     0x07
N#define AUDIO_INPUT_TERMINAL_DESC_SIZE          0x0C
N#define AUDIO_OUTPUT_TERMINAL_DESC_SIZE         0x09
N#define AUDIO_MIXER_UNIT_DESC_SZ(p,n)           0x0A+p+n
N#define AUDIO_SELECTOR_UNIT_DESC_SZ(p)          0x06+p
N#define AUDIO_FEATURE_UNIT_DESC_SZ(ch,n)        0x07+(ch+1)*n
N#define AUDIO_PROCESSING_UNIT_DESC_SZ(p,n,x)    0x0D+p+n+x
N#define AUDIO_EXTENSION_UNIT_DESC_SZ(p,n)       0x0D+p+n
N#define AUDIO_STANDARD_ENDPOINT_DESC_SIZE       0x09
N#define AUDIO_STREAMING_ENDPOINT_DESC_SIZE      0x07
N
N
N/* Audio Processing Unit Process Types */
N#define AUDIO_UNDEFINED_PROCESS                 0x00
N#define AUDIO_UP_DOWN_MIX_PROCESS               0x01
N#define AUDIO_DOLBY_PROLOGIC_PROCESS            0x02
N#define AUDIO_3D_STEREO_PROCESS                 0x03
N#define AUDIO_REVERBERATION_PROCESS             0x04
N#define AUDIO_CHORUS_PROCESS                    0x05
N#define AUDIO_DYN_RANGE_COMP_PROCESS            0x06
N
N
N/* Audio Request Codes */
N#define AUDIO_REQUEST_UNDEFINED                 0x00
N#define AUDIO_REQUEST_SET_CUR                   0x01
N#define AUDIO_REQUEST_GET_CUR                   0x81
N#define AUDIO_REQUEST_SET_MIN                   0x02
N#define AUDIO_REQUEST_GET_MIN                   0x82
N#define AUDIO_REQUEST_SET_MAX                   0x03
N#define AUDIO_REQUEST_GET_MAX                   0x83
N#define AUDIO_REQUEST_SET_RES                   0x04
N#define AUDIO_REQUEST_GET_RES                   0x84
N#define AUDIO_REQUEST_SET_MEM                   0x05
N#define AUDIO_REQUEST_GET_MEM                   0x85
N#define AUDIO_REQUEST_GET_STAT                  0xFF
N
N
N/* Audio Control Selector Codes */
N#define AUDIO_CONTROL_UNDEFINED                 0x00    /* Common Selector */
N
N/*  Terminal Control Selectors */
N#define AUDIO_COPY_PROTECT_CONTROL              0x01
N
N/*  Feature Unit Control Selectors */
N#define AUDIO_MUTE_CONTROL                      0x01
N#define AUDIO_VOLUME_CONTROL                    0x02
N#define AUDIO_BASS_CONTROL                      0x03
N#define AUDIO_MID_CONTROL                       0x04
N#define AUDIO_TREBLE_CONTROL                    0x05
N#define AUDIO_GRAPHIC_EQUALIZER_CONTROL         0x06
N#define AUDIO_AUTOMATIC_GAIN_CONTROL            0x07
N#define AUDIO_DELAY_CONTROL                     0x08
N#define AUDIO_BASS_BOOST_CONTROL                0x09
N#define AUDIO_LOUDNESS_CONTROL                  0x0A
N
N/*  Processing Unit Control Selectors: */
N#define AUDIO_ENABLE_CONTROL                    0x01    /* Common Selector */
N#define AUDIO_MODE_SELECT_CONTROL               0x02    /* Common Selector */
N
N/*  - Up/Down-mix Control Selectors */
N/*      AUDIO_ENABLE_CONTROL                    0x01       Common Selector */
N/*      AUDIO_MODE_SELECT_CONTROL               0x02       Common Selector */
N
N/*  - Dolby Prologic Control Selectors */
N/*      AUDIO_ENABLE_CONTROL                    0x01       Common Selector */
N/*      AUDIO_MODE_SELECT_CONTROL               0x02       Common Selector */
N
N/*  - 3D Stereo Extender Control Selectors */
N/*      AUDIO_ENABLE_CONTROL                    0x01       Common Selector */
N#define AUDIO_SPACIOUSNESS_CONTROL              0x02
N
N/*  - Reverberation Control Selectors */
N/*      AUDIO_ENABLE_CONTROL                    0x01       Common Selector */
N#define AUDIO_REVERB_LEVEL_CONTROL              0x02
N#define AUDIO_REVERB_TIME_CONTROL               0x03
N#define AUDIO_REVERB_FEEDBACK_CONTROL           0x04
N
N/*  - Chorus Control Selectors */
N/*      AUDIO_ENABLE_CONTROL                    0x01       Common Selector */
N#define AUDIO_CHORUS_LEVEL_CONTROL              0x02
N#define AUDIO_SHORUS_RATE_CONTROL               0x03
N#define AUDIO_CHORUS_DEPTH_CONTROL              0x04
N
N/*  - Dynamic Range Compressor Control Selectors */
N/*      AUDIO_ENABLE_CONTROL                    0x01       Common Selector */
N#define AUDIO_COMPRESSION_RATE_CONTROL          0x02
N#define AUDIO_MAX_AMPL_CONTROL                  0x03
N#define AUDIO_THRESHOLD_CONTROL                 0x04
N#define AUDIO_ATTACK_TIME_CONTROL               0x05
N#define AUDIO_RELEASE_TIME_CONTROL              0x06
N
N/*  Extension Unit Control Selectors */
N/*      AUDIO_ENABLE_CONTROL                    0x01       Common Selector */
N
N/*  Endpoint Control Selectors */
N#define AUDIO_SAMPLING_FREQ_CONTROL             0x01
N#define AUDIO_PITCH_CONTROL                     0x02
N
N
N/* Audio Format Specific Control Selectors */
N
N/*  MPEG Control Selectors */
N#define AUDIO_MPEG_CONTROL_UNDEFINED            0x00
N#define AUDIO_MPEG_DUAL_CHANNEL_CONTROL         0x01
N#define AUDIO_MPEG_SECOND_STEREO_CONTROL        0x02
N#define AUDIO_MPEG_MULTILINGUAL_CONTROL         0x03
N#define AUDIO_MPEG_DYN_RANGE_CONTROL            0x04
N#define AUDIO_MPEG_SCALING_CONTROL              0x05
N#define AUDIO_MPEG_HILO_SCALING_CONTROL         0x06
N
N/*  AC-3 Control Selectors */
N#define AUDIO_AC3_CONTROL_UNDEFINED             0x00
N#define AUDIO_AC3_MODE_CONTROL                  0x01
N#define AUDIO_AC3_DYN_RANGE_CONTROL             0x02
N#define AUDIO_AC3_SCALING_CONTROL               0x03
N#define AUDIO_AC3_HILO_SCALING_CONTROL          0x04
N
N
N/* Audio Format Types */
N#define AUDIO_FORMAT_TYPE_UNDEFINED             0x00
N#define AUDIO_FORMAT_TYPE_I                     0x01
N#define AUDIO_FORMAT_TYPE_II                    0x02
N#define AUDIO_FORMAT_TYPE_III                   0x03
N
N
N/* Audio Format Type Descriptor Sizes */
N#define AUDIO_FORMAT_TYPE_I_DESC_SZ(n)          0x08+(n*3)
N#define AUDIO_FORMAT_TYPE_II_DESC_SZ(n)         0x09+(n*3)
N#define AUDIO_FORMAT_TYPE_III_DESC_SZ(n)        0x08+(n*3)
N#define AUDIO_FORMAT_MPEG_DESC_SIZE             0x09
N#define AUDIO_FORMAT_AC3_DESC_SIZE              0x0A
N
N
N/* Audio Data Format Codes */
N
N/*  Audio Data Format Type I Codes */
N#define AUDIO_FORMAT_TYPE_I_UNDEFINED           0x0000
N#define AUDIO_FORMAT_PCM                        0x0001
N#define AUDIO_FORMAT_PCM8                       0x0002
N#define AUDIO_FORMAT_IEEE_FLOAT                 0x0003
N#define AUDIO_FORMAT_ALAW                       0x0004
N#define AUDIO_FORMAT_MULAW                      0x0005
N
N/*  Audio Data Format Type II Codes */
N#define AUDIO_FORMAT_TYPE_II_UNDEFINED          0x1000
N#define AUDIO_FORMAT_MPEG                       0x1001
N#define AUDIO_FORMAT_AC3                        0x1002
N
N/*  Audio Data Format Type III Codes */
N#define AUDIO_FORMAT_TYPE_III_UNDEFINED         0x2000
N#define AUDIO_FORMAT_IEC1937_AC3                0x2001
N#define AUDIO_FORMAT_IEC1937_MPEG1_L1           0x2002
N#define AUDIO_FORMAT_IEC1937_MPEG1_L2_3         0x2003
N#define AUDIO_FORMAT_IEC1937_MPEG2_NOEXT        0x2003
N#define AUDIO_FORMAT_IEC1937_MPEG2_EXT          0x2004
N#define AUDIO_FORMAT_IEC1937_MPEG2_L1_LS        0x2005
N#define AUDIO_FORMAT_IEC1937_MPEG2_L2_3         0x2006
N
N
N/* Predefined Audio Channel Configuration Bits */
N#define AUDIO_CHANNEL_M                         0x0000  /* Mono */
N#define AUDIO_CHANNEL_L                         0x0001  /* Left Front */
N#define AUDIO_CHANNEL_R                         0x0002  /* Right Front */
N#define AUDIO_CHANNEL_C                         0x0004  /* Center Front */
N#define AUDIO_CHANNEL_LFE                       0x0008  /* Low Freq. Enhance. */
N#define AUDIO_CHANNEL_LS                        0x0010  /* Left Surround */
N#define AUDIO_CHANNEL_RS                        0x0020  /* Right Surround */
N#define AUDIO_CHANNEL_LC                        0x0040  /* Left of Center */
N#define AUDIO_CHANNEL_RC                        0x0080  /* Right of Center */
N#define AUDIO_CHANNEL_S                         0x0100  /* Surround */
N#define AUDIO_CHANNEL_SL                        0x0200  /* Side Left */
N#define AUDIO_CHANNEL_SR                        0x0400  /* Side Right */
N#define AUDIO_CHANNEL_T                         0x0800  /* Top */
N
N
N/* Feature Unit Control Bits */
N#define AUDIO_CONTROL_MUTE                      0x0001
N#define AUDIO_CONTROL_VOLUME                    0x0002
N#define AUDIO_CONTROL_BASS                      0x0004
N#define AUDIO_CONTROL_MID                       0x0008
N#define AUDIO_CONTROL_TREBLE                    0x0010
N#define AUDIO_CONTROL_GRAPHIC_EQUALIZER         0x0020
N#define AUDIO_CONTROL_AUTOMATIC_GAIN            0x0040
N#define AUDIO_CONTROL_DEALY                     0x0080
N#define AUDIO_CONTROL_BASS_BOOST                0x0100
N#define AUDIO_CONTROL_LOUDNESS                  0x0200
N
N/* Processing Unit Control Bits: */
N#define AUDIO_CONTROL_ENABLE                    0x0001  /* Common Bit */
N#define AUDIO_CONTROL_MODE_SELECT               0x0002  /* Common Bit */
N
N/* - Up/Down-mix Control Bits */
N/*      AUDIO_CONTROL_ENABLE                    0x0001     Common Bit */
N/*      AUDIO_CONTROL_MODE_SELECT               0x0002     Common Bit */
N
N/* - Dolby Prologic Control Bits */
N/*      AUDIO_CONTROL_ENABLE                    0x0001     Common Bit */
N/*      AUDIO_CONTROL_MODE_SELECT               0x0002     Common Bit */
N
N/* - 3D Stereo Extender Control Bits */
N/*      AUDIO_CONTROL_ENABLE                    0x0001     Common Bit */
N#define AUDIO_CONTROL_SPACIOUSNESS              0x0002
N
N/* - Reverberation Control Bits */
N/*      AUDIO_CONTROL_ENABLE                    0x0001     Common Bit */
N#define AUDIO_CONTROL_REVERB_TYPE               0x0002
N#define AUDIO_CONTROL_REVERB_LEVEL              0x0004
N#define AUDIO_CONTROL_REVERB_TIME               0x0008
N#define AUDIO_CONTROL_REVERB_FEEDBACK           0x0010
N
N/* - Chorus Control Bits */
N/*      AUDIO_CONTROL_ENABLE                    0x0001     Common Bit */
N#define AUDIO_CONTROL_CHORUS_LEVEL              0x0002
N#define AUDIO_CONTROL_SHORUS_RATE               0x0004
N#define AUDIO_CONTROL_CHORUS_DEPTH              0x0008
N
N/* - Dynamic Range Compressor Control Bits */
N/*      AUDIO_CONTROL_ENABLE                    0x0001     Common Bit */
N#define AUDIO_CONTROL_COMPRESSION_RATE          0x0002
N#define AUDIO_CONTROL_MAX_AMPL                  0x0004
N#define AUDIO_CONTROL_THRESHOLD                 0x0008
N#define AUDIO_CONTROL_ATTACK_TIME               0x0010
N#define AUDIO_CONTROL_RELEASE_TIME              0x0020
N
N/* Extension Unit Control Bits */
N/*      AUDIO_CONTROL_ENABLE                    0x0001     Common Bit */
N
N/* Endpoint Control Bits */
N#define AUDIO_CONTROL_SAMPLING_FREQ             0x01
N#define AUDIO_CONTROL_PITCH                     0x02
N#define AUDIO_MAX_PACKETS_ONLY                  0x80
N
N
N/* Audio Terminal Types */
N
N/*  USB Terminal Types */
N#define AUDIO_TERMINAL_USB_UNDEFINED            0x0100
N#define AUDIO_TERMINAL_USB_STREAMING            0x0101
N#define AUDIO_TERMINAL_USB_VENDOR_SPECIFIC      0x01FF
N
N/*  Input Terminal Types */
N#define AUDIO_TERMINAL_INPUT_UNDEFINED          0x0200
N#define AUDIO_TERMINAL_MICROPHONE               0x0201
N#define AUDIO_TERMINAL_DESKTOP_MICROPHONE       0x0202
N#define AUDIO_TERMINAL_PERSONAL_MICROPHONE      0x0203
N#define AUDIO_TERMINAL_OMNI_DIR_MICROPHONE      0x0204
N#define AUDIO_TERMINAL_MICROPHONE_ARRAY         0x0205
N#define AUDIO_TERMINAL_PROCESSING_MIC_ARRAY     0x0206
N
N/*  Output Terminal Types */
N#define AUDIO_TERMINAL_OUTPUT_UNDEFINED         0x0300
N#define AUDIO_TERMINAL_SPEAKER                  0x0301
N#define AUDIO_TERMINAL_HEADPHONES               0x0302
N#define AUDIO_TERMINAL_HEAD_MOUNTED_AUDIO       0x0303
N#define AUDIO_TERMINAL_DESKTOP_SPEAKER          0x0304
N#define AUDIO_TERMINAL_ROOM_SPEAKER             0x0305
N#define AUDIO_TERMINAL_COMMUNICATION_SPEAKER    0x0306
N#define AUDIO_TERMINAL_LOW_FREQ_SPEAKER         0x0307
N
N/*  Bi-directional Terminal Types */
N#define AUDIO_TERMINAL_BIDIRECTIONAL_UNDEFINED  0x0400
N#define AUDIO_TERMINAL_HANDSET                  0x0401
N#define AUDIO_TERMINAL_HEAD_MOUNTED_HANDSET     0x0402
N#define AUDIO_TERMINAL_SPEAKERPHONE             0x0403
N#define AUDIO_TERMINAL_SPEAKERPHONE_ECHOSUPRESS 0x0404
N#define AUDIO_TERMINAL_SPEAKERPHONE_ECHOCANCEL  0x0405
N
N/*  Telephony Terminal Types */
N#define AUDIO_TERMINAL_TELEPHONY_UNDEFINED      0x0500
N#define AUDIO_TERMINAL_PHONE_LINE               0x0501
N#define AUDIO_TERMINAL_TELEPHONE                0x0502
N#define AUDIO_TERMINAL_DOWN_LINE_PHONE          0x0503
N
N/*  External Terminal Types */
N#define AUDIO_TERMINAL_EXTERNAL_UNDEFINED       0x0600
N#define AUDIO_TERMINAL_ANALOG_CONNECTOR         0x0601
N#define AUDIO_TERMINAL_DIGITAL_AUDIO_INTERFACE  0x0602
N#define AUDIO_TERMINAL_LINE_CONNECTOR           0x0603
N#define AUDIO_TERMINAL_LEGACY_AUDIO_CONNECTOR   0x0604
N#define AUDIO_TERMINAL_SPDIF_INTERFACE          0x0605
N#define AUDIO_TERMINAL_1394_DA_STREAM           0x0606
N#define AUDIO_TERMINAL_1394_DA_STREAM_TRACK     0x0607
N
N/*  Embedded Function Terminal Types */
N#define AUDIO_TERMINAL_EMBEDDED_UNDEFINED       0x0700
N#define AUDIO_TERMINAL_CALIBRATION_NOISE        0x0701
N#define AUDIO_TERMINAL_EQUALIZATION_NOISE       0x0702
N#define AUDIO_TERMINAL_CD_PLAYER                0x0703
N#define AUDIO_TERMINAL_DAT                      0x0704
N#define AUDIO_TERMINAL_DCC                      0x0705
N#define AUDIO_TERMINAL_MINI_DISK                0x0706
N#define AUDIO_TERMINAL_ANALOG_TAPE              0x0707
N#define AUDIO_TERMINAL_PHONOGRAPH               0x0708
N#define AUDIO_TERMINAL_VCR_AUDIO                0x0709
N#define AUDIO_TERMINAL_VIDEO_DISC_AUDIO         0x070A
N#define AUDIO_TERMINAL_DVD_AUDIO                0x070B
N#define AUDIO_TERMINAL_TV_TUNER_AUDIO           0x070C
N#define AUDIO_TERMINAL_SATELLITE_RECEIVER_AUDIO 0x070D
N#define AUDIO_TERMINAL_CABLE_TUNER_AUDIO        0x070E
N#define AUDIO_TERMINAL_DSS_AUDIO                0x070F
N#define AUDIO_TERMINAL_RADIO_RECEIVER           0x0710
N#define AUDIO_TERMINAL_RADIO_TRANSMITTER        0x0711
N#define AUDIO_TERMINAL_MULTI_TRACK_RECORDER     0x0712
N#define AUDIO_TERMINAL_SYNTHESIZER              0x0713
N
N
N#endif  /* __USB_ADC_H__ */
L 18 "D:\Keil_v5\ARM\ARMCC\Bin\..\include\..\..\RL\USB\INC\usb.h" 2
N#include "usb_cdc.h"
L 1 "D:\Keil_v5\ARM\ARMCC\Bin\..\include\..\..\RL\USB\INC\usb_cdc.h" 1
N/*------------------------------------------------------------------------------
N *      RL-ARM - USB
N *------------------------------------------------------------------------------
N *      Name:    usb_cdc.h
N *      Purpose: USB Communication Device Class Definitions
N *      Rev.:    V4.70
N *------------------------------------------------------------------------------
N *      This code is part of the RealView Run-Time Library.
N *      Copyright (c) 2004-2013 KEIL - An ARM Company. All rights reserved.
N *----------------------------------------------------------------------------*/
N
N#ifndef __USB_CDC_H
N#define __USB_CDC_H
N
N/*------------------------------------------------------------------------------
N *      Definitions  based on usbcdc11.pdf (www.usb.org)
N *----------------------------------------------------------------------------*/
N/* Communication device class specification version 1.10 */
N#define CDC_V1_10                               0x0110
N
N/* Communication interface class code */
N/* (usbcdc11.pdf, 4.2, Table 15) */
N#define CDC_COMMUNICATION_INTERFACE_CLASS       0x02
N
N/* Communication interface class subclass codes */
N/* (usbcdc11.pdf, 4.3, Table 16) */
N#define CDC_DIRECT_LINE_CONTROL_MODEL           0x01
N#define CDC_ABSTRACT_CONTROL_MODEL              0x02
N#define CDC_TELEPHONE_CONTROL_MODEL             0x03
N#define CDC_MULTI_CHANNEL_CONTROL_MODEL         0x04
N#define CDC_CAPI_CONTROL_MODEL                  0x05
N#define CDC_ETHERNET_NETWORKING_CONTROL_MODEL   0x06
N#define CDC_ATM_NETWORKING_CONTROL_MODEL        0x07
N
N/* Communication interface class control protocol codes */
N/* (usbcdc11.pdf, 4.4, Table 17) */
N#define CDC_PROTOCOL_COMMON_AT_COMMANDS         0x01
N
N/* Data interface class code */
N/* (usbcdc11.pdf, 4.5, Table 18) */
N#define CDC_DATA_INTERFACE_CLASS                0x0A
N
N/* Data interface class protocol codes */
N/* (usbcdc11.pdf, 4.7, Table 19) */
N#define CDC_PROTOCOL_ISDN_BRI                   0x30
N#define CDC_PROTOCOL_HDLC                       0x31
N#define CDC_PROTOCOL_TRANSPARENT                0x32
N#define CDC_PROTOCOL_Q921_MANAGEMENT            0x50
N#define CDC_PROTOCOL_Q921_DATA_LINK             0x51
N#define CDC_PROTOCOL_Q921_MULTIPLEXOR           0x52
N#define CDC_PROTOCOL_V42                        0x90
N#define CDC_PROTOCOL_EURO_ISDN                  0x91
N#define CDC_PROTOCOL_V24_RATE_ADAPTATION        0x92
N#define CDC_PROTOCOL_CAPI                       0x93
N#define CDC_PROTOCOL_HOST_BASED_DRIVER          0xFD
N#define CDC_PROTOCOL_DESCRIBED_IN_PUFD          0xFE
N
N/* Type values for bDescriptorType field of functional descriptors */
N/* (usbcdc11.pdf, 5.2.3, Table 24) */
N#define CDC_CS_INTERFACE                        0x24
N#define CDC_CS_ENDPOINT                         0x25
N
N/* Type values for bDescriptorSubtype field of functional descriptors */
N/* (usbcdc11.pdf, 5.2.3, Table 25) */
N#define CDC_HEADER                              0x00
N#define CDC_CALL_MANAGEMENT                     0x01
N#define CDC_ABSTRACT_CONTROL_MANAGEMENT         0x02
N#define CDC_DIRECT_LINE_MANAGEMENT              0x03
N#define CDC_TELEPHONE_RINGER                    0x04
N#define CDC_REPORTING_CAPABILITIES              0x05
N#define CDC_UNION                               0x06
N#define CDC_COUNTRY_SELECTION                   0x07
N#define CDC_TELEPHONE_OPERATIONAL_MODES         0x08
N#define CDC_USB_TERMINAL                        0x09
N#define CDC_NETWORK_CHANNEL                     0x0A
N#define CDC_PROTOCOL_UNIT                       0x0B
N#define CDC_EXTENSION_UNIT                      0x0C
N#define CDC_MULTI_CHANNEL_MANAGEMENT            0x0D
N#define CDC_CAPI_CONTROL_MANAGEMENT             0x0E
N#define CDC_ETHERNET_NETWORKING                 0x0F
N#define CDC_ATM_NETWORKING                      0x10
N
N/* CDC class-specific request codes */
N/* (usbcdc11.pdf, 6.2, Table 46) */
N/* see Table 45 for info about the specific requests. */
N#define CDC_SEND_ENCAPSULATED_COMMAND           0x00
N#define CDC_GET_ENCAPSULATED_RESPONSE           0x01
N#define CDC_SET_COMM_FEATURE                    0x02
N#define CDC_GET_COMM_FEATURE                    0x03
N#define CDC_CLEAR_COMM_FEATURE                  0x04
N#define CDC_SET_AUX_LINE_STATE                  0x10
N#define CDC_SET_HOOK_STATE                      0x11
N#define CDC_PULSE_SETUP                         0x12
N#define CDC_SEND_PULSE                          0x13
N#define CDC_SET_PULSE_TIME                      0x14
N#define CDC_RING_AUX_JACK                       0x15
N#define CDC_SET_LINE_CODING                     0x20
N#define CDC_GET_LINE_CODING                     0x21
N#define CDC_SET_CONTROL_LINE_STATE              0x22
N#define CDC_SEND_BREAK                          0x23
N#define CDC_SET_RINGER_PARMS                    0x30
N#define CDC_GET_RINGER_PARMS                    0x31
N#define CDC_SET_OPERATION_PARMS                 0x32
N#define CDC_GET_OPERATION_PARMS                 0x33
N#define CDC_SET_LINE_PARMS                      0x34
N#define CDC_GET_LINE_PARMS                      0x35
N#define CDC_DIAL_DIGITS                         0x36
N#define CDC_SET_UNIT_PARAMETER                  0x37
N#define CDC_GET_UNIT_PARAMETER                  0x38
N#define CDC_CLEAR_UNIT_PARAMETER                0x39
N#define CDC_GET_PROFILE                         0x3A
N#define CDC_SET_ETHERNET_MULTICAST_FILTERS      0x40
N#define CDC_SET_ETHERNET_PMP_FILTER             0x41
N#define CDC_GET_ETHERNET_PMP_FILTER             0x42
N#define CDC_SET_ETHERNET_PACKET_FILTER          0x43
N#define CDC_GET_ETHERNET_STATISTIC              0x44
N#define CDC_SET_ATM_DATA_FORMAT                 0x50
N#define CDC_GET_ATM_DEVICE_STATISTICS           0x51
N#define CDC_SET_ATM_DEFAULT_VC                  0x52
N#define CDC_GET_ATM_VC_STATISTICS               0x53
N
N/* Communication feature selector codes */
N/* (usbcdc11.pdf, 6.2.2..6.2.4, Table 47) */
N#define CDC_ABSTRACT_STATE                      0x01
N#define CDC_COUNTRY_SETTING                     0x02
N
N/* Feature Status returned for ABSTRACT_STATE Selector */
N/* (usbcdc11.pdf, 6.2.3, Table 48) */
N#define CDC_IDLE_SETTING                        (1 << 0)
N#define CDC_DATA_MULTPLEXED_STATE               (1 << 1)
N
N
N/* Control signal bitmap values for the SetControlLineState request */
N/* (usbcdc11.pdf, 6.2.14, Table 51) */
N#define CDC_DTE_PRESENT                         (1 << 0)
N#define CDC_ACTIVATE_CARRIER                    (1 << 1)
N
N/* CDC class-specific notification codes */
N/* (usbcdc11.pdf, 6.3, Table 68) */
N/* see Table 67 for Info about class-specific notifications */
N#define CDC_NOTIFICATION_NETWORK_CONNECTION     0x00
N#define CDC_RESPONSE_AVAILABLE                  0x01
N#define CDC_AUX_JACK_HOOK_STATE                 0x08
N#define CDC_RING_DETECT                         0x09
N#define CDC_NOTIFICATION_SERIAL_STATE           0x20
N#define CDC_CALL_STATE_CHANGE                   0x28
N#define CDC_LINE_STATE_CHANGE                   0x29
N#define CDC_CONNECTION_SPEED_CHANGE             0x2A
N
N/* UART state bitmap values (Serial state notification). */
N/* (usbcdc11.pdf, 6.3.5, Table 69) */
N#define CDC_SERIAL_STATE_OVERRUN                (1 << 6)  /* receive data overrun error has occurred */
N#define CDC_SERIAL_STATE_OVERRUN_Pos            (     6)
N#define CDC_SERIAL_STATE_OVERRUN_Msk            (1 << CDC_SERIAL_STATE_OVERRUN_Pos)
N#define CDC_SERIAL_STATE_PARITY                 (1 << 5)  /* parity error has occurred */
N#define CDC_SERIAL_STATE_PARITY_Pos             (     5)
N#define CDC_SERIAL_STATE_PARITY_Msk             (1 << CDC_SERIAL_STATE_PARITY_Pos)
N#define CDC_SERIAL_STATE_FRAMING                (1 << 4)  /* framing error has occurred */
N#define CDC_SERIAL_STATE_FRAMING_Pos            (     4)
N#define CDC_SERIAL_STATE_FRAMING_Msk            (1 << CDC_SERIAL_STATE_FRAMING_Pos)
N#define CDC_SERIAL_STATE_RING                   (1 << 3)  /* state of ring signal detection */
N#define CDC_SERIAL_STATE_RING_Pos               (     3)
N#define CDC_SERIAL_STATE_RING_Msk               (1 << CDC_SERIAL_STATE_RING_Pos)
N#define CDC_SERIAL_STATE_BREAK                  (1 << 2)  /* state of break detection */
N#define CDC_SERIAL_STATE_BREAK_Pos              (     2)
N#define CDC_SERIAL_STATE_BREAK_Msk              (1 << CDC_SERIAL_STATE_BREAK_Pos)
N#define CDC_SERIAL_STATE_TX_CARRIER             (1 << 1)  /* state of transmission carrier */
N#define CDC_SERIAL_STATE_TX_CARRIER_Pos         (     1)
N#define CDC_SERIAL_STATE_TX_CARRIER_Msk         (1 << CDC_SERIAL_STATE_TX_CARRIER_Pos)
N#define CDC_SERIAL_STATE_RX_CARRIER             (1 << 0)  /* state of receiver carrier */
N#define CDC_SERIAL_STATE_RX_CARRIER_Pos         (     0)
N#define CDC_SERIAL_STATE_RX_CARRIER_Msk         (1 << CDC_SERIAL_STATE_RX_CARRIER_Pos)
N
N
N/*------------------------------------------------------------------------------
N *      Structures  based on usbcdc11.pdf (www.usb.org)
N *----------------------------------------------------------------------------*/
N
N/* Header functional descriptor */
N/* (usbcdc11.pdf, 5.2.3.1) */
N/* This header must precede any list of class-specific descriptors. */
Ntypedef __packed struct _CDC_HEADER_DESCRIPTOR{
N  U8  bFunctionLength;                      /* size of this descriptor in bytes */
N  U8  bDescriptorType;                      /* CS_INTERFACE descriptor type */
N  U8  bDescriptorSubtype;                   /* Header functional descriptor subtype */
N  U16 bcdCDC;                               /* USB CDC specification release version */
N} CDC_HEADER_DESCRIPTOR;
N
N/* Call management functional descriptor */
N/* (usbcdc11.pdf, 5.2.3.2) */
N/* Describes the processing of calls for the communication class interface. */
Ntypedef __packed struct _CDC_CALL_MANAGEMENT_DESCRIPTOR {
N  U8  bFunctionLength;                      /* size of this descriptor in bytes */
N  U8  bDescriptorType;                      /* CS_INTERFACE descriptor type */
N  U8  bDescriptorSubtype;                   /* call management functional descriptor subtype */
N  U8  bmCapabilities;                       /* capabilities that this configuration supports */
N  U8  bDataInterface;                       /* interface number of the data class interface used for call management (optional) */
N} CDC_CALL_MANAGEMENT_DESCRIPTOR;
N
N/* Abstract control management functional descriptor */
N/* (usbcdc11.pdf, 5.2.3.3) */
N/* Describes the command supported by the communication interface class with the Abstract Control Model subclass code. */
Ntypedef __packed struct _CDC_ABSTRACT_CONTROL_MANAGEMENT_DESCRIPTOR {
N  U8  bFunctionLength;                      /* size of this descriptor in bytes */
N  U8  bDescriptorType;                      /* CS_INTERFACE descriptor type */
N  U8  bDescriptorSubtype;                   /* abstract control management functional descriptor subtype */
N  U8  bmCapabilities;                       /* capabilities supported by this configuration */
N} CDC_ABSTRACT_CONTROL_MANAGEMENT_DESCRIPTOR;
N
N/* Union functional descriptors */
N/* (usbcdc11.pdf, 5.2.3.8) */
N/* Describes the relationship between a group of interfaces that can be considered to form a functional unit. */
Ntypedef __packed struct _CDC_UNION_DESCRIPTOR {
N  U8  bFunctionLength;                      /* size of this descriptor in bytes */
N  U8  bDescriptorType;                      /* CS_INTERFACE descriptor type */
N  U8  bDescriptorSubtype;                   /* union functional descriptor subtype */
N  U8  bMasterInterface;                     /* interface number designated as master */
N} CDC_UNION_DESCRIPTOR;
N
N/* Union functional descriptors with one slave interface */
N/* (usbcdc11.pdf, 5.2.3.8) */
Ntypedef __packed struct _CDC_UNION_1SLAVE_DESCRIPTOR {
N  CDC_UNION_DESCRIPTOR sUnion;              /* Union functional descriptor */
N  U8                   bSlaveInterfaces[1]; /* Slave interface 0 */
N} CDC_UNION_1SLAVE_DESCRIPTOR;
N
N/* Line coding structure */
N/* Format of the data returned when a GetLineCoding request is received */
N/* (usbcdc11.pdf, 6.2.13) */
Ntypedef __packed struct _CDC_LINE_CODING {
N  U32 dwDTERate;                            /* Data terminal rate in bits per second */
N  U8  bCharFormat;                          /* Number of stop bits */
N  U8  bParityType;                          /* Parity bit type */
N  U8  bDataBits;                            /* Number of data bits */
N} CDC_LINE_CODING;
N
N/* Notification header */
N/* Data sent on the notification endpoint must follow this header. */
N/* see  USB_SETUP_PACKET in file usb.h */
Ntypedef USB_SETUP_PACKET CDC_NOTIFICATION_HEADER;
N
N#endif /* __USB_CDC_H */
N
L 19 "D:\Keil_v5\ARM\ARMCC\Bin\..\include\..\..\RL\USB\INC\usb.h" 2
N#include "usb_hid.h"
L 1 "D:\Keil_v5\ARM\ARMCC\Bin\..\include\..\..\RL\USB\INC\usb_hid.h" 1
N/*------------------------------------------------------------------------------
N *      RL-ARM - USB
N *------------------------------------------------------------------------------
N *      Name:    usb_hid.h
N *      Purpose: USB Human Interface Device Class Definitions
N *      Rev.:    V4.70
N *------------------------------------------------------------------------------
N *      This code is part of the RealView Run-Time Library.
N *      Copyright (c) 2004-2013 KEIL - An ARM Company. All rights reserved.
N *----------------------------------------------------------------------------*/
N
N#ifndef __USB_HID_H__
N#define __USB_HID_H__
N
N
N/* HID Subclass Codes */
N#define HID_SUBCLASS_NONE               0x00
N#define HID_SUBCLASS_BOOT               0x01
N
N/* HID Protocol Codes */
N#define HID_PROTOCOL_NONE               0x00
N#define HID_PROTOCOL_BOOT               0x00
N#define HID_PROTOCOL_KEYBOARD           0x01
N#define HID_PROTOCOL_REPORT             0x01
N#define HID_PROTOCOL_MOUSE              0x02
N
N
N/* HID Descriptor Types */
N#define HID_HID_DESCRIPTOR_TYPE         0x21
N#define HID_REPORT_DESCRIPTOR_TYPE      0x22
N#define HID_PHYSICAL_DESCRIPTOR_TYPE    0x23
N
N
N/* HID Descriptor */
Ntypedef __packed struct _HID_DESCRIPTOR {
N  U8  bLength;
N  U8  bDescriptorType;
N  U16 bcdHID;
N  U8  bCountryCode;
N  U8  bNumDescriptors;
N  /* Array of one or more descriptors */
N  __packed struct _HID_DESCRIPTOR_LIST {
N    U8  bDescriptorType;
N    U16 wDescriptorLength;
N  } DescriptorList[1];
N} HID_DESCRIPTOR;
N
N
N/* HID Request Codes */
N#define HID_REQUEST_GET_REPORT          0x01
N#define HID_REQUEST_GET_IDLE            0x02
N#define HID_REQUEST_GET_PROTOCOL        0x03
N#define HID_REQUEST_SET_REPORT          0x09
N#define HID_REQUEST_SET_IDLE            0x0A
N#define HID_REQUEST_SET_PROTOCOL        0x0B
N
N/* HID Report Types */
N#define HID_REPORT_INPUT                0x01
N#define HID_REPORT_OUTPUT               0x02
N#define HID_REPORT_FEATURE              0x03
N
N
N/* Usage Pages */
N#define HID_USAGE_PAGE_UNDEFINED        0x00
N#define HID_USAGE_PAGE_GENERIC          0x01
N#define HID_USAGE_PAGE_SIMULATION       0x02
N#define HID_USAGE_PAGE_VR               0x03
N#define HID_USAGE_PAGE_SPORT            0x04
N#define HID_USAGE_PAGE_GAME             0x05
N#define HID_USAGE_PAGE_DEV_CONTROLS     0x06
N#define HID_USAGE_PAGE_KEYBOARD         0x07
N#define HID_USAGE_PAGE_LED              0x08
N#define HID_USAGE_PAGE_BUTTON           0x09
N#define HID_USAGE_PAGE_ORDINAL          0x0A
N#define HID_USAGE_PAGE_TELEPHONY        0x0B
N#define HID_USAGE_PAGE_CONSUMER         0x0C
N#define HID_USAGE_PAGE_DIGITIZER        0x0D
N#define HID_USAGE_PAGE_UNICODE          0x10
N#define HID_USAGE_PAGE_ALPHANUMERIC     0x14
N/* ... */
N
N
N/* Generic Desktop Page (0x01) */
N#define HID_USAGE_GENERIC_POINTER               0x01
N#define HID_USAGE_GENERIC_MOUSE                 0x02
N#define HID_USAGE_GENERIC_JOYSTICK              0x04
N#define HID_USAGE_GENERIC_GAMEPAD               0x05
N#define HID_USAGE_GENERIC_KEYBOARD              0x06
N#define HID_USAGE_GENERIC_KEYPAD                0x07
N#define HID_USAGE_GENERIC_X                     0x30
N#define HID_USAGE_GENERIC_Y                     0x31
N#define HID_USAGE_GENERIC_Z                     0x32
N#define HID_USAGE_GENERIC_RX                    0x33
N#define HID_USAGE_GENERIC_RY                    0x34
N#define HID_USAGE_GENERIC_RZ                    0x35
N#define HID_USAGE_GENERIC_SLIDER                0x36
N#define HID_USAGE_GENERIC_DIAL                  0x37
N#define HID_USAGE_GENERIC_WHEEL                 0x38
N#define HID_USAGE_GENERIC_HATSWITCH             0x39
N#define HID_USAGE_GENERIC_COUNTED_BUFFER        0x3A
N#define HID_USAGE_GENERIC_BYTE_COUNT            0x3B
N#define HID_USAGE_GENERIC_MOTION_WAKEUP         0x3C
N#define HID_USAGE_GENERIC_VX                    0x40
N#define HID_USAGE_GENERIC_VY                    0x41
N#define HID_USAGE_GENERIC_VZ                    0x42
N#define HID_USAGE_GENERIC_VBRX                  0x43
N#define HID_USAGE_GENERIC_VBRY                  0x44
N#define HID_USAGE_GENERIC_VBRZ                  0x45
N#define HID_USAGE_GENERIC_VNO                   0x46
N#define HID_USAGE_GENERIC_SYSTEM_CTL            0x80
N#define HID_USAGE_GENERIC_SYSCTL_POWER          0x81
N#define HID_USAGE_GENERIC_SYSCTL_SLEEP          0x82
N#define HID_USAGE_GENERIC_SYSCTL_WAKE           0x83
N#define HID_USAGE_GENERIC_SYSCTL_CONTEXT_MENU   0x84
N#define HID_USAGE_GENERIC_SYSCTL_MAIN_MENU      0x85
N#define HID_USAGE_GENERIC_SYSCTL_APP_MENU       0x86
N#define HID_USAGE_GENERIC_SYSCTL_HELP_MENU      0x87
N#define HID_USAGE_GENERIC_SYSCTL_MENU_EXIT      0x88
N#define HID_USAGE_GENERIC_SYSCTL_MENU_SELECT    0x89
N#define HID_USAGE_GENERIC_SYSCTL_MENU_RIGHT     0x8A
N#define HID_USAGE_GENERIC_SYSCTL_MENU_LEFT      0x8B
N#define HID_USAGE_GENERIC_SYSCTL_MENU_UP        0x8C
N#define HID_USAGE_GENERIC_SYSCTL_MENU_DOWN      0x8D
N/* ... */
N
N/* Simulation Controls Page (0x02) */
N/* ... */
N#define HID_USAGE_SIMULATION_RUDDER             0xBA
N#define HID_USAGE_SIMULATION_THROTTLE           0xBB
N/* ... */
N
N/* Virtual Reality Controls Page (0x03) */
N/* ... */
N
N/* Sport Controls Page (0x04) */
N/* ... */
N
N/* Game Controls Page (0x05) */
N/* ... */
N
N/* Generic Device Controls Page (0x06) */
N/* ... */
N
N/* Keyboard/Keypad Page (0x07) */
N
N/* Keyboard Usage Keys */
Nextern const unsigned char HID_KEYBOARD_ID_TO_ASCII[256];
Nextern const unsigned char HID_KEYBOARD_ALT_ID_TO_ASCII[57];
N
N/* Error "Keys" */
N#define HID_USAGE_KEYBOARD_NOEVENT              0x00
N#define HID_USAGE_KEYBOARD_ROLLOVER             0x01
N#define HID_USAGE_KEYBOARD_POSTFAIL             0x02
N#define HID_USAGE_KEYBOARD_UNDEFINED            0x03
N
N/* Letters */
N#define HID_USAGE_KEYBOARD_aA                   0x04
N#define HID_USAGE_KEYBOARD_zZ                   0x1D
N
N/* Numbers */
N#define HID_USAGE_KEYBOARD_ONE                  0x1E
N#define HID_USAGE_KEYBOARD_ZERO                 0x27
N
N#define HID_USAGE_KEYBOARD_RETURN               0x28
N#define HID_USAGE_KEYBOARD_ESCAPE               0x29
N#define HID_USAGE_KEYBOARD_DELETE               0x2A
N
N/* Funtion Keys */
N#define HID_USAGE_KEYBOARD_F1                   0x3A
N#define HID_USAGE_KEYBOARD_F12                  0x45
N
N#define HID_USAGE_KEYBOARD_PRINT_SCREEN         0x46
N
N/* Modifier Keys */
N#define HID_USAGE_KEYBOARD_LCTRL                0xE0
N#define HID_USAGE_KEYBOARD_LSHFT                0xE1
N#define HID_USAGE_KEYBOARD_LALT                 0xE2
N#define HID_USAGE_KEYBOARD_LGUI                 0xE3
N#define HID_USAGE_KEYBOARD_RCTRL                0xE4
N#define HID_USAGE_KEYBOARD_RSHFT                0xE5
N#define HID_USAGE_KEYBOARD_RALT                 0xE6
N#define HID_USAGE_KEYBOARD_RGUI                 0xE7
N#define HID_USAGE_KEYBOARD_SCROLL_LOCK          0x47
N#define HID_USAGE_KEYBOARD_NUM_LOCK             0x53
N#define HID_USAGE_KEYBOARD_CAPS_LOCK            0x39
N
N/* Modifier Keys (values) */
N#define HID_USAGE_KEYBOARD_MOD_LCTRL            0x01
N#define HID_USAGE_KEYBOARD_MOD_LSHIFT           0x02
N#define HID_USAGE_KEYBOARD_MOD_LALTL            0x04
N#define HID_USAGE_KEYBOARD_MOD_LGUI             0x08
N#define HID_USAGE_KEYBOARD_MOD_RCTRL            0x10
N#define HID_USAGE_KEYBOARD_MOD_RSHIFT           0x20
N#define HID_USAGE_KEYBOARD_MOD_RALTL            0x40
N#define HID_USAGE_KEYBOARD_MOD_RGUI             0x80
N
N/* ... */
N
N/* LED Page (0x08) */
N#define HID_USAGE_LED_NUM_LOCK                  0x01
N#define HID_USAGE_LED_CAPS_LOCK                 0x02
N#define HID_USAGE_LED_SCROLL_LOCK               0x03
N#define HID_USAGE_LED_COMPOSE                   0x04
N#define HID_USAGE_LED_KANA                      0x05
N#define HID_USAGE_LED_POWER                     0x06
N#define HID_USAGE_LED_SHIFT                     0x07
N#define HID_USAGE_LED_DO_NOT_DISTURB            0x08
N#define HID_USAGE_LED_MUTE                      0x09
N#define HID_USAGE_LED_TONE_ENABLE               0x0A
N#define HID_USAGE_LED_HIGH_CUT_FILTER           0x0B
N#define HID_USAGE_LED_LOW_CUT_FILTER            0x0C
N#define HID_USAGE_LED_EQUALIZER_ENABLE          0x0D
N#define HID_USAGE_LED_SOUND_FIELD_ON            0x0E
N#define HID_USAGE_LED_SURROUND_FIELD_ON         0x0F
N#define HID_USAGE_LED_REPEAT                    0x10
N#define HID_USAGE_LED_STEREO                    0x11
N#define HID_USAGE_LED_SAMPLING_RATE_DETECT      0x12
N#define HID_USAGE_LED_SPINNING                  0x13
N#define HID_USAGE_LED_CAV                       0x14
N#define HID_USAGE_LED_CLV                       0x15
N#define HID_USAGE_LED_RECORDING_FORMAT_DET      0x16
N#define HID_USAGE_LED_OFF_HOOK                  0x17
N#define HID_USAGE_LED_RING                      0x18
N#define HID_USAGE_LED_MESSAGE_WAITING           0x19
N#define HID_USAGE_LED_DATA_MODE                 0x1A
N#define HID_USAGE_LED_BATTERY_OPERATION         0x1B
N#define HID_USAGE_LED_BATTERY_OK                0x1C
N#define HID_USAGE_LED_BATTERY_LOW               0x1D
N#define HID_USAGE_LED_SPEAKER                   0x1E
N#define HID_USAGE_LED_HEAD_SET                  0x1F
N#define HID_USAGE_LED_HOLD                      0x20
N#define HID_USAGE_LED_MICROPHONE                0x21
N#define HID_USAGE_LED_COVERAGE                  0x22
N#define HID_USAGE_LED_NIGHT_MODE                0x23
N#define HID_USAGE_LED_SEND_CALLS                0x24
N#define HID_USAGE_LED_CALL_PICKUP               0x25
N#define HID_USAGE_LED_CONFERENCE                0x26
N#define HID_USAGE_LED_STAND_BY                  0x27
N#define HID_USAGE_LED_CAMERA_ON                 0x28
N#define HID_USAGE_LED_CAMERA_OFF                0x29
N#define HID_USAGE_LED_ON_LINE                   0x2A
N#define HID_USAGE_LED_OFF_LINE                  0x2B
N#define HID_USAGE_LED_BUSY                      0x2C
N#define HID_USAGE_LED_READY                     0x2D
N#define HID_USAGE_LED_PAPER_OUT                 0x2E
N#define HID_USAGE_LED_PAPER_JAM                 0x2F
N#define HID_USAGE_LED_REMOTE                    0x30
N#define HID_USAGE_LED_FORWARD                   0x31
N#define HID_USAGE_LED_REVERSE                   0x32
N#define HID_USAGE_LED_STOP                      0x33
N#define HID_USAGE_LED_REWIND                    0x34
N#define HID_USAGE_LED_FAST_FORWARD              0x35
N#define HID_USAGE_LED_PLAY                      0x36
N#define HID_USAGE_LED_PAUSE                     0x37
N#define HID_USAGE_LED_RECORD                    0x38
N#define HID_USAGE_LED_ERROR                     0x39
N#define HID_USAGE_LED_SELECTED_INDICATOR        0x3A
N#define HID_USAGE_LED_IN_USE_INDICATOR          0x3B
N#define HID_USAGE_LED_MULTI_MODE_INDICATOR      0x3C
N#define HID_USAGE_LED_INDICATOR_ON              0x3D
N#define HID_USAGE_LED_INDICATOR_FLASH           0x3E
N#define HID_USAGE_LED_INDICATOR_SLOW_BLINK      0x3F
N#define HID_USAGE_LED_INDICATOR_FAST_BLINK      0x40
N#define HID_USAGE_LED_INDICATOR_OFF             0x41
N#define HID_USAGE_LED_FLASH_ON_TIME             0x42
N#define HID_USAGE_LED_SLOW_BLINK_ON_TIME        0x43
N#define HID_USAGE_LED_SLOW_BLINK_OFF_TIME       0x44
N#define HID_USAGE_LED_FAST_BLINK_ON_TIME        0x45
N#define HID_USAGE_LED_FAST_BLINK_OFF_TIME       0x46
N#define HID_USAGE_LED_INDICATOR_COLOR           0x47
N#define HID_USAGE_LED_RED                       0x48
N#define HID_USAGE_LED_GREEN                     0x49
N#define HID_USAGE_LED_AMBER                     0x4A
N#define HID_USAGE_LED_GENERIC_INDICATOR         0x4B
N
N/* Button Page (0x09) */
N/*   There is no need to label these usages. */
N
N/* Ordinal Page (0x0A) */
N/*   There is no need to label these usages. */
N
N/* Telephony Device Page (0x0B) */
N#define HID_USAGE_TELEPHONY_PHONE               0x01
N#define HID_USAGE_TELEPHONY_ANSWERING_MACHINE   0x02
N#define HID_USAGE_TELEPHONY_MESSAGE_CONTROLS    0x03
N#define HID_USAGE_TELEPHONY_HANDSET             0x04
N#define HID_USAGE_TELEPHONY_HEADSET             0x05
N#define HID_USAGE_TELEPHONY_KEYPAD              0x06
N#define HID_USAGE_TELEPHONY_PROGRAMMABLE_BUTTON 0x07
N/* ... */
N
N/* Consumer Page (0x0C) */
N#define HID_USAGE_CONSUMER_CONTROL              0x01
N/* ... */
N
N/* and others ... */
N
N
N/* HID Report Item Macros */
N
N/* Main Items */
N#define HID_Input(x)           0x81,x
N#define HID_Output(x)          0x91,x
N#define HID_Feature(x)         0xB1,x
N#define HID_Collection(x)      0xA1,x
N#define HID_EndCollection      0xC0
N
N/* Data (Input, Output, Feature) */
N#define HID_Data               0<<0
N#define HID_Constant           1<<0
N#define HID_Array              0<<1
N#define HID_Variable           1<<1
N#define HID_Absolute           0<<2
N#define HID_Relative           1<<2
N#define HID_NoWrap             0<<3
N#define HID_Wrap               1<<3
N#define HID_Linear             0<<4
N#define HID_NonLinear          1<<4
N#define HID_PreferredState     0<<5
N#define HID_NoPreferred        1<<5
N#define HID_NoNullPosition     0<<6
N#define HID_NullState          1<<6
N#define HID_NonVolatile        0<<7
N#define HID_Volatile           1<<7
N
N/* Collection Data */
N#define HID_Physical           0x00
N#define HID_Application        0x01
N#define HID_Logical            0x02
N#define HID_Report             0x03
N#define HID_NamedArray         0x04
N#define HID_UsageSwitch        0x05
N#define HID_UsageModifier      0x06
N
N/* Global Items */
N#define HID_UsagePage(x)       0x05,x
N#define HID_UsagePageVendor(x) 0x06,x,0xFF
N#define HID_LogicalMin(x)      0x15,x
N#define HID_LogicalMinS(x)     0x16,(x&0xFF),((x>>8)&0xFF)
N#define HID_LogicalMinL(x)     0x17,(x&0xFF),((x>>8)&0xFF),((x>>16)&0xFF),((x>>24)&0xFF)
N#define HID_LogicalMax(x)      0x25,x
N#define HID_LogicalMaxS(x)     0x26,(x&0xFF),((x>>8)&0xFF)
N#define HID_LogicalMaxL(x)     0x27,(x&0xFF),((x>>8)&0xFF),((x>>16)&0xFF),((x>>24)&0xFF)
N#define HID_PhysicalMin(x)     0x35,x
N#define HID_PhysicalMinS(x)    0x36,(x&0xFF),((x>>8)&0xFF)
N#define HID_PhysicalMinL(x)    0x37,(x&0xFF),((x>>8)&0xFF),((x>>16)&0xFF),((x>>24)&0xFF)
N#define HID_PhysicalMax(x)     0x45,x
N#define HID_PhysicalMaxS(x)    0x46,(x&0xFF),((x>>8)&0xFF)
N#define HID_PhysicalMaxL(x)    0x47,(x&0xFF),((x>>8)&0xFF),((x>>16)&0xFF),((x>>24)&0xFF)
N#define HID_UnitExponent(x)    0x55,x
N#define HID_Unit(x)            0x65,x
N#define HID_UnitS(x)           0x66,(x&0xFF),((x>>8)&0xFF)
N#define HID_UnitL(x)           0x67,(x&0xFF),((x>>8)&0xFF),((x>>16)&0xFF),((x>>24)&0xFF)
N#define HID_ReportSize(x)      0x75,x
N#define HID_ReportSizeS(x)     0x76,(x&0xFF),((x>>8)&0xFF)
N#define HID_ReportSizeL(x)     0x77,(x&0xFF),((x>>8)&0xFF),((x>>16)&0xFF),((x>>24)&0xFF)
N#define HID_ReportID(x)        0x85,x
N#define HID_ReportCount(x)     0x95,x
N#define HID_ReportCountS(x)    0x96,(x&0xFF),((x>>8)&0xFF)
N#define HID_ReportCountL(x)    0x97,(x&0xFF),((x>>8)&0xFF),((x>>16)&0xFF),((x>>24)&0xFF)
N#define HID_Push               0xA4
N#define HID_Pop                0xB4
N
N/* Local Items */
N#define HID_Usage(x)           0x09,x
N#define HID_UsageMin(x)        0x19,x
N#define HID_UsageMax(x)        0x29,x
N
N
N#endif  /* __USB_HID_H__ */
L 20 "D:\Keil_v5\ARM\ARMCC\Bin\..\include\..\..\RL\USB\INC\usb.h" 2
N#include "usb_msc.h"
L 1 "D:\Keil_v5\ARM\ARMCC\Bin\..\include\..\..\RL\USB\INC\usb_msc.h" 1
N/*------------------------------------------------------------------------------
N *      RL-ARM - USB
N *------------------------------------------------------------------------------
N *      Name:    usb_msc.h
N *      Purpose: USB Mass Storage Device Class Definitions
N *      Rev.:    V4.74.1
N *------------------------------------------------------------------------------
N *      This code is part of the RealView Run-Time Library.
N *      Copyright (c) 2004-2016 KEIL - An ARM Company. All rights reserved.
N *---------------------------------------------------------------------------*/
N
N#ifndef __USB_MSC_H__
N#define __USB_MSC_H__
N
N
N/* MSC Subclass Codes */
N#define MSC_SUBCLASS_RBC                0x01
N#define MSC_SUBCLASS_SFF8020I_MMC2      0x02
N#define MSC_SUBCLASS_QIC157             0x03
N#define MSC_SUBCLASS_UFI                0x04
N#define MSC_SUBCLASS_SFF8070I           0x05
N#define MSC_SUBCLASS_SCSI               0x06
N
N/* MSC Protocol Codes */
N#define MSC_PROTOCOL_CBI_INT            0x00
N#define MSC_PROTOCOL_CBI_NOINT          0x01
N#define MSC_PROTOCOL_BULK_ONLY          0x50
N
N
N/* MSC Request Codes */
N#define MSC_REQUEST_RESET               0xFF
N#define MSC_REQUEST_GET_MAX_LUN         0xFE
N
N
N/* MSC Bulk-only Stage */
N#define MSC_BS_CBW                      0       /* Command Block Wrapper */
N#define MSC_BS_DATA_OUT                 1       /* Data Out Phase */
N#define MSC_BS_DATA_IN                  2       /* Data In Phase */
N#define MSC_BS_DATA_IN_LAST             3       /* Data In Last Phase */
N#define MSC_BS_DATA_IN_LAST_STALL       4       /* Data In Last Phase with Stall */
N#define MSC_BS_CSW                      5       /* Command Status Wrapper */
N#define MSC_BS_ERROR                    6       /* Error */
N#define MSC_BS_RESET                    7       /* Bulk-Only Mass Storage Reset */
N
N
N/* Bulk-only Command Block Wrapper */
Ntypedef __packed struct _MSC_CBW {
N  U32 dSignature;
N  U32 dTag;
N  U32 dDataLength;
N  U8  bmFlags;
N  U8  bLUN;
N  U8  bCBLength;
N  U8  CB[16];
N} MSC_CBW;
N
N/* Bulk-only Command Status Wrapper */
Ntypedef __packed struct _MSC_CSW {
N  U32 dSignature;
N  U32 dTag;
N  U32 dDataResidue;
N  U8  bStatus;
N} MSC_CSW;
N
N#define MSC_CBW_Signature               0x43425355
N#define MSC_CSW_Signature               0x53425355
N
N
N/* CSW Status Definitions */
N#define CSW_CMD_PASSED                  0x00
N#define CSW_CMD_FAILED                  0x01
N#define CSW_PHASE_ERROR                 0x02
N
N
N/* SCSI Commands */
N#define SCSI_TEST_UNIT_READY            0x00
N#define SCSI_REQUEST_SENSE              0x03
N#define SCSI_FORMAT_UNIT                0x04
N#define SCSI_INQUIRY                    0x12
N#define SCSI_MODE_SELECT6               0x15
N#define SCSI_MODE_SENSE6                0x1A
N#define SCSI_START_STOP_UNIT            0x1B
N#define SCSI_MEDIA_REMOVAL              0x1E
N#define SCSI_READ_FORMAT_CAPACITIES     0x23
N#define SCSI_READ_CAPACITY              0x25
N#define SCSI_READ10                     0x28
N#define SCSI_WRITE10                    0x2A
N#define SCSI_VERIFY10                   0x2F
N#define SCSI_SYNC_CACHE10               0x35
N#define SCSI_READ12                     0xA8
N#define SCSI_WRITE12                    0xAA
N#define SCSI_MODE_SELECT10              0x55
N#define SCSI_MODE_SENSE10               0x5A
N#define SCSI_SYNC_CACHE16               0x91
N#define SCSI_ATA_COMMAND_PASS_THROUGH12 0xA1
N#define SCSI_ATA_COMMAND_PASS_THROUGH16 0x85
N#define SCSI_SERVICE_ACTION_IN12        0xAB
N#define SCSI_SERVICE_ACTION_IN16        0x9E
N#define SCSI_SERVICE_ACTION_OUT12       0xA9
N#define SCSI_SERVICE_ACTION_OUT16       0x9F
N#define SCSI_REPORT_ID_INFO             0xA3
N
N#endif  /* __USB_MSC_H__ */
L 21 "D:\Keil_v5\ARM\ARMCC\Bin\..\include\..\..\RL\USB\INC\usb.h" 2
N
N/* USB Device header files                                                    */
N#include "usbd_core.h"
L 1 "D:\Keil_v5\ARM\ARMCC\Bin\..\include\..\..\RL\USB\INC\usbd_core.h" 1
N/*------------------------------------------------------------------------------
N *      RL-ARM - USB
N *------------------------------------------------------------------------------
N *      Name:    usbd_core.h
N *      Purpose: USB Device Core header file
N *      Rev.:    V4.75
N *------------------------------------------------------------------------------
N *      This code is part of the RealView Run-Time Library.
N *      Copyright (c) 2004-2013 KEIL - An ARM Company. All rights reserved.
N *----------------------------------------------------------------------------*/
N
N#ifndef __USBD_CORE_H__
N#define __USBD_CORE_H__
N
N
N/*--------------------------- Data structures --------------------------------*/
N
N/* USB Device Core Endpoint Data Structure */
Ntypedef struct _USBD_EP_DATA {
N  U8 *pData;
N  U16 Count;
N} USBD_EP_DATA;
N
N
N/*--------------------------- Global variables -------------------------------*/
N
N/* USB Device Core Global Variables */
Nextern U16         USBD_DeviceStatus;
Nextern U8          USBD_DeviceAddress;
Nextern U8          USBD_Configuration;
Nextern U32         USBD_EndPointMask;
Nextern U32         USBD_EndPointHalt;
Nextern U32         USBD_EndPointNoHaltClr;
Nextern U8          USBD_NumInterfaces;
Nextern U8          USBD_HighSpeed;
Nextern U8          USBD_ZLP;
N
Nextern USBD_EP_DATA     USBD_EP0Data;
Nextern USB_SETUP_PACKET USBD_SetupPacket;
N
Nextern OS_TID      USBD_RTX_DevTask;
Nextern OS_TID      USBD_RTX_EPTask[];
Nextern OS_TID      USBD_RTX_CoreTask;
N
N
N/*--------------------------- Functions exported to class specific files -----*/
N
Nextern void        USBD_SetupStage     (void);
Nextern void        USBD_DataInStage    (void);
Nextern void        USBD_DataOutStage   (void);
Nextern void        USBD_StatusInStage  (void);
Nextern void        USBD_StatusOutStage (void);
N
N
N/*--------------------------- Event handling routines ------------------------*/
N
Nextern        void usbd_class_init    (void);
N
Nextern        void USBD_EndPoint0     (U32 event);
N
Nextern __task void USBD_RTX_EndPoint0 (void);
Xextern __declspec(noreturn) void USBD_RTX_EndPoint0 (void);
N
N
N#endif  /* __USBD_CORE_H__ */
L 24 "D:\Keil_v5\ARM\ARMCC\Bin\..\include\..\..\RL\USB\INC\usb.h" 2
N#include "usbd_core_adc.h"
L 1 "D:\Keil_v5\ARM\ARMCC\Bin\..\include\..\..\RL\USB\INC\usbd_core_adc.h" 1
N/*------------------------------------------------------------------------------
N *      RL-ARM - USB
N *------------------------------------------------------------------------------
N *      Name:    usbd_core_adc.h
N *      Purpose: USB Device Core Audio Class (ADC) specific header file
N *      Rev.:    V4.70
N *------------------------------------------------------------------------------
N *      This code is part of the RealView Run-Time Library.
N *      Copyright (c) 2004-2013 KEIL - An ARM Company. All rights reserved.
N *----------------------------------------------------------------------------*/
N
N#ifndef __USBD_CORE_ADC_H__
N#define __USBD_CORE_ADC_H__
N
N
N/*--------------------------- Core overridable class specific functions ------*/
N
Nextern BOOL USBD_EndPoint0_Setup_ADC_ReqToIF (void);
Nextern BOOL USBD_EndPoint0_Setup_ADC_ReqToEP (void);
Nextern BOOL USBD_EndPoint0_Out_ADC_ReqToIF   (void);
Nextern BOOL USBD_EndPoint0_Out_ADC_ReqToEP   (void);
N
N
N#endif  /* __USBD_CORE_ADC_H__ */
L 25 "D:\Keil_v5\ARM\ARMCC\Bin\..\include\..\..\RL\USB\INC\usb.h" 2
N#include "usbd_core_cdc.h"
L 1 "D:\Keil_v5\ARM\ARMCC\Bin\..\include\..\..\RL\USB\INC\usbd_core_cdc.h" 1
N/*------------------------------------------------------------------------------
N *      RL-ARM - USB
N *------------------------------------------------------------------------------
N *      Name:    usbd_core_cdc.h
N *      Purpose: USB Device Core Communication Device Class (CDC) specific 
N *               header file
N *      Rev.:    V4.70
N *------------------------------------------------------------------------------
N *      This code is part of the RealView Run-Time Library.
N *      Copyright (c) 2004-2013 KEIL - An ARM Company. All rights reserved.
N *----------------------------------------------------------------------------*/
N
N#ifndef __USBD_CORE_CDC_H__
N#define __USBD_CORE_CDC_H__
N
N
N/*--------------------------- Core overridable class specific functions ------*/
N
Nextern BOOL USBD_EndPoint0_Setup_CDC_ReqToIF (void);
Nextern BOOL USBD_EndPoint0_Out_CDC_ReqToIF   (void);
N
N
N#endif  /* __USBD_CORE_CDC_H__ */
L 26 "D:\Keil_v5\ARM\ARMCC\Bin\..\include\..\..\RL\USB\INC\usb.h" 2
N#include "usbd_core_hid.h"
L 1 "D:\Keil_v5\ARM\ARMCC\Bin\..\include\..\..\RL\USB\INC\usbd_core_hid.h" 1
N/*------------------------------------------------------------------------------
N *      RL-ARM - USB
N *------------------------------------------------------------------------------
N *      Name:    usbd_core_hid.h
N *      Purpose: USB Device Core Human Interface Class (HID) specific 
N *               header file
N *      Rev.:    V4.70
N *------------------------------------------------------------------------------
N *      This code is part of the RealView Run-Time Library.
N *      Copyright (c) 2004-2013 KEIL - An ARM Company. All rights reserved.
N *----------------------------------------------------------------------------*/
N
N#ifndef __USBD_CORE_HID_H__
N#define __USBD_CORE_HID_H__
N
N
N/*--------------------------- Core overridable class specific functions ------*/
N
Nextern BOOL USBD_ReqGetDescriptor_HID        (U8 **pD, U32 *len);
Nextern BOOL USBD_EndPoint0_Setup_HID_ReqToIF (void);
Nextern BOOL USBD_EndPoint0_Out_HID_ReqToIF   (void);
N
N
N#endif  /* __USBD_CORE_HID_H__ */
L 27 "D:\Keil_v5\ARM\ARMCC\Bin\..\include\..\..\RL\USB\INC\usb.h" 2
N#include "usbd_core_msc.h"
L 1 "D:\Keil_v5\ARM\ARMCC\Bin\..\include\..\..\RL\USB\INC\usbd_core_msc.h" 1
N/*------------------------------------------------------------------------------
N *      RL-ARM - USB
N *------------------------------------------------------------------------------
N *      Name:    usbd_core_msc.h
N *      Purpose: USB Device Core Mass Storage Device (MSC) specific 
N *               header file
N *      Rev.:    V4.70
N *------------------------------------------------------------------------------
N *      This code is part of the RealView Run-Time Library.
N *      Copyright (c) 2004-2013 KEIL - An ARM Company. All rights reserved.
N *----------------------------------------------------------------------------*/
N
N#ifndef __USBD_CORE_MSC_H__
N#define __USBD_CORE_MSC_H__
N
N
N/*--------------------------- Core overridable class specific functions ------*/
N
Nextern void USBD_ReqClrFeature_MSC           (U32 EPNum);
Nextern BOOL USBD_EndPoint0_Setup_MSC_ReqToIF (void);
Nextern BOOL USBD_EndPoint0_Out_MSC_ReqToIF   (void);
N
N
N#endif  /* __USBD_CORE_MSC_H__ */
L 28 "D:\Keil_v5\ARM\ARMCC\Bin\..\include\..\..\RL\USB\INC\usb.h" 2
N#include "usbd_core_cls.h"
L 1 "D:\Keil_v5\ARM\ARMCC\Bin\..\include\..\..\RL\USB\INC\usbd_core_cls.h" 1
N/*------------------------------------------------------------------------------
N *      RL-ARM - USB
N *------------------------------------------------------------------------------
N *      Name:    usbd_core_cls.h
N *      Purpose: USB Device Core Custom Class (CLS) specific header file
N *      Rev.:    V4.70
N *------------------------------------------------------------------------------
N *      This code is part of the RealView Run-Time Library.
N *      Copyright (c) 2004-2013 KEIL - An ARM Company. All rights reserved.
N *----------------------------------------------------------------------------*/
N
N#ifndef __USBD_CORE_CLS_H__
N#define __USBD_CORE_CLS_H__
N
N
N/*--------------------------- Core overridable class specific functions ------*/
N
Nextern BOOL USBD_EndPoint0_Setup_CLS_ReqToDEV (void);
Nextern BOOL USBD_EndPoint0_Setup_CLS_ReqToIF  (void);
Nextern BOOL USBD_EndPoint0_Setup_CLS_ReqToEP  (void);
Nextern BOOL USBD_EndPoint0_Out_CLS_ReqToDEV   (void);
Nextern BOOL USBD_EndPoint0_Out_CLS_ReqToIF    (void);
Nextern BOOL USBD_EndPoint0_Out_CLS_ReqToEP    (void);
N
N
N#endif  /* __USBD_CORE_CLS_H__ */
L 29 "D:\Keil_v5\ARM\ARMCC\Bin\..\include\..\..\RL\USB\INC\usb.h" 2
N#include "usbd_desc.h"
L 1 "D:\Keil_v5\ARM\ARMCC\Bin\..\include\..\..\RL\USB\INC\usbd_desc.h" 1
N/*------------------------------------------------------------------------------
N *      RL-ARM - USB
N *------------------------------------------------------------------------------
N *      Name:    usbd_desc.h
N *      Purpose: USB Device Descriptors header file
N *      Rev.:    V4.70
N *------------------------------------------------------------------------------
N *      This code is part of the RealView Run-Time Library.
N *      Copyright (c) 2004-2013 KEIL - An ARM Company. All rights reserved.
N *----------------------------------------------------------------------------*/
N
N#ifndef __USBD_DESC_H__
N#define __USBD_DESC_H__
N
N#define WBVAL(x)                          (x & 0xFF),((x >> 8) & 0xFF)
N#define B3VAL(x)                          (x & 0xFF),((x >> 8) & 0xFF),((x >> 16) & 0xFF)
N#define USB_DEVICE_DESC_SIZE              (sizeof(USB_DEVICE_DESCRIPTOR))
N#define USB_DEVICE_QUALI_SIZE             (sizeof(USB_DEVICE_QUALIFIER_DESCRIPTOR))
N#define USB_CONFIGUARTION_DESC_SIZE       (sizeof(USB_CONFIGURATION_DESCRIPTOR))
N#define USB_INTERFACE_ASSOC_DESC_SIZE     (sizeof(USB_INTERFACE_ASSOCIATION_DESCRIPTOR))
N#define USB_INTERFACE_DESC_SIZE           (sizeof(USB_INTERFACE_DESCRIPTOR))
N#define USB_ENDPOINT_DESC_SIZE            (sizeof(USB_ENDPOINT_DESCRIPTOR))
N#define USB_HID_DESC_SIZE                 (sizeof(HID_DESCRIPTOR))
N#define USB_HID_REPORT_DESC_SIZE          (sizeof(USBD_HID_ReportDescriptor))
N
N#endif  /* __USBD_DESC_H__ */
L 30 "D:\Keil_v5\ARM\ARMCC\Bin\..\include\..\..\RL\USB\INC\usb.h" 2
N#include "usbd_event.h"
L 1 "D:\Keil_v5\ARM\ARMCC\Bin\..\include\..\..\RL\USB\INC\usbd_event.h" 1
N/*------------------------------------------------------------------------------
N *      RL-ARM - USB
N *------------------------------------------------------------------------------
N *      Name:    usbd_event.h
N *      Purpose: USB Device Event header file
N *      Rev.:    V4.70
N *------------------------------------------------------------------------------
N *      This code is part of the RealView Run-Time Library.
N *      Copyright (c) 2004-2013 KEIL - An ARM Company. All rights reserved.
N *----------------------------------------------------------------------------*/
N
N#ifndef __USBD_EVENT_H__
N#define __USBD_EVENT_H__
N
N
N/* USB Device - Device Events                                                 */
N#define USBD_EVT_POWER_ON    (1 <<  0)  /* USB Power On                       */
N#define USBD_EVT_POWER_OFF   (1 <<  1)  /* USB Power Off                      */
N#define USBD_EVT_RESET       (1 <<  2)  /* USB Bus Reset                      */
N#define USBD_EVT_WAKEUP      (1 <<  3)  /* USB Remote Wakeup                  */
N#define USBD_EVT_SUSPEND     (1 <<  4)  /* USB Suspend                        */
N#define USBD_EVT_RESUME      (1 <<  5)  /* USB Resume                         */
N#define USBD_EVT_SOF         (1 <<  6)  /* USB Start of Frame                 */
N#define USBD_EVT_ERROR       (1 <<  7)  /* USB Error                          */
N
N/* USB Device - Endpoint Events                                               */
N#define USBD_EVT_SETUP       (1 <<  1)  /* Setup Packet                       */
N#define USBD_EVT_OUT         (1 <<  2)  /* OUT Packet                         */
N#define USBD_EVT_IN          (1 <<  3)  /*  IN Packet                         */
N#define USBD_EVT_OUT_NAK     (1 <<  4)  /* OUT Packet - Not Acknowledged      */
N#define USBD_EVT_IN_NAK      (1 <<  5)  /*  IN Packet - Not Acknowledged      */
N#define USBD_EVT_OUT_STALL   (1 <<  6)  /* OUT Packet - Stalled               */
N#define USBD_EVT_IN_STALL    (1 <<  7)  /*  IN Packet - Stalled               */
N#define USBD_EVT_OUT_DMA_EOT (1 <<  8)  /* DMA OUT EP - End of Transfer       */
N#define USBD_EVT_IN_DMA_EOT  (1 <<  9)  /* DMA  IN EP - End of Transfer       */
N#define USBD_EVT_OUT_DMA_NDR (1 << 10)  /* DMA OUT EP - New Descriptor Request*/
N#define USBD_EVT_IN_DMA_NDR  (1 << 11)  /* DMA  IN EP - New Descriptor Request*/
N#define USBD_EVT_OUT_DMA_ERR (1 << 12)  /* DMA OUT EP - Error                 */
N#define USBD_EVT_IN_DMA_ERR  (1 << 13)  /* DMA  IN EP - Error                 */
N
N/* USB Device - Core Events                                                   */
N#define USBD_EVT_SET_CFG     (1 <<  0)  /* Set Configuration                  */
N#define USBD_EVT_SET_IF      (1 <<  1)  /* Set Interface                      */
N#define USBD_EVT_SET_FEATURE (1 <<  2)  /* Set Feature                        */
N#define USBD_EVT_CLR_FEATURE (1 <<  3)  /* Clear Feature                      */
N
N/* USB Device - Device Events Callback Pointers                               */
Nextern void (* const USBD_P_Power_Event    )(BOOL power);
Nextern void (* const USBD_P_Reset_Event    )(void);
Nextern void (* const USBD_P_Suspend_Event  )(void);
Nextern void (* const USBD_P_Resume_Event   )(void);
Nextern void (* const USBD_P_WakeUp_Event   )(void);
Nextern void (* const USBD_P_SOF_Event      )(void);
Nextern void (* const USBD_P_Error_Event    )(U32 error);
N
N/* USB Device - Endpoint Events Callback Pointers                             */
Nextern void (* const USBD_P_EP[16])         (U32 event);
N
N/* USB Device - Core Events Callback Pointers                                 */
Nextern void (* const USBD_P_Configure_Event)(void);
Nextern void (* const USBD_P_Interface_Event)(void);
Nextern void (* const USBD_P_Feature_Event  )(void);
N
N/* USB Device - RTX version RTX tasks initialization                          */
Nextern void USBD_RTX_TaskInit               (void);
N
N#endif  /* __USBD_EVENT_H__ */
L 31 "D:\Keil_v5\ARM\ARMCC\Bin\..\include\..\..\RL\USB\INC\usb.h" 2
N#include "usbd_adc.h"
L 1 "D:\Keil_v5\ARM\ARMCC\Bin\..\include\..\..\RL\USB\INC\usbd_adc.h" 1
N/*------------------------------------------------------------------------------
N *      RL-ARM - USB
N *------------------------------------------------------------------------------
N *      Name:    usbd_adc.h
N *      Purpose: USB Device Audio Device Class header file
N *      Rev.:    V4.70
N *------------------------------------------------------------------------------
N *      This code is part of the RealView Run-Time Library.
N *      Copyright (c) 2004-2013 KEIL - An ARM Company. All rights reserved.
N *----------------------------------------------------------------------------*/
N
N#ifndef __USBD_ADC_H__
N#define __USBD_ADC_H__
N
N
N/*--------------------------- Global variables -------------------------------*/
N
N/* USB Device Audio Class Device Global Variables */
Nextern        U16 USBD_ADC_VolCur;
Nextern const  U16 USBD_ADC_VolMin;
Nextern const  U16 USBD_ADC_VolMax;
Nextern const  U16 USBD_ADC_VolRes;
Nextern        U8  USBD_ADC_Mute;
Nextern        U32 USBD_ADC_Volume;
Nextern        U16 USBD_ADC_DataOut;
Nextern        U16 USBD_ADC_DataIn;
Nextern        U8  USBD_ADC_DataRun;
N
N/* USB Device Audio Class Device library settings Variables */
Nextern const  U32 usbd_adc_cfg_datafreq;
Nextern const  U32 usbd_adc_cfg_p_s;
Nextern const  U32 usbd_adc_cfg_p_c;
Nextern const  U32 usbd_adc_cfg_b_s;
Nextern        S16 USBD_ADC_DataBuf      [];
N
N
N/*--------------------------- Event handling routines ------------------------*/
N
Nextern void USBD_ADC_SOF_Event     (void);
N
N
N#endif  /* __USBD_ADC_H__ */
L 32 "D:\Keil_v5\ARM\ARMCC\Bin\..\include\..\..\RL\USB\INC\usb.h" 2
N#include "usbd_cdc_acm.h"
L 1 "D:\Keil_v5\ARM\ARMCC\Bin\..\include\..\..\RL\USB\INC\usbd_cdc_acm.h" 1
N/*------------------------------------------------------------------------------
N *      RL-ARM - USB
N *------------------------------------------------------------------------------
N *      Name:    usbd_cdc_acm.h
N *      Purpose: USB Device Communication Device Class Abstract Control Model 
N *               header file
N *      Rev.:    V4.70
N *------------------------------------------------------------------------------
N *      This code is part of the RealView Run-Time Library.
N *      Copyright (c) 2004-2013 KEIL - An ARM Company. All rights reserved.
N *----------------------------------------------------------------------------*/
N
N#ifndef __USBD_CDC_ACM_H__
N#define __USBD_CDC_ACM_H__
N
N
N/*--------------------------- Event handling routines ------------------------*/
N
Nextern           void USBD_CDC_ACM_Reset_Event          (void);
N
Nextern           void USBD_CDC_ACM_SOF_Event            (void);
N
Nextern           void USBD_CDC_ACM_EP_INTIN_Event       (U32 event);
Nextern           void USBD_CDC_ACM_EP_BULKIN_Event      (U32 event);
Nextern           void USBD_CDC_ACM_EP_BULKOUT_Event     (U32 event);
Nextern           void USBD_CDC_ACM_EP_BULK_Event        (U32 event);
N
Nextern    __task void USBD_RTX_CDC_ACM_EP_INTIN_Event   (void);
Xextern    __declspec(noreturn) void USBD_RTX_CDC_ACM_EP_INTIN_Event   (void);
Nextern    __task void USBD_RTX_CDC_ACM_EP_BULKIN_Event  (void);
Xextern    __declspec(noreturn) void USBD_RTX_CDC_ACM_EP_BULKIN_Event  (void);
Nextern    __task void USBD_RTX_CDC_ACM_EP_BULKOUT_Event (void);
Xextern    __declspec(noreturn) void USBD_RTX_CDC_ACM_EP_BULKOUT_Event (void);
Nextern    __task void USBD_RTX_CDC_ACM_EP_BULK_Event    (void);
Xextern    __declspec(noreturn) void USBD_RTX_CDC_ACM_EP_BULK_Event    (void);
N
N
N#endif  /* __USBD_CDC_ACM_H__ */
L 33 "D:\Keil_v5\ARM\ARMCC\Bin\..\include\..\..\RL\USB\INC\usb.h" 2
N#include "usbd_hid.h"
L 1 "D:\Keil_v5\ARM\ARMCC\Bin\..\include\..\..\RL\USB\INC\usbd_hid.h" 1
N/*------------------------------------------------------------------------------
N *      RL-ARM - USB
N *------------------------------------------------------------------------------
N *      Name:    usbd_hid.h
N *      Purpose: USB Device Human Interface Device Class header file
N *      Rev.:    V4.74
N *------------------------------------------------------------------------------
N *      This code is part of the RealView Run-Time Library.
N *      Copyright (c) 2004-2013 KEIL - An ARM Company. All rights reserved.
N *----------------------------------------------------------------------------*/
N
N#ifndef __USBD_HID_H__
N#define __USBD_HID_H__
N
N
N/*--------------------------- Global constants -------------------------------*/
N
N/* USB HID Class API enumerated constants                                     */
Nenum {
N  USBD_HID_REQ_EP_CTRL = 0,             /* Request from control endpoint      */
N  USBD_HID_REQ_EP_INT,                  /* Request from interrupt endpoint    */
N  USBD_HID_REQ_PERIOD_UPDATE            /* Request from periodic update       */
N};
N
N
N/*--------------------------- Event handling routines ------------------------*/
N
Nextern        void USBD_HID_Configure_Event    (void);
Nextern        void USBD_HID_SOF_Event          (void);
N
Nextern        void USBD_HID_EP_INTIN_Event     (U32 event);
Nextern        void USBD_HID_EP_INTOUT_Event    (U32 event);
Nextern        void USBD_HID_EP_INT_Event       (U32 event);
N
Nextern __task void USBD_RTX_HID_EP_INTIN_Event (void);
Xextern __declspec(noreturn) void USBD_RTX_HID_EP_INTIN_Event (void);
Nextern __task void USBD_RTX_HID_EP_INTOUT_Event(void);
Xextern __declspec(noreturn) void USBD_RTX_HID_EP_INTOUT_Event(void);
Nextern __task void USBD_RTX_HID_EP_INT_Event   (void);
Xextern __declspec(noreturn) void USBD_RTX_HID_EP_INT_Event   (void);
N
N
N#endif  /* __USBD_HID_H__ */
L 34 "D:\Keil_v5\ARM\ARMCC\Bin\..\include\..\..\RL\USB\INC\usb.h" 2
N#include "usbd_msc.h"
L 1 "D:\Keil_v5\ARM\ARMCC\Bin\..\include\..\..\RL\USB\INC\usbd_msc.h" 1
N/*------------------------------------------------------------------------------
N *      RL-ARM - USB
N *------------------------------------------------------------------------------
N *      Name:    usbd_msc.h
N *      Purpose: USB Device Mass Storage Device Class header file
N *      Rev.:    V4.70
N *------------------------------------------------------------------------------
N *      This code is part of the RealView Run-Time Library.
N *      Copyright (c) 2004-2013 KEIL - An ARM Company. All rights reserved.
N *----------------------------------------------------------------------------*/
N
N#ifndef __USBD_MSC_H__
N#define __USBD_MSC_H__
N
N
N/*--------------------------- Global variables -------------------------------*/
N
N/* USB Device Mass Storage Device Class Global Variables */
Nextern       BOOL USBD_MSC_MediaReady;
Nextern       BOOL USBD_MSC_ReadOnly;
Nextern       U32  USBD_MSC_MemorySize;
Nextern       U32  USBD_MSC_BlockSize;
Nextern       U32  USBD_MSC_BlockGroup;
Nextern       U32  USBD_MSC_BlockCount;
Nextern       U8  *USBD_MSC_BlockBuf;
N
N
N/*--------------------------- Event handling routines ------------------------*/
N
Nextern        void USBD_MSC_EP_BULKIN_Event      (U32 event);
Nextern        void USBD_MSC_EP_BULKOUT_Event     (U32 event);
Nextern        void USBD_MSC_EP_BULK_Event        (U32 event);
N
Nextern __task void USBD_RTX_MSC_EP_BULKIN_Event  (void);
Xextern __declspec(noreturn) void USBD_RTX_MSC_EP_BULKIN_Event  (void);
Nextern __task void USBD_RTX_MSC_EP_BULKOUT_Event (void);
Xextern __declspec(noreturn) void USBD_RTX_MSC_EP_BULKOUT_Event (void);
Nextern __task void USBD_RTX_MSC_EP_BULK_Event    (void);
Xextern __declspec(noreturn) void USBD_RTX_MSC_EP_BULK_Event    (void);
N
N
N#endif  /* __USBD_MSC_H__ */
L 35 "D:\Keil_v5\ARM\ARMCC\Bin\..\include\..\..\RL\USB\INC\usb.h" 2
N#include "usbd_cls.h"
L 1 "D:\Keil_v5\ARM\ARMCC\Bin\..\include\..\..\RL\USB\INC\usbd_cls.h" 1
N/*------------------------------------------------------------------------------
N *      RL-ARM - USB
N *------------------------------------------------------------------------------
N *      Name:    usbd_cls.h
N *      Purpose: USB Device Custom Class header file
N *      Rev.:    V4.70
N *------------------------------------------------------------------------------
N *      This code is part of the RealView Run-Time Library.
N *      Copyright (c) 2004-2013 KEIL - An ARM Company. All rights reserved.
N *----------------------------------------------------------------------------*/
N
N#ifndef __USBD_CLS_H__
N#define __USBD_CLS_H__
N
N
N/*--------------------------- Event handling routines ------------------------*/
N
Nextern void USBD_CLS_SOF_Event     (void);
N
N
N#endif  /* __USBD_CLS_H__ */
L 36 "D:\Keil_v5\ARM\ARMCC\Bin\..\include\..\..\RL\USB\INC\usb.h" 2
N#include "usbd_hw.h"
L 1 "D:\Keil_v5\ARM\ARMCC\Bin\..\include\..\..\RL\USB\INC\usbd_hw.h" 1
N/*------------------------------------------------------------------------------
N *      RL-ARM - USB
N *------------------------------------------------------------------------------
N *      Name:    usbd_hw.h
N *      Purpose: USB Device Hardware Layer header file
N *      Rev.:    V4.70
N *------------------------------------------------------------------------------
N *      This code is part of the RealView Run-Time Library.
N *      Copyright (c) 2004-2013 KEIL - An ARM Company. All rights reserved.
N *----------------------------------------------------------------------------*/
N
N#ifndef __USBD_HW_H__
N#define __USBD_HW_H__
N
N
N/* USB Hardware Functions */
Nextern void USBD_Init        (void);
Nextern void USBD_Connect     (BOOL con);
Nextern void USBD_Reset       (void);
Nextern void USBD_Suspend     (void);
Nextern void USBD_Resume      (void);
Nextern void USBD_WakeUp      (void);
Nextern void USBD_WakeUpCfg   (BOOL cfg);
Nextern void USBD_SetAddress  (U32  adr, U32 setup);
Nextern void USBD_Configure   (BOOL cfg);
Nextern void USBD_ConfigEP    (USB_ENDPOINT_DESCRIPTOR *pEPD);
Nextern void USBD_DirCtrlEP   (U32  dir);
Nextern void USBD_EnableEP    (U32  EPNum);
Nextern void USBD_DisableEP   (U32  EPNum);
Nextern void USBD_ResetEP     (U32  EPNum);
Nextern void USBD_SetStallEP  (U32  EPNum);
Nextern void USBD_ClrStallEP  (U32  EPNum);
Nextern void USBD_ClearEPBuf  (U32  EPNum);
Nextern U32  USBD_ReadEP      (U32  EPNum, U8 *pData);
Nextern U32  USBD_WriteEP     (U32  EPNum, U8 *pData, U32 cnt);
Nextern U32  USBD_GetFrame    (void);
Nextern U32  USBD_GetError    (void);
N
N#endif  /* __USBD_HW_H__ */
L 37 "D:\Keil_v5\ARM\ARMCC\Bin\..\include\..\..\RL\USB\INC\usb.h" 2
N
N/* USB Host header files                                                      */
N#include "usbh.h"
L 1 "D:\Keil_v5\ARM\ARMCC\Bin\..\include\..\..\RL\USB\INC\usbh.h" 1
N/*------------------------------------------------------------------------------
N *      RL-ARM - USB
N *------------------------------------------------------------------------------
N *      Name:    usbh.h
N *      Purpose: Host Core header file
N *      Rev.:    V4.74
N *------------------------------------------------------------------------------
N *      This code is part of the RealView Run-Time Library.
N *      Copyright (c) 2004-2013 KEIL - An ARM Company. All rights reserved.
N *----------------------------------------------------------------------------*/
N
N#ifndef __USBH_H__
N#define __USBH_H__
N
N#pragma anon_unions
N
N
N/************************* Constants ******************************************/
N
N/* Error values that USB Host functions can return                            */
Ntypedef enum { 
N  ERROR_SUCCESS = 0,                    /* No error                           */
N                                        /* Errors                             */
N  ERROR_USBH_HCI,                       /* Host Ctrl Instance does not exist  */
N  ERROR_USBH_HCD,                       /* Host Ctrl Driver does not exist    */
N  ERROR_USBH_DCI,                       /* Device Class Instance does not exst*/
N  ERROR_USBH_DCD,                       /* Device Class Driver does not exist */
N
N  ERROR_USBH_MEM_INIT,                  /* Memory initialization failed       */
N  ERROR_USBH_MEM_ALLOC,                 /* Memory allocation failed           */
N  ERROR_USBH_MEM_DEALLOC,               /* Memory deallocation failed         */
N
N  ERROR_USBH_PINS_CONFIG,               /* Pins not conf/unconfigured         */
N  ERROR_USBH_INIT,                      /* Controller not init/uninitialized  */
N  ERROR_USBH_PORT_POWER,                /* Port power driving failed          */
N  ERROR_USBH_PORT_RESET,                /* Port reset failed                  */
N
N  ERROR_USBH_EP,                        /* Endpoint does not exist            */
N  ERROR_USBH_EP_ADD,                    /* Endpoint was not added             */
N  ERROR_USBH_EP_CONFIG,                 /* Endpoint was not configured        */
N  ERROR_USBH_EP_REMOVE,                 /* Endpoint was not removed           */
N
N  ERROR_USBH_URB,                       /* URB does not exist                 */
N  ERROR_USBH_URB_SUBMIT,                /* URB was not submitted              */
N  ERROR_USBH_URB_CANCEL,                /* URB was not cancelled              */
N  ERROR_USBH_URB_TRANSFER,              /* URB transfered with error          */
N  ERROR_USBH_URB_TOUT,                  /* URB has timed-out                  */
N
N  ERROR_USBH_ENUMERATE,                 /* Device enumeration failed          */
N  ERROR_USBH_UNINIT_DEVS,               /* Device uninitialization failed     */
N
N  ERROR_USBH_MSC,                       /* MSC Device Instance does not exist */
N  ERROR_USBH_MSC_SIG,                   /* MSC Class CSW Signature not correct*/
N  ERROR_USBH_MSC_TAG,                   /* MSC Class different tags           */
N  ERROR_USBH_MSC_RESID,                 /* MSC Class data residue not 0       */
N
N  ERROR_USBH_HID,                       /* HID Device Instance does not exist */
N
N  ERROR_USBH_CLS,                       /* USB Device Class does not exist    */
N
N  ERROR_USBH_CLS_UNKNOWN,               /* Unknown Class type                 */
N} USBH_ERROR;
N
N/* USB Host Speed constants                                                   */
Nenum { 
N  USBH_LS  = 0,                         /* Low speed                          */
N  USBH_FS,                              /* Full speed                         */
N  USBH_HS                               /* High speed                         */
N};
N
N/* USB Host Packet Type constants                                             */
Nenum {
N  USBH_PACKET_OUT      =  1,            /* OUT   token     packet             */
N  USBH_PACKET_IN       =  9,            /* IN    token     packet             */
N  USBH_PACKET_SOF      =  5,            /* SOF   token     packet             */
N  USBH_PACKET_SETUP    = 13,            /* SETUP token     packet             */
N  USBH_PACKET_DATA0    =  3,            /* DATA0 data      packet             */
N  USBH_PACKET_DATA1    = 11,            /* DATA1 data      packet             */
N  USBH_PACKET_DATA2    =  7,            /* DATA2 data      packet             */
N  USBH_PACKET_MDATA    = 15,            /* MDATA data      packet             */
N  USBH_PACKET_ACK      =  2,            /* ACK   handshake packet             */
N  USBH_PACKET_NAK      = 10,            /* NAK   handshake packet             */
N  USBH_PACKET_STALL    = 14,            /* STALL handshake packet             */
N  USBH_PACKET_NYET     =  6,            /* NYET  handshake packet             */
N  USBH_PACKET_PRE      = 12,            /* PRE   special   packet (token)     */
N  USBH_PACKET_ERR      = 12,            /* ERR   special   packet (handshake) */
N  USBH_PACKET_SPLIT    =  8,            /* SPLIT special   packet (token)     */
N  USBH_PACKET_PING     =  4,            /* PING  special   packet (token)     */
N  USBH_PACKET_RESERVED =  0             /* Reserved        packet             */
N};
N
N/* USB Host Transaction Error Type                                            */
Nenum {
N  USBH_TR_NO_ERROR     =  0,            /* No error                           */
N  USBH_TR_ERROR_BSTUFF =  1,            /* Bit stuff error                    */
N  USBH_TR_ERROR_PID    =  2,            /* PID check error                    */
N  USBH_TR_ERROR_CRC    =  3,            /* CRC       error                    */
N  USBH_TR_ERROR_BUSTT  =  4,            /* Bus Turn-around Time error         */
N  USBH_TR_ERROR_FEOP   =  4,            /* False EOP error                    */
N  USBH_TR_ERROR_BABBLE =  4,            /* Babble or Loss of Activity error   */
N  USBH_TR_ERROR_EOF    =  5,            /* Transaction during EOF error       */
N  USBH_TR_ERROR_DOVER  =  6,            /* Data Overrun error                 */
N  USBH_TR_ERROR_DUNDER =  7,            /* Data Underrun error                */
N  USBH_TR_ERROR_OTHER  =  8,            /* Other errors                       */
N};
N
N/************************* Macros *********************************************/
N
N#define PREPARE_SETUP_PACKET(urb, ptr, NAKs)                                   \
N  urb.ptrDataBuffer               =  ptr;                                      \
N  urb.DataLength                  =  8;                                        \
N  urb.PacketType                  =  USBH_PACKET_SETUP;                        \
N  urb.ToggleBit                   =  0;                                        \
N  urb.ToggleForce                 =  1;                                        \
N  urb.NAKRetries                  =  NAKs;
X#define PREPARE_SETUP_PACKET(urb, ptr, NAKs)                                     urb.ptrDataBuffer               =  ptr;                                        urb.DataLength                  =  8;                                          urb.PacketType                  =  USBH_PACKET_SETUP;                          urb.ToggleBit                   =  0;                                          urb.ToggleForce                 =  1;                                          urb.NAKRetries                  =  NAKs;
N
N#define PREPARE_SETUP_PACKET_DATA(ptr, dir, typ, rcpnt, req, val, idx, len)    \
N  ptr->bmRequestType.Dir          =  dir;                                      \
N  ptr->bmRequestType.Type         =  typ;                                      \
N  ptr->bmRequestType.Recipient    =  rcpnt;                                    \
N  ptr->bRequest                   =  req;                                      \
N  ptr->wValue                     =  U16_LE(val);                              \
N  ptr->wIndex                     =  U16_LE(idx);                              \
N  ptr->wLength                    =  U16_LE(len);
X#define PREPARE_SETUP_PACKET_DATA(ptr, dir, typ, rcpnt, req, val, idx, len)      ptr->bmRequestType.Dir          =  dir;                                        ptr->bmRequestType.Type         =  typ;                                        ptr->bmRequestType.Recipient    =  rcpnt;                                      ptr->bRequest                   =  req;                                        ptr->wValue                     =  U16_LE(val);                                ptr->wIndex                     =  U16_LE(idx);                                ptr->wLength                    =  U16_LE(len);
N
N#define PREPARE_IN_DATA0_PACKET(urb, ptr, len, NAKs)                           \
N  urb.ptrDataBuffer               =  ptr;                                      \
N  urb.DataLength                  =  len;                                      \
N  urb.PacketType                  =  USBH_PACKET_IN;                           \
N  urb.ToggleBit                   =  0;                                        \
N  urb.ToggleForce                 =  1;                                        \
N  urb.NAKRetries                  =  NAKs;
X#define PREPARE_IN_DATA0_PACKET(urb, ptr, len, NAKs)                             urb.ptrDataBuffer               =  ptr;                                        urb.DataLength                  =  len;                                        urb.PacketType                  =  USBH_PACKET_IN;                             urb.ToggleBit                   =  0;                                          urb.ToggleForce                 =  1;                                          urb.NAKRetries                  =  NAKs;
N
N#define PREPARE_IN_DATA1_PACKET(urb, ptr, len, NAKs)                           \
N  urb.ptrDataBuffer               =  ptr;                                      \
N  urb.DataLength                  =  len;                                      \
N  urb.PacketType                  =  USBH_PACKET_IN;                           \
N  urb.ToggleBit                   =  1;                                        \
N  urb.ToggleForce                 =  1;                                        \
N  urb.NAKRetries                  =  NAKs;
X#define PREPARE_IN_DATA1_PACKET(urb, ptr, len, NAKs)                             urb.ptrDataBuffer               =  ptr;                                        urb.DataLength                  =  len;                                        urb.PacketType                  =  USBH_PACKET_IN;                             urb.ToggleBit                   =  1;                                          urb.ToggleForce                 =  1;                                          urb.NAKRetries                  =  NAKs;
N
N#define PREPARE_IN_DATAx_PACKET(urb, ptr, len, NAKs)                           \
N  urb.ptrDataBuffer               =  ptr;                                      \
N  urb.DataLength                  =  len;                                      \
N  urb.PacketType                  =  USBH_PACKET_IN;                           \
N  urb.ToggleForce                 =  0;                                        \
N  urb.NAKRetries                  =  NAKs;
X#define PREPARE_IN_DATAx_PACKET(urb, ptr, len, NAKs)                             urb.ptrDataBuffer               =  ptr;                                        urb.DataLength                  =  len;                                        urb.PacketType                  =  USBH_PACKET_IN;                             urb.ToggleForce                 =  0;                                          urb.NAKRetries                  =  NAKs;
N
N#define PREPARE_OUT_DATA0_PACKET(urb, ptr, len, NAKs)                          \
N  urb.ptrDataBuffer               =  ptr;                                      \
N  urb.DataLength                  =  len;                                      \
N  urb.PacketType                  =  USBH_PACKET_OUT;                          \
N  urb.ToggleBit                   =  0;                                        \
N  urb.ToggleForce                 =  1;                                        \
N  urb.NAKRetries                  =  NAKs;
X#define PREPARE_OUT_DATA0_PACKET(urb, ptr, len, NAKs)                            urb.ptrDataBuffer               =  ptr;                                        urb.DataLength                  =  len;                                        urb.PacketType                  =  USBH_PACKET_OUT;                            urb.ToggleBit                   =  0;                                          urb.ToggleForce                 =  1;                                          urb.NAKRetries                  =  NAKs;
N
N#define PREPARE_OUT_DATA1_PACKET(urb, ptr, len, NAKs)                          \
N  urb.ptrDataBuffer               =  ptr;                                      \
N  urb.DataLength                  =  len;                                      \
N  urb.PacketType                  =  USBH_PACKET_OUT;                          \
N  urb.ToggleBit                   =  1;                                        \
N  urb.ToggleForce                 =  1;                                        \
N  urb.NAKRetries                  =  NAKs;
X#define PREPARE_OUT_DATA1_PACKET(urb, ptr, len, NAKs)                            urb.ptrDataBuffer               =  ptr;                                        urb.DataLength                  =  len;                                        urb.PacketType                  =  USBH_PACKET_OUT;                            urb.ToggleBit                   =  1;                                          urb.ToggleForce                 =  1;                                          urb.NAKRetries                  =  NAKs;
N
N#define PREPARE_OUT_DATAx_PACKET(urb, ptr, len, NAKs)                          \
N  urb.ptrDataBuffer               =  ptr;                                      \
N  urb.DataLength                  =  len;                                      \
N  urb.PacketType                  =  USBH_PACKET_OUT;                          \
N  urb.ToggleForce                 =  0;                                        \
N  urb.NAKRetries                  =  NAKs;
X#define PREPARE_OUT_DATAx_PACKET(urb, ptr, len, NAKs)                            urb.ptrDataBuffer               =  ptr;                                        urb.DataLength                  =  len;                                        urb.PacketType                  =  USBH_PACKET_OUT;                            urb.ToggleForce                 =  0;                                          urb.NAKRetries                  =  NAKs;
N
N#define PREPARE_PING_PACKET(urb, NAKs)                                         \
N  urb.DataLength                  =  0;                                        \
N  urb.PacketType                  =  USBH_PACKET_PING;                         \
N  urb.ToggleForce                 =  0;                                        \
N  urb.NAKRetries                  =  NAKs;
X#define PREPARE_PING_PACKET(urb, NAKs)                                           urb.DataLength                  =  0;                                          urb.PacketType                  =  USBH_PACKET_PING;                           urb.ToggleForce                 =  0;                                          urb.NAKRetries                  =  NAKs;
N
N#define PREPARE_IN_DATAx_PACKET(urb, ptr, len, NAKs)                           \
N  urb.ptrDataBuffer               =  ptr;                                      \
N  urb.DataLength                  =  len;                                      \
N  urb.PacketType                  =  USBH_PACKET_IN;                           \
N  urb.ToggleForce                 =  0;                                        \
N  urb.NAKRetries                  =  NAKs;
X#define PREPARE_IN_DATAx_PACKET(urb, ptr, len, NAKs)                             urb.ptrDataBuffer               =  ptr;                                        urb.DataLength                  =  len;                                        urb.PacketType                  =  USBH_PACKET_IN;                             urb.ToggleForce                 =  0;                                          urb.NAKRetries                  =  NAKs;
N
N#define PREPARE_OUT_DATAx_PACKET(urb, ptr, len, NAKs)                          \
N  urb.ptrDataBuffer               =  ptr;                                      \
N  urb.DataLength                  =  len;                                      \
N  urb.PacketType                  =  USBH_PACKET_OUT;                          \
N  urb.ToggleForce                 =  0;                                        \
N  urb.NAKRetries                  =  NAKs;
X#define PREPARE_OUT_DATAx_PACKET(urb, ptr, len, NAKs)                            urb.ptrDataBuffer               =  ptr;                                        urb.DataLength                  =  len;                                        urb.PacketType                  =  USBH_PACKET_OUT;                            urb.ToggleForce                 =  0;                                          urb.NAKRetries                  =  NAKs;
N
N#define PREPARE_IN_DATAx_PACKET(urb, ptr, len, NAKs)                           \
N  urb.ptrDataBuffer               =  ptr;                                      \
N  urb.DataLength                  =  len;                                      \
N  urb.PacketType                  =  USBH_PACKET_IN;                           \
N  urb.ToggleForce                 =  0;                                        \
N  urb.NAKRetries                  =  NAKs;
X#define PREPARE_IN_DATAx_PACKET(urb, ptr, len, NAKs)                             urb.ptrDataBuffer               =  ptr;                                        urb.DataLength                  =  len;                                        urb.PacketType                  =  USBH_PACKET_IN;                             urb.ToggleForce                 =  0;                                          urb.NAKRetries                  =  NAKs;
N
N#define PREPARE_MSC_CBW(ptr_cbw, sig, tag, len, flg, lun, cb_len, cb0, cb1, cb2, cb3, cb4, cb5, cb6, cb7, cb8, cb9, cb10, cb11, cb12, cb13, cb14, cb15)\
N  ptr_cbw->dSignature             =  U32_LE(sig);                              \
N  ptr_cbw->dTag                   =  U32_LE(++tag);                            \
N  ptr_cbw->dDataLength            =  len;                                      \
N  ptr_cbw->bmFlags                =  flg;                                      \
N  ptr_cbw->bLUN                   =  lun;                                      \
N  ptr_cbw->bCBLength              =  cb_len;                                   \
N  ptr_cbw->CB[0]                  =  cb0;                                      \
N  ptr_cbw->CB[1]                  =  cb1;                                      \
N  ptr_cbw->CB[2]                  =  cb2;                                      \
N  ptr_cbw->CB[3]                  =  cb3;                                      \
N  ptr_cbw->CB[4]                  =  cb4;                                      \
N  ptr_cbw->CB[5]                  =  cb5;                                      \
N  ptr_cbw->CB[6]                  =  cb6;                                      \
N  ptr_cbw->CB[7]                  =  cb7;                                      \
N  ptr_cbw->CB[8]                  =  cb8;                                      \
N  ptr_cbw->CB[9]                  =  cb9;                                      \
N  ptr_cbw->CB[10]                 =  cb10;                                     \
N  ptr_cbw->CB[11]                 =  cb11;                                     \
N  ptr_cbw->CB[12]                 =  cb12;                                     \
N  ptr_cbw->CB[13]                 =  cb13;                                     \
N  ptr_cbw->CB[14]                 =  cb14;                                     \
N  ptr_cbw->CB[15]                 =  cb15;
X#define PREPARE_MSC_CBW(ptr_cbw, sig, tag, len, flg, lun, cb_len, cb0, cb1, cb2, cb3, cb4, cb5, cb6, cb7, cb8, cb9, cb10, cb11, cb12, cb13, cb14, cb15)  ptr_cbw->dSignature             =  U32_LE(sig);                                ptr_cbw->dTag                   =  U32_LE(++tag);                              ptr_cbw->dDataLength            =  len;                                        ptr_cbw->bmFlags                =  flg;                                        ptr_cbw->bLUN                   =  lun;                                        ptr_cbw->bCBLength              =  cb_len;                                     ptr_cbw->CB[0]                  =  cb0;                                        ptr_cbw->CB[1]                  =  cb1;                                        ptr_cbw->CB[2]                  =  cb2;                                        ptr_cbw->CB[3]                  =  cb3;                                        ptr_cbw->CB[4]                  =  cb4;                                        ptr_cbw->CB[5]                  =  cb5;                                        ptr_cbw->CB[6]                  =  cb6;                                        ptr_cbw->CB[7]                  =  cb7;                                        ptr_cbw->CB[8]                  =  cb8;                                        ptr_cbw->CB[9]                  =  cb9;                                        ptr_cbw->CB[10]                 =  cb10;                                       ptr_cbw->CB[11]                 =  cb11;                                       ptr_cbw->CB[12]                 =  cb12;                                       ptr_cbw->CB[13]                 =  cb13;                                       ptr_cbw->CB[14]                 =  cb14;                                       ptr_cbw->CB[15]                 =  cb15;
N
N/************************* Structures *****************************************/
N
Ntypedef volatile struct {               /* USB Request Block (URB)            */
N  U8          *ptrDataBuffer;           /* Pointer to Data Buffer             */
N  U8          *ptrCurrentDataBuffer;    /* Pointer to Current pos in Data Buff*/
N  U32          DataLength;              /* Data Length                        */
N  U32          DataTransferred;         /* Data Transferred                   */
N  union {
N    U32        Parameters;              /* Transfer Parameters                */
N    struct {
N      U32      PacketType        :  4;  /* Packet Type                        */
N      U32      ToggleBit         :  1;  /* Toggle Bit Value                   */
N      U32      ToggleForce       :  1;  /* Toggle Bit Forced (if cleared     
N                                           ToggleBit value is ignored)        */
N    };
N  };
N  union {
N    U32        Status;                  /* Status                             */
N    struct {
N      U32      Submitted         :  1;  /* URB Submit Status                  */
N      U32      InProgress        :  1;  /* URB Processing In Progress Status  */
N      U32      Cancelled         :  1;  /* URB Cancel Status                  */
N      U32      Completed         :  1;  /* URB Completition Status            */
N      U32      Timeout           :  1;  /* URB Timeout Status                 */
N      U32      ResponsePacketType:  4;  /* Response Packet Type               */
N      U32      Reserved          :  7;  /* Reserved bits to reposition other  */
N      U32      Error             :  8;  /* URB Error        Status            */
N    };
N  };
N  U32          NAKRetries;              /* Number of NAK retries              */
N  U32          TimeoutCount;            /* Transaction Timeout Counter        */
N  void       (*CompletedCallback)(void);/* URB Completition Callback Function */
N} USBH_URB;
N
Ntypedef __packed struct {               /* Endpoint settings structure        */
N  U32          Handle;                  /* Handle to Endpoint                 */
N  __packed union {
N    U32 Para;                           /* Endpoint parameters                */
N    __packed struct {
N      U8       Address           : 8;   /* Endpoint communication address     */
N      U8       Speed             : 8;   /* Endpoint communication speed       */
N    };
N  };
N  USB_ENDPOINT_DESCRIPTOR Descriptor;   /* Endpoint Descriptor                */
N} USBH_EP;
N
Ntypedef struct {                        /* Host Controller Driver Capabilities*/
N  union {
N    struct {
N      U32      MultiPckt;               /* Multiple data packet handling      */
N    };
N  };
N  U32          MaxDataSz;               /* Maximum data that can be handled   */
N  U32          CtrlNAKs;                /* Number of NAKs for ctrl endpoints  */
N  U32          BulkNAKs;                /* Number of NAKs for bulk endpoints  */
N} USBH_HCI_CAP;
N
Ntypedef struct {                        /* Host Controller Instance structure */
N  USBH_HCI_CAP Cap;                     /* Host Ctrl Driver Inst Capabilities */
N  U32          PortCon;                 /* Port connected map                 */
N  U8           LastDevAdr;              /* Last addressed device address      */
N  USBH_EP      EP0;                     /* Endpoint 0                         */
N  U32          LastError;               /* Last Error                         */
N} USBH_HCI;
N
Ntypedef struct {                        /* Mass Storage Data Structure        */
N  U8           DoPing;                  /* Do Ping on next Out Packet         */
N  USBH_EP      BulkInEP;                /* Bulk In Endpoint                   */
N  USBH_EP      BulkOutEP;               /* Bulk Out Endpoint                  */
N  U8           MaxLUN;                  /* Maximum Logical Units              */
N  U32          Tag;                     /* Tag Command/Data/Status Protocol   */
N} USBH_MSC;
N
Ntypedef struct {                        /* HID Data Structure                 */
N  USBH_URB     IntUrb;                  /* Interrupt URB                      */
N  USBH_EP      IntInEP;                 /* Interrupt In Endpoint              */
N  USBH_EP      IntOutEP;                /* Interrupt Out Endpoint             */
N  U8           SubClass;                /* SubClass                           */
N  U8           ReportDescTyp;           /* Report Descriptor Type             */
N  U16          ReportDescLen;           /* Report Descriptor Length           */
N  U8           ReportInPos;             /* Report Input Data Position         */
N  U8           ReportInDataBuf[8];      /* Report Input Data Buffer           */
N  U8           ReportInDataBufEx[8];    /* Report Input Data Buffer Last      */
N  struct {
N    U8         ReportInReceived  : 1;   /* New Report In Received             */
N  };
N} USBH_HID;
N
Ntypedef struct {                        /* Device Class Instance structure    */
N  U8           Protocol;                /* Class Protocol                     */
N  U8           Port;                    /* Device Address                     */
N  U8           Address;                 /* Device Address                     */
N  U8           Speed;                   /* Device Speed                       */ 
N  struct {
N    U8         Config            : 1;   /* Device Configured Status           */
N    U8         Init              : 1;   /* Device Initialized Status          */
N  };
N  U32          LastError;               /* Last Error                         */
N  union {
N    USBH_MSC  *ptrMSC;                  /* Pointer to MSC Device structure    */
N    USBH_HID  *ptrHID;                  /* Pointer to HID Device structure    */
N    void      *ptrCLS;                  /* Pointer to USB Device Class struct */
N  };
N} USBH_DCI;
N
Ntypedef struct {                        /* Host Controller Driver structure   */
N  void       (*get_capabilities) (USBH_HCI_CAP *cap); /* Get Drv Capabilities */
N  void       (*delay_ms        ) (U32  ms);   /* Delay in ms                  */
N  BOOL       (*pins_config     ) (BOOL on);   /* Config/Unconfig pins         */
N  BOOL       (*init            ) (BOOL on);   /* Init/Uninit Host Controller  */
N  BOOL       (*port_power      ) (BOOL on);   /* On/Off Port Power            */
N  BOOL       (*port_reset      ) (U8   port); /* Reset Port                   */
N  U32        (*get_connect     ) (void);      /* Get port conn/disconn status */
N  U32        (*get_speed       ) (void);      /* Get port enumerated speed    */
N  U32        (*ep_add          ) (            U8 dev_adr, U8 ep_spd, USB_ENDPOINT_DESCRIPTOR *ptr_epd);
N  BOOL       (*ep_config       ) (U32  hndl,  U8 dev_adr, U8 ep_spd, USB_ENDPOINT_DESCRIPTOR *ptr_epd);
N  BOOL       (*ep_remove       ) (U32  hndl);
N  BOOL       (*urb_submit      ) (U32  hndl,  USBH_URB *ptr_urb);
N  BOOL       (*urb_cancel      ) (U32  hndl,  USBH_URB *ptr_urb);
N} USBH_HCD;
N
Ntypedef struct {                        /* OHCI Compliant Hw Driver structure */
N  U32          Ports;                   /* Ports (bits 0..15)                 */
N  U16          MaxED;                   /* Maximum Endpoint Descriptors       */
N  U16          MaxTD;                   /* Maximum Transfer Descriptors       */
N  U16          MaxITD;                  /* Maximum Iso Transfer Descriptors   */
N  U32         *PtrHCCA;                 /* Pointer to HCCA memory start       */
N  U32         *PtrED;                   /* Pointer to ED memory start         */
N  U32         *PtrTD;                   /* Pointer to TD memory start         */
N  U32         *PtrITD;                  /* Pointer to ITD memory start        */
N  U32         *PtrTDURB;                /* Pointer to TDURB memory start      */
N  void       (*get_capabilities) (USBH_HCI_CAP *cap); /* Get Drv Capabilities */
N  void       (*delay_ms        ) (U32  ms);   /* Delay in ms                  */
N  void       (*reg_wr          ) (U32  reg_ofs, U32 val);   /* Write register */
N  U32        (*reg_rd          ) (U32  reg_ofs);            /* Read register  */
N  BOOL       (*pins_config     ) (BOOL on);   /* Config/Unconfig pins         */
N  BOOL       (*init            ) (BOOL on);   /* Init/Uninit Host Controller  */
N  BOOL       (*port_power      ) (U32  on);   /* On/Off Port Power            */
N  BOOL       (*irq_en          ) (BOOL on);   /* Enable/Disable interrupt     */
N} USBH_HWD_OHCI;
N
Ntypedef struct {                        /* EHCI Compliant Hw Driver structure */
N  U32          Ports;                   /* Ports (bits 0..15)                 */
N  U16          Max_qH;                  /* Maximum Queue Heads                */
N  U16          Max_qTD;                 /* Maximum Queue Transfer Descriptors */
N  U16          Max_iTD;                 /* Maximum Iso Transfer Descriptors   */
N  U16          Max_siTD;                /* Maximum Split Iso Transfer Descs   */
N  U16          Max_FSTN;                /* Maximum Peri Frame Span Trav Nodes */
N  U32         *Ptr_PFL;                 /* Pointer to Periodic Frame List mem */
N  U32         *Ptr_qH;                  /* Pointer to qH memory start         */
N  U32         *Ptr_qTD;                 /* Pointer to qTD memory start        */
N  U32         *Ptr_iTD;                 /* Pointer to iTD memory start        */
N  U32         *Ptr_siTD;                /* Pointer to siTD memory start       */
N  U32         *Ptr_FSTN;                /* Pointer to FSTN memory start       */
N  U32         *Ptr_qTDURB;              /* Pointer to qTDURB memory start     */
N  void       (*get_capabilities) (USBH_HCI_CAP *cap); /* Get Drv Capabilities */
N  void       (*delay_ms        ) (U32  ms);   /* Delay in ms                  */
N  void       (*reg_wr          ) (U32  reg_ofs, U32 val);   /* Write register */
N  U32        (*reg_rd          ) (U32  reg_ofs);            /* Read register  */
N  BOOL       (*pins_config     ) (BOOL on);   /* Config/Unconfig pins         */
N  BOOL       (*init            ) (BOOL on);   /* Init/Uninit Host Controller  */
N  BOOL       (*port_power      ) (U32  on);   /* On/Off Port Power            */
N  BOOL       (*irq_en          ) (BOOL on);   /* Enable/Disable interrupt     */
N} USBH_HWD_EHCI;
N
Ntypedef struct {                        /* Device Class Driver structure      */
N  U8           ClassID;
N  U8         (*config          ) (U8 ctrl, U8 port, U8 spd, U8 adr, USB_CONFIGURATION_DESCRIPTOR *ptr_cfg_desc);
N  BOOL       (*unconfig        ) (U8 ctrl, U8 dev_idx);
N  BOOL       (*init            ) (U8 ctrl, U8 dev_idx);
N  BOOL       (*uninit          ) (U8 ctrl, U8 dev_idx);
N  U32        (*get_last_error  ) (U8 ctrl, U8 dev_idx);
N} USBH_DCD;
N
N
N/************************* Exported Functions *********************************/
N
Nextern BOOL USBH_Send_Setup      (U8 ctrl, U8 *ptr_data);
Nextern BOOL USBH_Send_Data       (U8 ctrl, U8 *ptr_data, U16 data_len);
Nextern BOOL USBH_Rece_Data       (U8 ctrl, U8 *ptr_data, U16 data_len);
N
Nextern BOOL USBH_GetStatus       (U8 ctrl, U8  rcpnt, U8 idx, U8 *stat_dat);
Nextern BOOL USBH_ClearFeature    (U8 ctrl, U8  rcpnt, U8 idx, U8  feat_sel);
Nextern BOOL USBH_SetFeature      (U8 ctrl, U8  rcpnt, U8 idx, U8  feat_sel);
Nextern BOOL USBH_SetAddress      (U8 ctrl, U8  dev_adr);
Nextern BOOL USBH_GetDescriptor   (U8 ctrl, U8  rcpnt, U8 desc_typ, U8 desc_idx, U8 lang_id, U8 *desc_dat, U16 desc_len);
Nextern BOOL USBH_SetDescriptor   (U8 ctrl, U8  rcpnt, U8 desc_typ, U8 desc_idx, U8 lang_id, U8 *desc_dat, U16 desc_len);
Nextern BOOL USBH_GetConfiguration(U8 ctrl, U8 *cfg_dat);
Nextern BOOL USBH_SetConfiguration(U8 ctrl, U8  cfg_val);
Nextern BOOL USBH_GetInterface    (U8 ctrl, U8  idx, U8 *alt_dat);
Nextern BOOL USBH_SetInterface    (U8 ctrl, U8  idx, U8  alt_set);
Nextern BOOL USBH_SyncFrame       (U8 ctrl, U8  idx, U8 *frm_num);
N
N
N#pragma no_anon_unions
N
N#endif  /* __USBH_H__ */
L 40 "D:\Keil_v5\ARM\ARMCC\Bin\..\include\..\..\RL\USB\INC\usb.h" 2
N
N#endif  /* __USB_H__ */
L 21 "D:\Keil_v5\ARM\RV31\INC\rl_usb.h" 2
N
N/*****************  Functions *************************************************/
N
N/* USB Host functions exported from USB Host Core module                      */
Nextern BOOL  usbh_mem_init              (U8 ctrl, U32 *ptr_pool, U32 pool_sz);
Nextern BOOL  usbh_mem_alloc             (U8 ctrl, U8 **ptr, U32 sz);
Nextern BOOL  usbh_mem_free              (U8 ctrl, U8  *ptr);
Nextern BOOL  usbh_transfer              (U8 ctrl, USBH_EP *ptr_ep, USBH_URB *ptr_urb, U16 tout);
Nextern BOOL  usbh_init                  (U8 ctrl);
Nextern BOOL  usbh_init_all              (void);
Nextern BOOL  usbh_uninit                (U8 ctrl);
Nextern BOOL  usbh_uninit_all            (void);
Nextern BOOL  usbh_engine                (U8 ctrl);
Nextern BOOL  usbh_engine_all            (void);
Nextern U32   usbh_get_last_error        (U8 ctrl);
Nextern U8   *usbh_get_error_string      (U32 err);
N
N/* USB Host functions exported from USB Mass Storage Class module             */
Nextern BOOL  usbh_msc_status            (U8 ctrl, U8 dev_idx);
Nextern BOOL  usbh_msc_read              (U8 ctrl, U8 dev_idx, U32  blk_adr, U8 *ptr_data, U16 blk_num);
Nextern BOOL  usbh_msc_write             (U8 ctrl, U8 dev_idx, U32  blk_adr, U8 *ptr_data, U16 blk_num);
Nextern BOOL  usbh_msc_read_config       (U8 ctrl, U8 dev_idx, U32 *tot_blk_num, U32 *blk_sz);
Nextern U32   usbh_msc_get_last_error    (U8 ctrl, U8 dev_idx);
N
N/* USB Host functions exported from USB Human Interface Device Class module   */
Nextern BOOL  usbh_hid_status            (U8 ctrl, U8 dev_idx);
Nextern int   usbh_hid_data_in           (U8 ctrl, U8 dev_idx, U8  *ptr_data);
Nextern int   usbh_hid_data_out          (U8 ctrl, U8 dev_idx, U8  *ptr_data, U16 data_len);
Nextern U32   usbh_hid_get_last_error    (U8 ctrl, U8 dev_idx);
N/* Overridable functions                                                      */
Nextern void  usbh_hid_parse_report_desc (U8 ctrl, U8 dev_idx, U8  *ptrHIDReportDesc);
Nextern void  usbh_hid_data_in_callback  (U8 ctrl, U8 dev_idx, U8  *ptr_data, U16 data_len);
Nextern int   usbh_hid_kbd_getkey        (U8 ctrl, U8 dev_idx);  
Nextern BOOL  usbh_hid_mouse_getdata     (U8 ctrl, U8 dev_idx, U8  *btn, S8 *x, S8 *y, S8 *wheel);
N
N/* USB Device functions exported from USB Device Core module                  */
Nextern void  usbd_init                  (void);
Nextern void  usbd_connect               (BOOL con);
Nextern void  usbd_reset_core            (void);
Nextern BOOL  usbd_configured            (void);
N
N/* USB Device user functions imported to USB HID Class module                 */
Nextern void  usbd_hid_init              (void);
Nextern BOOL  usbd_hid_get_report_trigger(U8 rid,   U8 *buf, int len);
Nextern int   usbd_hid_get_report        (U8 rtype, U8 rid, U8 *buf, U8  req);
Nextern void  usbd_hid_set_report        (U8 rtype, U8 rid, U8 *buf, int len, U8 req);
Nextern U8    usbd_hid_get_protocol      (void);
Nextern void  usbd_hid_set_protocol      (U8 protocol);
N
N/* USB Device user functions imported to USB Mass Storage Class module        */
Nextern void  usbd_msc_init              (void);
Nextern void  usbd_msc_read_sect         (U32 block, U8 *buf, U32 num_of_blocks);
Nextern void  usbd_msc_write_sect        (U32 block, U8 *buf, U32 num_of_blocks);
Nextern void  usbd_msc_start_stop        (BOOL start);
N
N/* USB Device user functions imported to USB Audio Class module               */
Nextern void  usbd_adc_init              (void);
N
N/* USB Device CDC ACM class functions called automatically by USBD Core module*/
Nextern int32_t  USBD_CDC_ACM_Initialize                (void);
Nextern int32_t  USBD_CDC_ACM_Uninitialize              (void);
Nextern int32_t  USBD_CDC_ACM_Reset                     (void);
N/* USB Device CDC ACM class user functions                                    */
Nextern int32_t  USBD_CDC_ACM_PortInitialize            (void);
Nextern int32_t  USBD_CDC_ACM_PortUninitialize          (void);
Nextern int32_t  USBD_CDC_ACM_PortReset                 (void);
Nextern int32_t  USBD_CDC_ACM_PortSetLineCoding         (CDC_LINE_CODING *line_coding);
Nextern int32_t  USBD_CDC_ACM_PortGetLineCoding         (CDC_LINE_CODING *line_coding);
Nextern int32_t  USBD_CDC_ACM_PortSetControlLineState   (uint16_t ctrl_bmp);
Nextern int32_t  USBD_CDC_ACM_DataSend                  (const uint8_t *buf, int32_t len);
Nextern int32_t  USBD_CDC_ACM_PutChar                   (const uint8_t  ch);
Nextern int32_t  USBD_CDC_ACM_DataRead                  (      uint8_t *buf, int32_t len);
Nextern int32_t  USBD_CDC_ACM_GetChar                   (void);
Nextern int32_t  USBD_CDC_ACM_DataAvailable             (void);
Nextern int32_t  USBD_CDC_ACM_Notify                    (uint16_t stat);
N/* USB Device CDC ACM class overridable functions                             */
Nextern int32_t  USBD_CDC_ACM_SendEncapsulatedCommand   (void);
Nextern int32_t  USBD_CDC_ACM_GetEncapsulatedResponse   (void);
Nextern int32_t  USBD_CDC_ACM_SetCommFeature            (uint16_t feat);
Nextern int32_t  USBD_CDC_ACM_GetCommFeature            (uint16_t feat);
Nextern int32_t  USBD_CDC_ACM_ClearCommFeature          (uint16_t feat);
Nextern int32_t  USBD_CDC_ACM_SetLineCoding             (void);
Nextern int32_t  USBD_CDC_ACM_GetLineCoding             (void);
Nextern int32_t  USBD_CDC_ACM_SetControlLineState       (uint16_t ctrl_bmp);
Nextern int32_t  USBD_CDC_ACM_SendBreak                 (uint16_t dur);
N
N/* USB Device user functions imported to USB Custom Class module              */
Nextern void  usbd_cls_init              (void);
Nextern void  usbd_cls_sof               (void);
Nextern BOOL  usbd_cls_dev_req           (BOOL setup);
Nextern BOOL  usbd_cls_if_req            (BOOL setup);
Nextern BOOL  usbd_cls_ep_req            (BOOL setup);
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif  /* __RL_USB_H__ */
L 14 "D:\Keil_v5\ARM\RV31\INC\usb_lib.c" 2
N#include <..\..\RL\USB\INC\usb.h>
N
N#pragma thumb
N#pragma O3
N
N
N/*------------------------------------------------------------------------------
N *      Library for usb_config.c
N *----------------------------------------------------------------------------*/
N
N#ifdef  __USB_CONFIG__
N
N
N/*------------------------------------------------------------------------------
N *      USB Host Configuration
N *----------------------------------------------------------------------------*/
N
N#if    (USBH0_ENABLE || USBH1_ENABLE)
X#if    (0 || 0)
S                                        /* Prepare constants                  */
S#define USBH_HC_NUM       (1 + USBH1_ENABLE)
S#define USBH_HC_MSK       (((USBH1_ENABLE & 1) << 1) | (USBH0_ENABLE & 1))
S#define USBH_OHCI_NUM     (1 + (USBH1_ENABLE * (USBH1_HC_IF == 1)))
S#define USBH_EHCI_NXP_NUM (1 + (USBH1_ENABLE * (USBH1_HC_IF == 2)))
S#define USBH_DCD_NUM      (((USBH_CLASS & 0x01) == 0x01) + ((USBH_CLASS & 0x02) == 0x02) + ((USBH_CLASS & 0x04) == 0x04))
S
S#if    (USBH0_ENABLE)
S#if    (USBH0_HC_IF == 1)
Sextern  USBH_HCD         usbh0_hcd_ohci;
Sextern  USBH_HWD_OHCI    usbh0_hwd_ohci;
S#define USBH0_HCD       &usbh0_hcd_ohci
S#define USBH0_HWD_OHCI  &usbh0_hwd_ohci
S#elif  (USBH0_HC_IF == 2)
Sextern  USBH_HCD         usbh0_hcd_ehci_NXP;
Sextern  USBH_HWD_EHCI    usbh0_hwd_ehci_NXP;
S#define USBH0_HCD       &usbh0_hcd_ehci_NXP
S#define USBH0_HWD_EHCI  &usbh0_hwd_ehci_NXP
S#else
Sextern  USBH_HCD         usbh0_hcd;
S#define USBH0_HCD       &usbh0_hcd
S#endif
S#else
S#define USBH0_HCD        NULL
S#endif
S
S#if    (USBH1_ENABLE)
S#if    (USBH1_HC_IF == 1)
Sextern  USBH_HCD         usbh1_hcd_ohci;
Sextern  USBH1_HWD_OHCI   usbh1_hwd_ohci;
S#define USBH1_HCD       &usbh1_hcd_ohci
S#define USBH1_HWD_OHCI  &usbh1_hwd_ohci
S#elif  (USBH1_HC_IF == 2)
Sextern  USBH_HCD         usbh1_hcd_ehci_NXP;
Sextern  USBH_HWD_EHCI    usbh1_hwd_ehci_NXP;
S#define USBH1_HCD       &usbh1_hcd_ehci_NXP
S#define USBH1_HWD_EHCI  &usbh1_hwd_ehci_NXP
S#else
Sextern  USBH_HCD         usbh1_hcd;
S#define USBH1_HCD       &usbh1_hcd
S#endif
S#else
S#define USBH1_HCD        NULL
S#endif
S
S                                        /* Define constants                   */
Sconst U8  usbh_hc_num          = USBH_HC_NUM;
Sconst U8  usbh_hc_msk          = USBH_HC_MSK;
Sconst U8  usbh_ohci_num        = USBH_OHCI_NUM;
Sconst U8  usbh_ehci_NXP_num    = USBH_EHCI_NXP_NUM;
Sconst U8  usbh_dcd_num         = USBH_DCD_NUM;
Sconst U8  usbh_msc_num         = USBH_MSC_NUM;
Sconst U8  usbh_hid_num         = USBH_HID_NUM;
Sconst U8  usbh_cls_num         = USBH_CLS_NUM;
S
S                                        /* Register Drivers                   */
SUSBH_HCD *usbh_hcd_ptr[USBH_HC_NUM] = { /* Register Host Controller Drivers   */
S#if    (USBH0_ENABLE)
S                         USBH0_HCD,
S#else
S                         NULL,
S#endif
S#if    (USBH1_ENABLE)
S                         USBH1_HCD   
S#endif
S                       };
S
S#if   ((USBH0_ENABLE && (USBH0_HC_IF == 1)) || (USBH1_ENABLE && (USBH1_HC_IF == 1)))
SUSBH_HWD_OHCI *usbh_hwd_ohci_ptr[USBH_OHCI_NUM] = { /* Register OHCI Hw Driver*/
S#if    (USBH0_ENABLE && (USBH0_HC_IF == 1))
S                         USBH0_HWD_OHCI,
S#else
S                         NULL,
S#endif
S#if    (USBH1_ENABLE && (USBH1_HC_IF == 1))
S                         USBH1_HWD_OHCI   
S#endif
S                       };
S#endif
S
S#if   ((USBH0_ENABLE && (USBH0_HC_IF == 2)) || (USBH1_ENABLE && (USBH1_HC_IF == 2)))
S                                        /* Register NXP EHCI Hw Driver        */
SUSBH_HWD_EHCI *usbh_hwd_ehci_NXP_ptr[USBH_EHCI_NXP_NUM] = { 
S#if    (USBH0_ENABLE && (USBH0_HC_IF == 2))
S                         USBH0_HWD_EHCI,
S#else
S                         NULL,
S#endif
S#if    (USBH1_ENABLE && (USBH1_HC_IF == 2))
S                         USBH1_HWD_EHCI   
S#endif
S                       };
S#endif
S
S#if    (USBH_CLASS & 0x01) && (USBH_MSC_NUM)
Sextern  USBH_DCD         usbh_dcd_msc;
S#endif
S#if    (USBH_CLASS & 0x02) && (USBH_HID_NUM)
Sextern  USBH_DCD         usbh_dcd_hid;
S#endif
S#if    (USBH_CLASS & 0x04) && (USBH_CLS_NUM)
Sextern  USBH_DCD         usbh_dcd_cls;
S#endif
SUSBH_DCD *usbh_dcd_ptr[USBH_DCD_NUM] = {/* Register Class Drivers             */
S#if    (USBH_CLASS & 0x01) && (USBH_MSC_NUM)
S                        &usbh_dcd_msc,
S#endif
S#if    (USBH_CLASS & 0x02) && (USBH_HID_NUM)
S                        &usbh_dcd_hid,
S#endif
S#if    (USBH_CLASS & 0x04) && (USBH_CLS_NUM)
S                        &usbh_dcd_cls,
S#endif
S                      };
S
SUSBH_HCI usbh_hci    [USBH_HC_NUM]  = { 0 };
S#if    (USBH_CLASS & 0x01) && (USBH_MSC_NUM)
SUSBH_DCI usbh_dci_msc[USBH_HC_NUM * USBH_MSC_NUM] = { 0 };
SUSBH_MSC usbh_msc    [USBH_HC_NUM * USBH_MSC_NUM] = { 0 };
S#endif
S#if    (USBH_CLASS & 0x02) && (USBH_HID_NUM)
SUSBH_DCI usbh_dci_hid[USBH_HC_NUM * USBH_HID_NUM] = { 0 };
SUSBH_HID usbh_hid    [USBH_HC_NUM * USBH_HID_NUM] = { 0 };
S#endif
S#if    (USBH_CLASS & 0x04) && (USBH_CLS_NUM)
SUSBH_DCI usbh_dci_cls[USBH_HC_NUM * USBH_CLS_NUM] = { 0 };
SUSBH_HID usbh_cls    [USBH_HC_NUM * USBH_CLS_NUM] = { 0 };
S#endif
S
SUSBH_DCI *usbh_dci_ptr[3] = {
S#if    (USBH_CLASS & 0x01) && (USBH_MSC_NUM)
S  usbh_dci_msc,
S#else
S  NULL,
S#endif
S#if    (USBH_CLASS & 0x02) && (USBH_HID_NUM)
S  usbh_dci_hid,
S#else
S  NULL,
S#endif
S#if    (USBH_CLASS & 0x04) && (USBH_CLS_NUM)
S  usbh_dci_cls,
S#else
S  NULL,
S#endif
S};
N#endif
N
N
N/*------------------------------------------------------------------------------
N *      USB Device Configuration
N *----------------------------------------------------------------------------*/
N
N#if    (USBD_ENABLE)
X#if    (1)
N
N        U8   USBD_AltSetting[USBD_IF_NUM];
X        U8   USBD_AltSetting[(1+0+(0*2)+(1*2)+0)];
N        U8   USBD_EP0Buf    [USBD_MAX_PACKET0];
X        U8   USBD_EP0Buf    [64];
Nconst   U8   usbd_power                 =  USBD_POWER;
Xconst   U8   usbd_power                 =  0;
Nconst   U8   usbd_hs_enable             =  USBD_HS_ENABLE;
Xconst   U8   usbd_hs_enable             =  0;
Nconst   U16  usbd_if_num                =  USBD_IF_NUM;
Xconst   U16  usbd_if_num                =  (1+0+(0*2)+(1*2)+0);
Nconst   U8   usbd_ep_num                =  USBD_EP_NUM;
Xconst   U8   usbd_ep_num                =  (((((((((((1 *(3 ))) < ((1 *(3!=0)*(3)))) ? ((1 *(3!=0)*(3))) : ((1 *(3 ))))) < (((((0 *(2 ))) < ((0 *(2)))) ? ((0 *(2))) : ((0 *(2 )))))) ? (((((0 *(2 ))) < ((0 *(2)))) ? ((0 *(2))) : ((0 *(2 ))))) : (((((1 *(3 ))) < ((1 *(3!=0)*(3)))) ? ((1 *(3!=0)*(3))) : ((1 *(3 ))))))) < ((((((((0 *(3 ))) < ((1*(1)))) ? ((1*(1))) : ((0 *(3 ))))) < (((((1*(2))) < ((1*(2)))) ? ((1*(2))) : ((1*(2)))))) ? (((((1*(2))) < ((1*(2)))) ? ((1*(2))) : ((1*(2))))) : (((((0 *(3 ))) < ((1*(1)))) ? ((1*(1))) : ((0 *(3 )))))))) ? ((((((((0 *(3 ))) < ((1*(1)))) ? ((1*(1))) : ((0 *(3 ))))) < (((((1*(2))) < ((1*(2)))) ? ((1*(2))) : ((1*(2)))))) ? (((((1*(2))) < ((1*(2)))) ? ((1*(2))) : ((1*(2))))) : (((((0 *(3 ))) < ((1*(1)))) ? ((1*(1))) : ((0 *(3 ))))))) : ((((((((1 *(3 ))) < ((1 *(3!=0)*(3)))) ? ((1 *(3!=0)*(3))) : ((1 *(3 ))))) < (((((0 *(2 ))) < ((0 *(2)))) ? ((0 *(2))) : ((0 *(2 )))))) ? (((((0 *(2 ))) < ((0 *(2)))) ? ((0 *(2))) : ((0 *(2 ))))) : (((((1 *(3 ))) < ((1 *(3!=0)*(3)))) ? ((1 *(3!=0)*(3))) : ((1 *(3 )))))))));
Nconst   U8   usbd_max_packet0           =  USBD_MAX_PACKET0;
Xconst   U8   usbd_max_packet0           =  64;
N
N
N/*------------------------------------------------------------------------------
N *      USB Device Class Configuration
N *----------------------------------------------------------------------------*/
N
N#if    (!USBD_HID_BINTERVAL)
X#if    (!1)
S  #define USBD_HID_INTERVAL                1
N#else
N  #define USBD_HID_INTERVAL                USBD_HID_BINTERVAL
N#endif
N#if    (!USBD_HID_HS_BINTERVAL)
X#if    (!6)
S  #define USBD_HID_HS_INTERVAL             1
N#else
N  #define USBD_HID_HS_INTERVAL            (2 << ((USBD_HID_HS_BINTERVAL & 0x0F)-1))
N#endif
N
N#if    (USBD_HID_ENABLE)
X#if    (1)
Nconst   U8   usbd_hid_if_num            =  USBD_HID_IF_NUM;
Xconst   U8   usbd_hid_if_num            =  (0 * 2 + 1 * 2);
Nconst   U8   usbd_hid_ep_intin          =  USBD_HID_EP_INTIN;
Xconst   U8   usbd_hid_ep_intin          =  3;
Nconst   U8   usbd_hid_ep_intout         =  USBD_HID_EP_INTOUT;
Xconst   U8   usbd_hid_ep_intout         =  3;
Nconst   U16  usbd_hid_interval     [2]  = {USBD_HID_INTERVAL,       USBD_HID_HS_INTERVAL};
Xconst   U16  usbd_hid_interval     [2]  = {1,       (2 << ((6 & 0x0F)-1))};
Nconst   U16  usbd_hid_maxpacketsize[2]  = {USBD_HID_WMAXPACKETSIZE, USBD_HID_HS_WMAXPACKETSIZE};
Xconst   U16  usbd_hid_maxpacketsize[2]  = {64, 4};
Nconst   U8   usbd_hid_inreport_num      =  USBD_HID_INREPORT_NUM;
Xconst   U8   usbd_hid_inreport_num      =  1;
Nconst   U8   usbd_hid_outreport_num     =  USBD_HID_OUTREPORT_NUM;
Xconst   U8   usbd_hid_outreport_num     =  1;
Nconst   U16  usbd_hid_inreport_max_sz   =  USBD_HID_INREPORT_MAX_SZ;
Xconst   U16  usbd_hid_inreport_max_sz   =  64;
Nconst   U16  usbd_hid_outreport_max_sz  =  USBD_HID_OUTREPORT_MAX_SZ;
Xconst   U16  usbd_hid_outreport_max_sz  =  64;
Nconst   U16  usbd_hid_featreport_max_sz =  USBD_HID_FEATREPORT_MAX_SZ;
Xconst   U16  usbd_hid_featreport_max_sz =  1;
N        U16  USBD_HID_PollingCnt;
N        U8   USBD_HID_IdleCnt             [USBD_HID_INREPORT_NUM];
X        U8   USBD_HID_IdleCnt             [1];
N        U8   USBD_HID_IdleReload          [USBD_HID_INREPORT_NUM];
X        U8   USBD_HID_IdleReload          [1];
N        U8   USBD_HID_IdleSet             [USBD_HID_INREPORT_NUM];
X        U8   USBD_HID_IdleSet             [1];
N        U8   USBD_HID_InReport            [USBD_HID_INREPORT_MAX_SZ+1];
X        U8   USBD_HID_InReport            [64+1];
N        U8   USBD_HID_OutReport           [USBD_HID_OUTREPORT_MAX_SZ+1];
X        U8   USBD_HID_OutReport           [64+1];
N        U8   USBD_HID_FeatReport          [USBD_HID_FEATREPORT_MAX_SZ+1];
X        U8   USBD_HID_FeatReport          [1+1];
N#endif
N
N#if    (USBD_MSC_ENABLE)
X#if    (0)
Sconst   U8   usbd_msc_if_num            =  USBD_MSC_IF_NUM;
Sconst   U8   usbd_msc_ep_bulkin         =  USBD_MSC_EP_BULKIN;
Sconst   U8   usbd_msc_ep_bulkout        =  USBD_MSC_EP_BULKOUT;
Sconst   U16  usbd_msc_maxpacketsize[2]  = {USBD_MSC_WMAXPACKETSIZE, USBD_MSC_HS_WMAXPACKETSIZE};
Sconst   U8  *usbd_msc_inquiry_data      =  USBD_MSC_INQUIRY_DATA;
S        U8   USBD_MSC_BulkBuf             [USBD_MSC_MAX_PACKET*USBD_MSC_ENABLE];
N#endif
N
N#if    (USBD_ADC_ENABLE)
X#if    (0)
Sconst   U8   usbd_adc_cif_num           =  USBD_ADC_CIF_NUM;
Sconst   U8   usbd_adc_sif1_num          =  USBD_ADC_SIF1_NUM;
Sconst   U8   usbd_adc_sif2_num          =  USBD_ADC_SIF2_NUM;
Sconst   U8   usbd_adc_ep_isoout         =  USBD_ADC_EP_ISOOUT;
Sconst   U32  usbd_adc_cfg_datafreq      =  USBD_ADC_TSAMFREQ;
Sconst   U32  usbd_adc_cfg_p_s           =  USBD_ADC_CFG_P_S;
Sconst   U32  usbd_adc_cfg_p_c           =  USBD_ADC_CFG_P_C;
Sconst   U32  usbd_adc_cfg_b_s           =  (8*USBD_ADC_CFG_P_C*USBD_ADC_CFG_P_S);
S        S16  USBD_ADC_DataBuf              [8*USBD_ADC_CFG_P_C*USBD_ADC_CFG_P_S];
N#endif
N
N#ifndef USBD_CDC_ACM_ENABLE
S#if    (USBD_CDC_ENABLE == 1)
S#error "Please update usb_config.c file with new definitions for CDC, as new CDC is incompatible with the old one!"
S#else
S#define USBD_CDC_ACM_ENABLE  0
S#endif
N#endif
N
N#if    (USBD_CDC_ACM_ENABLE)
X#if    (1)
Nconst   U8   usbd_cdc_acm_cif_num       =  USBD_CDC_ACM_CIF_NUM;
Xconst   U8   usbd_cdc_acm_cif_num       =  (0 * 2 + 0);
Nconst   U8   usbd_cdc_acm_dif_num       =  USBD_CDC_ACM_DIF_NUM;
Xconst   U8   usbd_cdc_acm_dif_num       =  (0 * 2 + 1);
Nconst   U8   usbd_cdc_acm_ep_intin      =  USBD_CDC_ACM_EP_INTIN;
Xconst   U8   usbd_cdc_acm_ep_intin      =  1;
Nconst   U8   usbd_cdc_acm_ep_bulkin     =  USBD_CDC_ACM_EP_BULKIN;
Xconst   U8   usbd_cdc_acm_ep_bulkin     =  2;
Nconst   U8   usbd_cdc_acm_ep_bulkout    =  USBD_CDC_ACM_EP_BULKOUT;
Xconst   U8   usbd_cdc_acm_ep_bulkout    =  2;
Nconst   U16  usbd_cdc_acm_sendbuf_sz    =  USBD_CDC_ACM_SENDBUF_SIZE;
Xconst   U16  usbd_cdc_acm_sendbuf_sz    =  64;
Nconst   U16  usbd_cdc_acm_receivebuf_sz =  USBD_CDC_ACM_RECEIVEBUF_SIZE;
Xconst   U16  usbd_cdc_acm_receivebuf_sz =  64;
Nconst   U16  usbd_cdc_acm_maxpacketsize [2] = {USBD_CDC_ACM_WMAXPACKETSIZE,  USBD_CDC_ACM_HS_WMAXPACKETSIZE};
Xconst   U16  usbd_cdc_acm_maxpacketsize [2] = {64,  16};
Nconst   U16  usbd_cdc_acm_maxpacketsize1[2] = {USBD_CDC_ACM_WMAXPACKETSIZE1, USBD_CDC_ACM_HS_WMAXPACKETSIZE1};
Xconst   U16  usbd_cdc_acm_maxpacketsize1[2] = {64, 64};
N        U8   USBD_CDC_ACM_SendBuf         [USBD_CDC_ACM_SENDBUF_SIZE];
X        U8   USBD_CDC_ACM_SendBuf         [64];
N        U8   USBD_CDC_ACM_ReceiveBuf      [USBD_CDC_ACM_RECEIVEBUF_SIZE];
X        U8   USBD_CDC_ACM_ReceiveBuf      [64];
N        U8   USBD_CDC_ACM_NotifyBuf       [10];
N#endif
N
N/*------------------------------------------------------------------------------
N *      USB Device Override Event Handler Fuctions
N *----------------------------------------------------------------------------*/
N
N#if    (USBD_HID_ENABLE)
X#if    (1)
N  #ifndef __RTX
N                                           void USBD_Configure_Event (void)             { USBD_HID_Configure_Event (); }
N  #endif
N  #ifdef __RTX
S    #if   ((USBD_HID_EP_INTOUT != 0) && (USBD_HID_EP_INTIN != USBD_HID_EP_INTOUT))
S      #if    (USBD_HID_EP_INTIN == 1)
S        #define USBD_RTX_EndPoint1             USBD_RTX_HID_EP_INTIN_Event
S      #elif  (USBD_HID_EP_INTIN == 2)
S        #define USBD_RTX_EndPoint2             USBD_RTX_HID_EP_INTIN_Event
S      #elif  (USBD_HID_EP_INTIN == 3)
S        #define USBD_RTX_EndPoint3             USBD_RTX_HID_EP_INTIN_Event
S      #elif  (USBD_HID_EP_INTIN == 4)
S        #define USBD_RTX_EndPoint4             USBD_RTX_HID_EP_INTIN_Event
S      #elif  (USBD_HID_EP_INTIN == 5)
S        #define USBD_RTX_EndPoint5             USBD_RTX_HID_EP_INTIN_Event
S      #elif  (USBD_HID_EP_INTIN == 6)
S        #define USBD_RTX_EndPoint6             USBD_RTX_HID_EP_INTIN_Event
S      #elif  (USBD_HID_EP_INTIN == 7)
S        #define USBD_RTX_EndPoint7             USBD_RTX_HID_EP_INTIN_Event
S      #elif  (USBD_HID_EP_INTIN == 8)
S        #define USBD_RTX_EndPoint8             USBD_RTX_HID_EP_INTIN_Event
S      #elif  (USBD_HID_EP_INTIN == 9)
S        #define USBD_RTX_EndPoint9             USBD_RTX_HID_EP_INTIN_Event
S      #elif  (USBD_HID_EP_INTIN == 10)
S        #define USBD_RTX_EndPoint10            USBD_RTX_HID_EP_INTIN_Event
S      #elif  (USBD_HID_EP_INTIN == 11)
S        #define USBD_RTX_EndPoint11            USBD_RTX_HID_EP_INTIN_Event
S      #elif  (USBD_HID_EP_INTIN == 12)
S        #define USBD_RTX_EndPoint12            USBD_RTX_HID_EP_INTIN_Event
S      #elif  (USBD_HID_EP_INTIN == 13)
S        #define USBD_RTX_EndPoint13            USBD_RTX_HID_EP_INTIN_Event
S      #elif  (USBD_HID_EP_INTIN == 14)
S        #define USBD_RTX_EndPoint14            USBD_RTX_HID_EP_INTIN_Event
S      #elif  (USBD_HID_EP_INTIN == 15)
S        #define USBD_RTX_EndPoint15            USBD_RTX_HID_EP_INTIN_Event
S      #endif
S
S      #if    (USBD_HID_EP_INTOUT == 1)
S        #define USBD_RTX_EndPoint1             USBD_RTX_HID_EP_INTOUT_Event
S      #elif  (USBD_HID_EP_INTOUT == 2)
S        #define USBD_RTX_EndPoint2             USBD_RTX_HID_EP_INTOUT_Event
S      #elif  (USBD_HID_EP_INTOUT == 3)
S        #define USBD_RTX_EndPoint3             USBD_RTX_HID_EP_INTOUT_Event
S      #elif  (USBD_HID_EP_INTOUT == 4)
S        #define USBD_RTX_EndPoint4             USBD_RTX_HID_EP_INTOUT_Event
S      #elif  (USBD_HID_EP_INTOUT == 5)
S        #define USBD_RTX_EndPoint5             USBD_RTX_HID_EP_INTOUT_Event
S      #elif  (USBD_HID_EP_INTOUT == 6)
S        #define USBD_RTX_EndPoint6             USBD_RTX_HID_EP_INTOUT_Event
S      #elif  (USBD_HID_EP_INTOUT == 7)
S        #define USBD_RTX_EndPoint7             USBD_RTX_HID_EP_INTOUT_Event
S      #elif  (USBD_HID_EP_INTOUT == 8)
S        #define USBD_RTX_EndPoint8             USBD_RTX_HID_EP_INTOUT_Event
S      #elif  (USBD_HID_EP_INTOUT == 9)
S        #define USBD_RTX_EndPoint9             USBD_RTX_HID_EP_INTOUT_Event
S      #elif  (USBD_HID_EP_INTOUT == 10)
S        #define USBD_RTX_EndPoint10            USBD_RTX_HID_EP_INTOUT_Event
S      #elif  (USBD_HID_EP_INTOUT == 11)
S        #define USBD_RTX_EndPoint11            USBD_RTX_HID_EP_INTOUT_Event
S      #elif  (USBD_HID_EP_INTOUT == 12)
S        #define USBD_RTX_EndPoint12            USBD_RTX_HID_EP_INTOUT_Event
S      #elif  (USBD_HID_EP_INTOUT == 13)
S        #define USBD_RTX_EndPoint13            USBD_RTX_HID_EP_INTOUT_Event
S      #elif  (USBD_HID_EP_INTOUT == 14)
S        #define USBD_RTX_EndPoint14            USBD_RTX_HID_EP_INTOUT_Event
S      #elif  (USBD_HID_EP_INTOUT == 15)
S        #define USBD_RTX_EndPoint15            USBD_RTX_HID_EP_INTOUT_Event
S      #endif
S    #elif    (USBD_HID_EP_INTOUT != 0)
S      #if    (USBD_HID_EP_INTIN == 1)
S        #define USBD_RTX_EndPoint1             USBD_RTX_HID_EP_INT_Event
S      #elif  (USBD_HID_EP_INTIN == 2)
S        #define USBD_RTX_EndPoint2             USBD_RTX_HID_EP_INT_Event
S      #elif  (USBD_HID_EP_INTIN == 3)
S        #define USBD_RTX_EndPoint3             USBD_RTX_HID_EP_INT_Event
S      #elif  (USBD_HID_EP_INTIN == 4)
S        #define USBD_RTX_EndPoint4             USBD_RTX_HID_EP_INT_Event
S      #elif  (USBD_HID_EP_INTIN == 5)
S        #define USBD_RTX_EndPoint5             USBD_RTX_HID_EP_INT_Event
S      #elif  (USBD_HID_EP_INTIN == 6)
S        #define USBD_RTX_EndPoint6             USBD_RTX_HID_EP_INT_Event
S      #elif  (USBD_HID_EP_INTIN == 7)
S        #define USBD_RTX_EndPoint7             USBD_RTX_HID_EP_INT_Event
S      #elif  (USBD_HID_EP_INTIN == 8)
S        #define USBD_RTX_EndPoint8             USBD_RTX_HID_EP_INT_Event
S      #elif  (USBD_HID_EP_INTIN == 9)
S        #define USBD_RTX_EndPoint9             USBD_RTX_HID_EP_INT_Event
S      #elif  (USBD_HID_EP_INTIN == 10)
S        #define USBD_RTX_EndPoint10            USBD_RTX_HID_EP_INT_Event
S      #elif  (USBD_HID_EP_INTIN == 11)
S        #define USBD_RTX_EndPoint11            USBD_RTX_HID_EP_INT_Event
S      #elif  (USBD_HID_EP_INTIN == 12)
S        #define USBD_RTX_EndPoint12            USBD_RTX_HID_EP_INT_Event
S      #elif  (USBD_HID_EP_INTIN == 13)
S        #define USBD_RTX_EndPoint13            USBD_RTX_HID_EP_INT_Event
S      #elif  (USBD_HID_EP_INTIN == 14)
S        #define USBD_RTX_EndPoint14            USBD_RTX_HID_EP_INT_Event
S      #elif  (USBD_HID_EP_INTIN == 15)
S        #define USBD_RTX_EndPoint15            USBD_RTX_HID_EP_INT_Event
S      #endif
S    #else
S      #if    (USBD_HID_EP_INTIN == 1)
S        #define USBD_RTX_EndPoint1             USBD_RTX_HID_EP_INTIN_Event
S      #elif  (USBD_HID_EP_INTIN == 2)
S        #define USBD_RTX_EndPoint2             USBD_RTX_HID_EP_INTIN_Event
S      #elif  (USBD_HID_EP_INTIN == 3)
S        #define USBD_RTX_EndPoint3             USBD_RTX_HID_EP_INTIN_Event
S      #elif  (USBD_HID_EP_INTIN == 4)
S        #define USBD_RTX_EndPoint4             USBD_RTX_HID_EP_INTIN_Event
S      #elif  (USBD_HID_EP_INTIN == 5)
S        #define USBD_RTX_EndPoint5             USBD_RTX_HID_EP_INTIN_Event
S      #elif  (USBD_HID_EP_INTIN == 6)
S        #define USBD_RTX_EndPoint6             USBD_RTX_HID_EP_INTIN_Event
S      #elif  (USBD_HID_EP_INTIN == 7)
S        #define USBD_RTX_EndPoint7             USBD_RTX_HID_EP_INTIN_Event
S      #elif  (USBD_HID_EP_INTIN == 8)
S        #define USBD_RTX_EndPoint8             USBD_RTX_HID_EP_INTIN_Event
S      #elif  (USBD_HID_EP_INTIN == 9)
S        #define USBD_RTX_EndPoint9             USBD_RTX_HID_EP_INTIN_Event
S      #elif  (USBD_HID_EP_INTIN == 10)
S        #define USBD_RTX_EndPoint10            USBD_RTX_HID_EP_INTIN_Event
S      #elif  (USBD_HID_EP_INTIN == 11)
S        #define USBD_RTX_EndPoint11            USBD_RTX_HID_EP_INTIN_Event
S      #elif  (USBD_HID_EP_INTIN == 12)
S        #define USBD_RTX_EndPoint12            USBD_RTX_HID_EP_INTIN_Event
S      #elif  (USBD_HID_EP_INTIN == 13)
S        #define USBD_RTX_EndPoint13            USBD_RTX_HID_EP_INTIN_Event
S      #elif  (USBD_HID_EP_INTIN == 14)
S        #define USBD_RTX_EndPoint14            USBD_RTX_HID_EP_INTIN_Event
S      #elif  (USBD_HID_EP_INTIN == 15)
S        #define USBD_RTX_EndPoint15            USBD_RTX_HID_EP_INTIN_Event
S      #endif
S    #endif
N  #else
N    #if   ((USBD_HID_EP_INTOUT != 0) && (USBD_HID_EP_INTIN != USBD_HID_EP_INTOUT))
X    #if   ((3 != 0) && (3 != 3))
S      #if    (USBD_HID_EP_INTIN == 1)
S        #define USBD_EndPoint1                 USBD_HID_EP_INTIN_Event
S      #elif  (USBD_HID_EP_INTIN == 2)
S        #define USBD_EndPoint2                 USBD_HID_EP_INTIN_Event
S      #elif  (USBD_HID_EP_INTIN == 3)
S        #define USBD_EndPoint3                 USBD_HID_EP_INTIN_Event
S      #elif  (USBD_HID_EP_INTIN == 4)
S        #define USBD_EndPoint4                 USBD_HID_EP_INTIN_Event
S      #elif  (USBD_HID_EP_INTIN == 5)
S        #define USBD_EndPoint5                 USBD_HID_EP_INTIN_Event
S      #elif  (USBD_HID_EP_INTIN == 6)
S        #define USBD_EndPoint6                 USBD_HID_EP_INTIN_Event
S      #elif  (USBD_HID_EP_INTIN == 7)
S        #define USBD_EndPoint7                 USBD_HID_EP_INTIN_Event
S      #elif  (USBD_HID_EP_INTIN == 8)
S        #define USBD_EndPoint8                 USBD_HID_EP_INTIN_Event
S      #elif  (USBD_HID_EP_INTIN == 9)
S        #define USBD_EndPoint9                 USBD_HID_EP_INTIN_Event
S      #elif  (USBD_HID_EP_INTIN == 10)
S        #define USBD_EndPoint10                USBD_HID_EP_INTIN_Event
S      #elif  (USBD_HID_EP_INTIN == 11)
S        #define USBD_EndPoint11                USBD_HID_EP_INTIN_Event
S      #elif  (USBD_HID_EP_INTIN == 12)
S        #define USBD_EndPoint12                USBD_HID_EP_INTIN_Event
S      #elif  (USBD_HID_EP_INTIN == 13)
S        #define USBD_EndPoint13                USBD_HID_EP_INTIN_Event
S      #elif  (USBD_HID_EP_INTIN == 14)
S        #define USBD_EndPoint14                USBD_HID_EP_INTIN_Event
S      #elif  (USBD_HID_EP_INTIN == 15)
S        #define USBD_EndPoint15                USBD_HID_EP_INTIN_Event
S      #endif
S
S      #if    (USBD_HID_EP_INTOUT == 1)
S        #define USBD_EndPoint1                 USBD_HID_EP_INTOUT_Event
S      #elif  (USBD_HID_EP_INTOUT == 2)
S        #define USBD_EndPoint2                 USBD_HID_EP_INTOUT_Event
S      #elif  (USBD_HID_EP_INTOUT == 3)
S        #define USBD_EndPoint3                 USBD_HID_EP_INTOUT_Event
S      #elif  (USBD_HID_EP_INTOUT == 4)
S        #define USBD_EndPoint4                 USBD_HID_EP_INTOUT_Event
S      #elif  (USBD_HID_EP_INTOUT == 5)
S        #define USBD_EndPoint5                 USBD_HID_EP_INTOUT_Event
S      #elif  (USBD_HID_EP_INTOUT == 6)
S        #define USBD_EndPoint6                 USBD_HID_EP_INTOUT_Event
S      #elif  (USBD_HID_EP_INTOUT == 7)
S        #define USBD_EndPoint7                 USBD_HID_EP_INTOUT_Event
S      #elif  (USBD_HID_EP_INTOUT == 8)
S        #define USBD_EndPoint8                 USBD_HID_EP_INTOUT_Event
S      #elif  (USBD_HID_EP_INTOUT == 9)
S        #define USBD_EndPoint9                 USBD_HID_EP_INTOUT_Event
S      #elif  (USBD_HID_EP_INTOUT == 10)
S        #define USBD_EndPoint10                USBD_HID_EP_INTOUT_Event
S      #elif  (USBD_HID_EP_INTOUT == 11)
S        #define USBD_EndPoint11                USBD_HID_EP_INTOUT_Event
S      #elif  (USBD_HID_EP_INTOUT == 12)
S        #define USBD_EndPoint12                USBD_HID_EP_INTOUT_Event
S      #elif  (USBD_HID_EP_INTOUT == 13)
S        #define USBD_EndPoint13                USBD_HID_EP_INTOUT_Event
S      #elif  (USBD_HID_EP_INTOUT == 14)
S        #define USBD_EndPoint14                USBD_HID_EP_INTOUT_Event
S      #elif  (USBD_HID_EP_INTOUT == 15)
S        #define USBD_EndPoint15                USBD_HID_EP_INTOUT_Event
S      #endif
N    #elif    (USBD_HID_EP_INTOUT != 0)
X    #elif    (3 != 0)
N      #if    (USBD_HID_EP_INTIN == 1)
X      #if    (3 == 1)
S        #define USBD_EndPoint1                 USBD_HID_EP_INT_Event
S      #elif  (USBD_HID_EP_INTIN == 2)
X      #elif  (3 == 2)
S        #define USBD_EndPoint2                 USBD_HID_EP_INT_Event
N      #elif  (USBD_HID_EP_INTIN == 3)
X      #elif  (3 == 3)
N        #define USBD_EndPoint3                 USBD_HID_EP_INT_Event
N      #elif  (USBD_HID_EP_INTIN == 4)
S        #define USBD_EndPoint4                 USBD_HID_EP_INT_Event
S      #elif  (USBD_HID_EP_INTIN == 5)
S        #define USBD_EndPoint5                 USBD_HID_EP_INT_Event
S      #elif  (USBD_HID_EP_INTIN == 6)
S        #define USBD_EndPoint6                 USBD_HID_EP_INT_Event
S      #elif  (USBD_HID_EP_INTIN == 7)
S        #define USBD_EndPoint7                 USBD_HID_EP_INT_Event
S      #elif  (USBD_HID_EP_INTIN == 8)
S        #define USBD_EndPoint8                 USBD_HID_EP_INT_Event
S      #elif  (USBD_HID_EP_INTIN == 9)
S        #define USBD_EndPoint9                 USBD_HID_EP_INT_Event
S      #elif  (USBD_HID_EP_INTIN == 10)
S        #define USBD_EndPoint10                USBD_HID_EP_INT_Event
S      #elif  (USBD_HID_EP_INTIN == 11)
S        #define USBD_EndPoint11                USBD_HID_EP_INT_Event
S      #elif  (USBD_HID_EP_INTIN == 12)
S        #define USBD_EndPoint12                USBD_HID_EP_INT_Event
S      #elif  (USBD_HID_EP_INTIN == 13)
S        #define USBD_EndPoint13                USBD_HID_EP_INT_Event
S      #elif  (USBD_HID_EP_INTIN == 14)
S        #define USBD_EndPoint14                USBD_HID_EP_INT_Event
S      #elif  (USBD_HID_EP_INTIN == 15)
S        #define USBD_EndPoint15                USBD_HID_EP_INT_Event
N      #endif
N    #else
S      #if    (USBD_HID_EP_INTIN == 1)
S        #define USBD_EndPoint1                 USBD_HID_EP_INTIN_Event
S      #elif  (USBD_HID_EP_INTIN == 2)
S        #define USBD_EndPoint2                 USBD_HID_EP_INTIN_Event
S      #elif  (USBD_HID_EP_INTIN == 3)
S        #define USBD_EndPoint3                 USBD_HID_EP_INTIN_Event
S      #elif  (USBD_HID_EP_INTIN == 4)
S        #define USBD_EndPoint4                 USBD_HID_EP_INTIN_Event
S      #elif  (USBD_HID_EP_INTIN == 5)
S        #define USBD_EndPoint5                 USBD_HID_EP_INTIN_Event
S      #elif  (USBD_HID_EP_INTIN == 6)
S        #define USBD_EndPoint6                 USBD_HID_EP_INTIN_Event
S      #elif  (USBD_HID_EP_INTIN == 7)
S        #define USBD_EndPoint7                 USBD_HID_EP_INTIN_Event
S      #elif  (USBD_HID_EP_INTIN == 8)
S        #define USBD_EndPoint8                 USBD_HID_EP_INTIN_Event
S      #elif  (USBD_HID_EP_INTIN == 9)
S        #define USBD_EndPoint9                 USBD_HID_EP_INTIN_Event
S      #elif  (USBD_HID_EP_INTIN == 10)
S        #define USBD_EndPoint10                USBD_HID_EP_INTIN_Event
S      #elif  (USBD_HID_EP_INTIN == 11)
S        #define USBD_EndPoint11                USBD_HID_EP_INTIN_Event
S      #elif  (USBD_HID_EP_INTIN == 12)
S        #define USBD_EndPoint12                USBD_HID_EP_INTIN_Event
S      #elif  (USBD_HID_EP_INTIN == 13)
S        #define USBD_EndPoint13                USBD_HID_EP_INTIN_Event
S      #elif  (USBD_HID_EP_INTIN == 14)
S        #define USBD_EndPoint14                USBD_HID_EP_INTIN_Event
S      #elif  (USBD_HID_EP_INTIN == 15)
S        #define USBD_EndPoint15                USBD_HID_EP_INTIN_Event
S      #endif
N    #endif
N  #endif
N#else
S  BOOL USBD_ReqGetDescriptor_HID          (U8 **pD, U32 *len)                           { return (__FALSE); }
S  BOOL USBD_EndPoint0_Setup_HID_ReqToIF   (void)                                        { return (__FALSE); }
S  BOOL USBD_EndPoint0_Out_HID_ReqToIF     (void)                                        { return (__FALSE); }
N#endif  /* (USBD_HID_ENABLE) */
N
N#if    (USBD_MSC_ENABLE)
X#if    (0)
S  #ifdef __RTX
S    #if    (USBD_MSC_EP_BULKIN != USBD_MSC_EP_BULKOUT)
S      #if    (USBD_MSC_EP_BULKIN == 1)
S        #define USBD_RTX_EndPoint1             USBD_RTX_MSC_EP_BULKIN_Event
S      #elif  (USBD_MSC_EP_BULKIN == 2)
S        #define USBD_RTX_EndPoint2             USBD_RTX_MSC_EP_BULKIN_Event
S      #elif  (USBD_MSC_EP_BULKIN == 3)
S        #define USBD_RTX_EndPoint3             USBD_RTX_MSC_EP_BULKIN_Event
S      #elif  (USBD_MSC_EP_BULKIN == 4)
S        #define USBD_RTX_EndPoint4             USBD_RTX_MSC_EP_BULKIN_Event
S      #elif  (USBD_MSC_EP_BULKIN == 5)
S        #define USBD_RTX_EndPoint5             USBD_RTX_MSC_EP_BULKIN_Event
S      #elif  (USBD_MSC_EP_BULKIN == 6)
S        #define USBD_RTX_EndPoint6             USBD_RTX_MSC_EP_BULKIN_Event
S      #elif  (USBD_MSC_EP_BULKIN == 7)
S        #define USBD_RTX_EndPoint7             USBD_RTX_MSC_EP_BULKIN_Event
S      #elif  (USBD_MSC_EP_BULKIN == 8)
S        #define USBD_RTX_EndPoint8             USBD_RTX_MSC_EP_BULKIN_Event
S      #elif  (USBD_MSC_EP_BULKIN == 9)
S        #define USBD_RTX_EndPoint9             USBD_RTX_MSC_EP_BULKIN_Event
S      #elif  (USBD_MSC_EP_BULKIN == 10)
S        #define USBD_RTX_EndPoint10            USBD_RTX_MSC_EP_BULKIN_Event
S      #elif  (USBD_MSC_EP_BULKIN == 11)
S        #define USBD_RTX_EndPoint11            USBD_RTX_MSC_EP_BULKIN_Event
S      #elif  (USBD_MSC_EP_BULKIN == 12)
S        #define USBD_RTX_EndPoint12            USBD_RTX_MSC_EP_BULKIN_Event
S      #elif  (USBD_MSC_EP_BULKIN == 13)
S        #define USBD_RTX_EndPoint13            USBD_RTX_MSC_EP_BULKIN_Event
S      #elif  (USBD_MSC_EP_BULKIN == 14)
S        #define USBD_RTX_EndPoint14            USBD_RTX_MSC_EP_BULKIN_Event
S      #elif  (USBD_MSC_EP_BULKIN == 15)
S        #define USBD_RTX_EndPoint15            USBD_RTX_MSC_EP_BULKIN_Event
S      #endif
S
S      #if    (USBD_MSC_EP_BULKOUT == 1)
S        #define USBD_RTX_EndPoint1             USBD_RTX_MSC_EP_BULKOUT_Event
S      #elif  (USBD_MSC_EP_BULKOUT == 2)
S        #define USBD_RTX_EndPoint2             USBD_RTX_MSC_EP_BULKOUT_Event
S      #elif  (USBD_MSC_EP_BULKOUT == 3)
S        #define USBD_RTX_EndPoint3             USBD_RTX_MSC_EP_BULKOUT_Event
S      #elif  (USBD_MSC_EP_BULKOUT == 4)
S        #define USBD_RTX_EndPoint4             USBD_RTX_MSC_EP_BULKOUT_Event
S      #elif  (USBD_MSC_EP_BULKOUT == 5)
S        #define USBD_RTX_EndPoint5             USBD_RTX_MSC_EP_BULKOUT_Event
S      #elif  (USBD_MSC_EP_BULKOUT == 6)
S        #define USBD_RTX_EndPoint6             USBD_RTX_MSC_EP_BULKOUT_Event
S      #elif  (USBD_MSC_EP_BULKOUT == 7)
S        #define USBD_RTX_EndPoint7             USBD_RTX_MSC_EP_BULKOUT_Event
S      #elif  (USBD_MSC_EP_BULKOUT == 8)
S        #define USBD_RTX_EndPoint8             USBD_RTX_MSC_EP_BULKOUT_Event
S      #elif  (USBD_MSC_EP_BULKOUT == 9)
S        #define USBD_RTX_EndPoint9             USBD_RTX_MSC_EP_BULKOUT_Event
S      #elif  (USBD_MSC_EP_BULKOUT == 10)
S        #define USBD_RTX_EndPoint10            USBD_RTX_MSC_EP_BULKOUT_Event
S      #elif  (USBD_MSC_EP_BULKOUT == 11)
S        #define USBD_RTX_EndPoint11            USBD_RTX_MSC_EP_BULKOUT_Event
S      #elif  (USBD_MSC_EP_BULKOUT == 12)
S        #define USBD_RTX_EndPoint12            USBD_RTX_MSC_EP_BULKOUT_Event
S      #elif  (USBD_MSC_EP_BULKOUT == 13)
S        #define USBD_RTX_EndPoint13            USBD_RTX_MSC_EP_BULKOUT_Event
S      #elif  (USBD_MSC_EP_BULKOUT == 14)
S        #define USBD_RTX_EndPoint14            USBD_RTX_MSC_EP_BULKOUT_Event
S      #elif  (USBD_MSC_EP_BULKOUT == 15)
S        #define USBD_RTX_EndPoint15            USBD_RTX_MSC_EP_BULKOUT_Event
S      #endif
S    #else
S      #if    (USBD_MSC_EP_BULKIN == 1)
S        #define USBD_RTX_EndPoint1             USBD_RTX_MSC_EP_BULK_Event
S      #elif  (USBD_MSC_EP_BULKIN == 2)
S        #define USBD_RTX_EndPoint2             USBD_RTX_MSC_EP_BULK_Event
S      #elif  (USBD_MSC_EP_BULKIN == 3)
S        #define USBD_RTX_EndPoint3             USBD_RTX_MSC_EP_BULK_Event
S      #elif  (USBD_MSC_EP_BULKIN == 4)
S        #define USBD_RTX_EndPoint4             USBD_RTX_MSC_EP_BULK_Event
S      #elif  (USBD_MSC_EP_BULKIN == 5)
S        #define USBD_RTX_EndPoint5             USBD_RTX_MSC_EP_BULK_Event
S      #elif  (USBD_MSC_EP_BULKIN == 6)
S        #define USBD_RTX_EndPoint6             USBD_RTX_MSC_EP_BULK_Event
S      #elif  (USBD_MSC_EP_BULKIN == 7)
S        #define USBD_RTX_EndPoint7             USBD_RTX_MSC_EP_BULK_Event
S      #elif  (USBD_MSC_EP_BULKIN == 8)
S        #define USBD_RTX_EndPoint8             USBD_RTX_MSC_EP_BULK_Event
S      #elif  (USBD_MSC_EP_BULKIN == 9)
S        #define USBD_RTX_EndPoint9             USBD_RTX_MSC_EP_BULK_Event
S      #elif  (USBD_MSC_EP_BULKIN == 10)
S        #define USBD_RTX_EndPoint10            USBD_RTX_MSC_EP_BULK_Event
S      #elif  (USBD_MSC_EP_BULKIN == 11)
S        #define USBD_RTX_EndPoint11            USBD_RTX_MSC_EP_BULK_Event
S      #elif  (USBD_MSC_EP_BULKIN == 12)
S        #define USBD_RTX_EndPoint12            USBD_RTX_MSC_EP_BULK_Event
S      #elif  (USBD_MSC_EP_BULKIN == 13)
S        #define USBD_RTX_EndPoint13            USBD_RTX_MSC_EP_BULK_Event
S      #elif  (USBD_MSC_EP_BULKIN == 14)
S        #define USBD_RTX_EndPoint14            USBD_RTX_MSC_EP_BULK_Event
S      #elif  (USBD_MSC_EP_BULKIN == 15)
S        #define USBD_RTX_EndPoint15            USBD_RTX_MSC_EP_BULK_Event
S      #endif
S    #endif
S  #else
S    #if    (USBD_MSC_EP_BULKIN != USBD_MSC_EP_BULKOUT)
S      #if    (USBD_MSC_EP_BULKIN == 1)
S        #define USBD_EndPoint1                 USBD_MSC_EP_BULKIN_Event
S      #elif  (USBD_MSC_EP_BULKIN == 2)
S        #define USBD_EndPoint2                 USBD_MSC_EP_BULKIN_Event
S      #elif  (USBD_MSC_EP_BULKIN == 3)
S        #define USBD_EndPoint3                 USBD_MSC_EP_BULKIN_Event
S      #elif  (USBD_MSC_EP_BULKIN == 4)
S        #define USBD_EndPoint4                 USBD_MSC_EP_BULKIN_Event
S      #elif  (USBD_MSC_EP_BULKIN == 5)
S        #define USBD_EndPoint5                 USBD_MSC_EP_BULKIN_Event
S      #elif  (USBD_MSC_EP_BULKIN == 6)
S        #define USBD_EndPoint6                 USBD_MSC_EP_BULKIN_Event
S      #elif  (USBD_MSC_EP_BULKIN == 7)
S        #define USBD_EndPoint7                 USBD_MSC_EP_BULKIN_Event
S      #elif  (USBD_MSC_EP_BULKIN == 8)
S        #define USBD_EndPoint8                 USBD_MSC_EP_BULKIN_Event
S      #elif  (USBD_MSC_EP_BULKIN == 9)
S        #define USBD_EndPoint9                 USBD_MSC_EP_BULKIN_Event
S      #elif  (USBD_MSC_EP_BULKIN == 10)
S        #define USBD_EndPoint10                USBD_MSC_EP_BULKIN_Event
S      #elif  (USBD_MSC_EP_BULKIN == 11)
S        #define USBD_EndPoint11                USBD_MSC_EP_BULKIN_Event
S      #elif  (USBD_MSC_EP_BULKIN == 12)
S        #define USBD_EndPoint12                USBD_MSC_EP_BULKIN_Event
S      #elif  (USBD_MSC_EP_BULKIN == 13)
S        #define USBD_EndPoint13                USBD_MSC_EP_BULKIN_Event
S      #elif  (USBD_MSC_EP_BULKIN == 14)
S        #define USBD_EndPoint14                USBD_MSC_EP_BULKIN_Event
S      #elif  (USBD_MSC_EP_BULKIN == 15)
S        #define USBD_EndPoint15                USBD_MSC_EP_BULKIN_Event
S      #endif
S
S      #if    (USBD_MSC_EP_BULKOUT == 1)
S        #define USBD_EndPoint1                 USBD_MSC_EP_BULKOUT_Event
S      #elif  (USBD_MSC_EP_BULKOUT == 2)
S        #define USBD_EndPoint2                 USBD_MSC_EP_BULKOUT_Event
S      #elif  (USBD_MSC_EP_BULKOUT == 3)
S        #define USBD_EndPoint3                 USBD_MSC_EP_BULKOUT_Event
S      #elif  (USBD_MSC_EP_BULKOUT == 4)
S        #define USBD_EndPoint4                 USBD_MSC_EP_BULKOUT_Event
S      #elif  (USBD_MSC_EP_BULKOUT == 5)
S        #define USBD_EndPoint5                 USBD_MSC_EP_BULKOUT_Event
S      #elif  (USBD_MSC_EP_BULKOUT == 6)
S        #define USBD_EndPoint6                 USBD_MSC_EP_BULKOUT_Event
S      #elif  (USBD_MSC_EP_BULKOUT == 7)
S        #define USBD_EndPoint7                 USBD_MSC_EP_BULKOUT_Event
S      #elif  (USBD_MSC_EP_BULKOUT == 8)
S        #define USBD_EndPoint8                 USBD_MSC_EP_BULKOUT_Event
S      #elif  (USBD_MSC_EP_BULKOUT == 9)
S        #define USBD_EndPoint9                 USBD_MSC_EP_BULKOUT_Event
S      #elif  (USBD_MSC_EP_BULKOUT == 10)
S        #define USBD_EndPoint10                USBD_MSC_EP_BULKOUT_Event
S      #elif  (USBD_MSC_EP_BULKOUT == 11)
S        #define USBD_EndPoint11                USBD_MSC_EP_BULKOUT_Event
S      #elif  (USBD_MSC_EP_BULKOUT == 12)
S        #define USBD_EndPoint12                USBD_MSC_EP_BULKOUT_Event
S      #elif  (USBD_MSC_EP_BULKOUT == 13)
S        #define USBD_EndPoint13                USBD_MSC_EP_BULKOUT_Event
S      #elif  (USBD_MSC_EP_BULKOUT == 14)
S        #define USBD_EndPoint14                USBD_MSC_EP_BULKOUT_Event
S      #elif  (USBD_MSC_EP_BULKOUT == 15)
S        #define USBD_EndPoint15                USBD_MSC_EP_BULKOUT_Event
S      #endif
S    #else
S      #if    (USBD_MSC_EP_BULKIN == 1)
S        #define USBD_EndPoint1                 USBD_MSC_EP_BULK_Event
S      #elif  (USBD_MSC_EP_BULKIN == 2)
S        #define USBD_EndPoint2                 USBD_MSC_EP_BULK_Event
S      #elif  (USBD_MSC_EP_BULKIN == 3)
S        #define USBD_EndPoint3                 USBD_MSC_EP_BULK_Event
S      #elif  (USBD_MSC_EP_BULKIN == 4)
S        #define USBD_EndPoint4                 USBD_MSC_EP_BULK_Event
S      #elif  (USBD_MSC_EP_BULKIN == 5)
S        #define USBD_EndPoint5                 USBD_MSC_EP_BULK_Event
S      #elif  (USBD_MSC_EP_BULKIN == 6)
S        #define USBD_EndPoint6                 USBD_MSC_EP_BULK_Event
S      #elif  (USBD_MSC_EP_BULKIN == 7)
S        #define USBD_EndPoint7                 USBD_MSC_EP_BULK_Event
S      #elif  (USBD_MSC_EP_BULKIN == 8)
S        #define USBD_EndPoint8                 USBD_MSC_EP_BULK_Event
S      #elif  (USBD_MSC_EP_BULKIN == 9)
S        #define USBD_EndPoint9                 USBD_MSC_EP_BULK_Event
S      #elif  (USBD_MSC_EP_BULKIN == 10)
S        #define USBD_EndPoint10                USBD_MSC_EP_BULK_Event
S      #elif  (USBD_MSC_EP_BULKIN == 11)
S        #define USBD_EndPoint11                USBD_MSC_EP_BULK_Event
S      #elif  (USBD_MSC_EP_BULKIN == 12)
S        #define USBD_EndPoint12                USBD_MSC_EP_BULK_Event
S      #elif  (USBD_MSC_EP_BULKIN == 13)
S        #define USBD_EndPoint13                USBD_MSC_EP_BULK_Event
S      #elif  (USBD_MSC_EP_BULKIN == 14)
S        #define USBD_EndPoint14                USBD_MSC_EP_BULK_Event
S      #elif  (USBD_MSC_EP_BULKIN == 15)
S        #define USBD_EndPoint15                USBD_MSC_EP_BULK_Event
S      #endif
S    #endif
S  #endif
N#else
N  void USBD_ReqClrFeature_MSC             (U32 EPNum)                                   { }
N  BOOL USBD_EndPoint0_Setup_MSC_ReqToIF   (void)                                        { return (__FALSE); }
X  BOOL USBD_EndPoint0_Setup_MSC_ReqToIF   (void)                                        { return (0); }
N  BOOL USBD_EndPoint0_Out_MSC_ReqToIF     (void)                                        { return (__FALSE); }
X  BOOL USBD_EndPoint0_Out_MSC_ReqToIF     (void)                                        { return (0); }
N#endif  /* (USBD_MSC_ENABLE) */
N
N#if    (USBD_ADC_ENABLE == 0)
X#if    (0 == 0)
N  BOOL USBD_EndPoint0_Setup_ADC_ReqToIF   (void)                                        { return (__FALSE); }
X  BOOL USBD_EndPoint0_Setup_ADC_ReqToIF   (void)                                        { return (0); }
N  BOOL USBD_EndPoint0_Setup_ADC_ReqToEP   (void)                                        { return (__FALSE); }
X  BOOL USBD_EndPoint0_Setup_ADC_ReqToEP   (void)                                        { return (0); }
N  BOOL USBD_EndPoint0_Out_ADC_ReqToIF     (void)                                        { return (__FALSE); }
X  BOOL USBD_EndPoint0_Out_ADC_ReqToIF     (void)                                        { return (0); }
N  BOOL USBD_EndPoint0_Out_ADC_ReqToEP     (void)                                        { return (__FALSE); }
X  BOOL USBD_EndPoint0_Out_ADC_ReqToEP     (void)                                        { return (0); }
N#endif  /* (USBD_MSC_ENABLE) */
N
N#if    (USBD_CDC_ACM_ENABLE)
X#if    (1)
N  #ifdef __RTX
S    #if    (USBD_CDC_ACM_EP_INTIN == 1)
S      #define USBD_RTX_EndPoint1               USBD_RTX_CDC_ACM_EP_INTIN_Event
S    #elif  (USBD_CDC_ACM_EP_INTIN == 2)
S      #define USBD_RTX_EndPoint2               USBD_RTX_CDC_ACM_EP_INTIN_Event
S    #elif  (USBD_CDC_ACM_EP_INTIN == 3)
S      #define USBD_RTX_EndPoint3               USBD_RTX_CDC_ACM_EP_INTIN_Event
S    #elif  (USBD_CDC_ACM_EP_INTIN == 4)
S      #define USBD_RTX_EndPoint4               USBD_RTX_CDC_ACM_EP_INTIN_Event
S    #elif  (USBD_CDC_ACM_EP_INTIN == 5)
S      #define USBD_RTX_EndPoint5               USBD_RTX_CDC_ACM_EP_INTIN_Event
S    #elif  (USBD_CDC_ACM_EP_INTIN == 6)
S      #define USBD_RTX_EndPoint6               USBD_RTX_CDC_ACM_EP_INTIN_Event
S    #elif  (USBD_CDC_ACM_EP_INTIN == 7)
S      #define USBD_RTX_EndPoint7               USBD_RTX_CDC_ACM_EP_INTIN_Event
S    #elif  (USBD_CDC_ACM_EP_INTIN == 8)
S      #define USBD_RTX_EndPoint8               USBD_RTX_CDC_ACM_EP_INTIN_Event
S    #elif  (USBD_CDC_ACM_EP_INTIN == 9)
S      #define USBD_RTX_EndPoint9               USBD_RTX_CDC_ACM_EP_INTIN_Event
S    #elif  (USBD_CDC_ACM_EP_INTIN == 10)
S      #define USBD_RTX_EndPoint10              USBD_RTX_CDC_ACM_EP_INTIN_Event
S    #elif  (USBD_CDC_ACM_EP_INTIN == 11)
S      #define USBD_RTX_EndPoint11              USBD_RTX_CDC_ACM_EP_INTIN_Event
S    #elif  (USBD_CDC_ACM_EP_INTIN == 12)
S      #define USBD_RTX_EndPoint12              USBD_RTX_CDC_ACM_EP_INTIN_Event
S    #elif  (USBD_CDC_ACM_EP_INTIN == 13)
S      #define USBD_RTX_EndPoint13              USBD_RTX_CDC_ACM_EP_INTIN_Event
S    #elif  (USBD_CDC_ACM_EP_INTIN == 14)
S      #define USBD_RTX_EndPoint14              USBD_RTX_CDC_ACM_EP_INTIN_Event
S    #elif  (USBD_CDC_ACM_EP_INTIN == 15)
S      #define USBD_RTX_EndPoint15              USBD_RTX_CDC_ACM_EP_INTIN_Event
S    #endif
N  #else
N    #if    (USBD_CDC_ACM_EP_INTIN == 1)
X    #if    (1 == 1)
N      #define USBD_EndPoint1                   USBD_CDC_ACM_EP_INTIN_Event
N    #elif  (USBD_CDC_ACM_EP_INTIN == 2)
S      #define USBD_EndPoint2                   USBD_CDC_ACM_EP_INTIN_Event
S    #elif  (USBD_CDC_ACM_EP_INTIN == 3)
S      #define USBD_EndPoint3                   USBD_CDC_ACM_EP_INTIN_Event
S    #elif  (USBD_CDC_ACM_EP_INTIN == 4)
S      #define USBD_EndPoint4                   USBD_CDC_ACM_EP_INTIN_Event
S    #elif  (USBD_CDC_ACM_EP_INTIN == 5)
S      #define USBD_EndPoint5                   USBD_CDC_ACM_EP_INTIN_Event
S    #elif  (USBD_CDC_ACM_EP_INTIN == 6)
S      #define USBD_EndPoint6                   USBD_CDC_ACM_EP_INTIN_Event
S    #elif  (USBD_CDC_ACM_EP_INTIN == 7)
S      #define USBD_EndPoint7                   USBD_CDC_ACM_EP_INTIN_Event
S    #elif  (USBD_CDC_ACM_EP_INTIN == 8)
S      #define USBD_EndPoint8                   USBD_CDC_ACM_EP_INTIN_Event
S    #elif  (USBD_CDC_ACM_EP_INTIN == 9)
S      #define USBD_EndPoint9                   USBD_CDC_ACM_EP_INTIN_Event
S    #elif  (USBD_CDC_ACM_EP_INTIN == 10)
S      #define USBD_EndPoint10                  USBD_CDC_ACM_EP_INTIN_Event
S    #elif  (USBD_CDC_ACM_EP_INTIN == 11)
S      #define USBD_EndPoint11                  USBD_CDC_ACM_EP_INTIN_Event
S    #elif  (USBD_CDC_ACM_EP_INTIN == 12)
S      #define USBD_EndPoint12                  USBD_CDC_ACM_EP_INTIN_Event
S    #elif  (USBD_CDC_ACM_EP_INTIN == 13)
S      #define USBD_EndPoint13                  USBD_CDC_ACM_EP_INTIN_Event
S    #elif  (USBD_CDC_ACM_EP_INTIN == 14)
S      #define USBD_EndPoint14                  USBD_CDC_ACM_EP_INTIN_Event
S    #elif  (USBD_CDC_ACM_EP_INTIN == 15)
S      #define USBD_EndPoint15                  USBD_CDC_ACM_EP_INTIN_Event
N    #endif
N  #endif
N
N  #ifdef __RTX
S    #if    (USBD_CDC_ACM_EP_BULKIN != USBD_CDC_ACM_EP_BULKOUT)
S      #if    (USBD_CDC_ACM_EP_BULKIN == 1)
S        #define USBD_RTX_EndPoint1             USBD_RTX_CDC_ACM_EP_BULKIN_Event
S      #elif  (USBD_CDC_ACM_EP_BULKIN == 2)
S        #define USBD_RTX_EndPoint2             USBD_RTX_CDC_ACM_EP_BULKIN_Event
S      #elif  (USBD_CDC_ACM_EP_BULKIN == 3)
S        #define USBD_RTX_EndPoint3             USBD_RTX_CDC_ACM_EP_BULKIN_Event
S      #elif  (USBD_CDC_ACM_EP_BULKIN == 4)
S        #define USBD_RTX_EndPoint4             USBD_RTX_CDC_ACM_EP_BULKIN_Event
S      #elif  (USBD_CDC_ACM_EP_BULKIN == 5)
S        #define USBD_RTX_EndPoint5             USBD_RTX_CDC_ACM_EP_BULKIN_Event
S      #elif  (USBD_CDC_ACM_EP_BULKIN == 6)
S        #define USBD_RTX_EndPoint6             USBD_RTX_CDC_ACM_EP_BULKIN_Event
S      #elif  (USBD_CDC_ACM_EP_BULKIN == 7)
S        #define USBD_RTX_EndPoint7             USBD_RTX_CDC_ACM_EP_BULKIN_Event
S      #elif  (USBD_CDC_ACM_EP_BULKIN == 8)
S        #define USBD_RTX_EndPoint8             USBD_RTX_CDC_ACM_EP_BULKIN_Event
S      #elif  (USBD_CDC_ACM_EP_BULKIN == 9)
S        #define USBD_RTX_EndPoint9             USBD_RTX_CDC_ACM_EP_BULKIN_Event
S      #elif  (USBD_CDC_ACM_EP_BULKIN == 10)
S        #define USBD_RTX_EndPoint10            USBD_RTX_CDC_ACM_EP_BULKIN_Event
S      #elif  (USBD_CDC_ACM_EP_BULKIN == 11)
S        #define USBD_RTX_EndPoint11            USBD_RTX_CDC_ACM_EP_BULKIN_Event
S      #elif  (USBD_CDC_ACM_EP_BULKIN == 12)
S        #define USBD_RTX_EndPoint12            USBD_RTX_CDC_ACM_EP_BULKIN_Event
S      #elif  (USBD_CDC_ACM_EP_BULKIN == 13)
S        #define USBD_RTX_EndPoint13            USBD_RTX_CDC_ACM_EP_BULKIN_Event
S      #elif  (USBD_CDC_ACM_EP_BULKIN == 14)
S        #define USBD_RTX_EndPoint14            USBD_RTX_CDC_ACM_EP_BULKIN_Event
S      #elif  (USBD_CDC_ACM_EP_BULKIN == 15)
S        #define USBD_RTX_EndPoint15            USBD_RTX_CDC_ACM_EP_BULKIN_Event
S      #endif
S
S      #if    (USBD_CDC_ACM_EP_BULKOUT == 1)
S        #define USBD_RTX_EndPoint1             USBD_RTX_CDC_ACM_EP_BULKOUT_Event
S      #elif  (USBD_CDC_ACM_EP_BULKOUT == 2)
S        #define USBD_RTX_EndPoint2             USBD_RTX_CDC_ACM_EP_BULKOUT_Event
S      #elif  (USBD_CDC_ACM_EP_BULKOUT == 3)
S        #define USBD_RTX_EndPoint3             USBD_RTX_CDC_ACM_EP_BULKOUT_Event
S      #elif  (USBD_CDC_ACM_EP_BULKOUT == 4)
S        #define USBD_RTX_EndPoint4             USBD_RTX_CDC_ACM_EP_BULKOUT_Event
S      #elif  (USBD_CDC_ACM_EP_BULKOUT == 5)
S        #define USBD_RTX_EndPoint5             USBD_RTX_CDC_ACM_EP_BULKOUT_Event
S      #elif  (USBD_CDC_ACM_EP_BULKOUT == 6)
S        #define USBD_RTX_EndPoint6             USBD_RTX_CDC_ACM_EP_BULKOUT_Event
S      #elif  (USBD_CDC_ACM_EP_BULKOUT == 7)
S        #define USBD_RTX_EndPoint7             USBD_RTX_CDC_ACM_EP_BULKOUT_Event
S      #elif  (USBD_CDC_ACM_EP_BULKOUT == 8)
S        #define USBD_RTX_EndPoint8             USBD_RTX_CDC_ACM_EP_BULKOUT_Event
S      #elif  (USBD_CDC_ACM_EP_BULKOUT == 9)
S        #define USBD_RTX_EndPoint9             USBD_RTX_CDC_ACM_EP_BULKOUT_Event
S      #elif  (USBD_CDC_ACM_EP_BULKOUT == 10)
S        #define USBD_RTX_EndPoint10            USBD_RTX_CDC_ACM_EP_BULKOUT_Event
S      #elif  (USBD_CDC_ACM_EP_BULKOUT == 11)
S        #define USBD_RTX_EndPoint11            USBD_RTX_CDC_ACM_EP_BULKOUT_Event
S      #elif  (USBD_CDC_ACM_EP_BULKOUT == 12)
S        #define USBD_RTX_EndPoint12            USBD_RTX_CDC_ACM_EP_BULKOUT_Event
S      #elif  (USBD_CDC_ACM_EP_BULKOUT == 13)
S        #define USBD_RTX_EndPoint13            USBD_RTX_CDC_ACM_EP_BULKOUT_Event
S      #elif  (USBD_CDC_ACM_EP_BULKOUT == 14)
S        #define USBD_RTX_EndPoint14            USBD_RTX_CDC_ACM_EP_BULKOUT_Event
S      #elif  (USBD_CDC_ACM_EP_BULKOUT == 15)
S        #define USBD_RTX_EndPoint15            USBD_RTX_CDC_ACM_EP_BULKOUT_Event
S      #endif
S    #else
S      #if    (USBD_CDC_ACM_EP_BULKIN == 1)
S        #define USBD_RTX_EndPoint1             USBD_RTX_CDC_ACM_EP_BULK_Event
S      #elif  (USBD_CDC_ACM_EP_BULKIN == 2)
S        #define USBD_RTX_EndPoint2             USBD_RTX_CDC_ACM_EP_BULK_Event
S      #elif  (USBD_CDC_ACM_EP_BULKIN == 3)
S        #define USBD_RTX_EndPoint3             USBD_RTX_CDC_ACM_EP_BULK_Event
S      #elif  (USBD_CDC_ACM_EP_BULKIN == 4)
S        #define USBD_RTX_EndPoint4             USBD_RTX_CDC_ACM_EP_BULK_Event
S      #elif  (USBD_CDC_ACM_EP_BULKIN == 5)
S        #define USBD_RTX_EndPoint5             USBD_RTX_CDC_ACM_EP_BULK_Event
S      #elif  (USBD_CDC_ACM_EP_BULKIN == 6)
S        #define USBD_RTX_EndPoint6             USBD_RTX_CDC_ACM_EP_BULK_Event
S      #elif  (USBD_CDC_ACM_EP_BULKIN == 7)
S        #define USBD_RTX_EndPoint7             USBD_RTX_CDC_ACM_EP_BULK_Event
S      #elif  (USBD_CDC_ACM_EP_BULKIN == 8)
S        #define USBD_RTX_EndPoint8             USBD_RTX_CDC_ACM_EP_BULK_Event
S      #elif  (USBD_CDC_ACM_EP_BULKIN == 9)
S        #define USBD_RTX_EndPoint9             USBD_RTX_CDC_ACM_EP_BULK_Event
S      #elif  (USBD_CDC_ACM_EP_BULKIN == 10)
S        #define USBD_RTX_EndPoint10            USBD_RTX_CDC_ACM_EP_BULK_Event
S      #elif  (USBD_CDC_ACM_EP_BULKIN == 11)
S        #define USBD_RTX_EndPoint11            USBD_RTX_CDC_ACM_EP_BULK_Event
S      #elif  (USBD_CDC_ACM_EP_BULKIN == 12)
S        #define USBD_RTX_EndPoint12            USBD_RTX_CDC_ACM_EP_BULK_Event
S      #elif  (USBD_CDC_ACM_EP_BULKIN == 13)
S        #define USBD_RTX_EndPoint13            USBD_RTX_CDC_ACM_EP_BULK_Event
S      #elif  (USBD_CDC_ACM_EP_BULKIN == 14)
S        #define USBD_RTX_EndPoint14            USBD_RTX_CDC_ACM_EP_BULK_Event
S      #elif  (USBD_CDC_ACM_EP_BULKIN == 15)
S        #define USBD_RTX_EndPoint15            USBD_RTX_CDC_ACM_EP_BULK_Event
S      #endif
S    #endif
N  #else
N    #if    (USBD_CDC_ACM_EP_BULKIN != USBD_CDC_ACM_EP_BULKOUT)
X    #if    (2 != 2)
S      #if    (USBD_CDC_ACM_EP_BULKIN == 1)
S        #define USBD_EndPoint1                 USBD_CDC_ACM_EP_BULKIN_Event
S      #elif  (USBD_CDC_ACM_EP_BULKIN == 2)
S        #define USBD_EndPoint2                 USBD_CDC_ACM_EP_BULKIN_Event
S      #elif  (USBD_CDC_ACM_EP_BULKIN == 3)
S        #define USBD_EndPoint3                 USBD_CDC_ACM_EP_BULKIN_Event
S      #elif  (USBD_CDC_ACM_EP_BULKIN == 4)
S        #define USBD_EndPoint4                 USBD_CDC_ACM_EP_BULKIN_Event
S      #elif  (USBD_CDC_ACM_EP_BULKIN == 5)
S        #define USBD_EndPoint5                 USBD_CDC_ACM_EP_BULKIN_Event
S      #elif  (USBD_CDC_ACM_EP_BULKIN == 6)
S        #define USBD_EndPoint6                 USBD_CDC_ACM_EP_BULKIN_Event
S      #elif  (USBD_CDC_ACM_EP_BULKIN == 7)
S        #define USBD_EndPoint7                 USBD_CDC_ACM_EP_BULKIN_Event
S      #elif  (USBD_CDC_ACM_EP_BULKIN == 8)
S        #define USBD_EndPoint8                 USBD_CDC_ACM_EP_BULKIN_Event
S      #elif  (USBD_CDC_ACM_EP_BULKIN == 9)
S        #define USBD_EndPoint9                 USBD_CDC_ACM_EP_BULKIN_Event
S      #elif  (USBD_CDC_ACM_EP_BULKIN == 10)
S        #define USBD_EndPoint10                USBD_CDC_ACM_EP_BULKIN_Event
S      #elif  (USBD_CDC_ACM_EP_BULKIN == 11)
S        #define USBD_EndPoint11                USBD_CDC_ACM_EP_BULKIN_Event
S      #elif  (USBD_CDC_ACM_EP_BULKIN == 12)
S        #define USBD_EndPoint12                USBD_CDC_ACM_EP_BULKIN_Event
S      #elif  (USBD_CDC_ACM_EP_BULKIN == 13)
S        #define USBD_EndPoint13                USBD_CDC_ACM_EP_BULKIN_Event
S      #elif  (USBD_CDC_ACM_EP_BULKIN == 14)
S        #define USBD_EndPoint14                USBD_CDC_ACM_EP_BULKIN_Event
S      #elif  (USBD_CDC_ACM_EP_BULKIN == 15)
S        #define USBD_EndPoint15                USBD_CDC_ACM_EP_BULKIN_Event
S      #endif
S
S      #if    (USBD_CDC_ACM_EP_BULKOUT == 1)
S        #define USBD_EndPoint1                 USBD_CDC_ACM_EP_BULKOUT_Event
S      #elif  (USBD_CDC_ACM_EP_BULKOUT == 2)
S        #define USBD_EndPoint2                 USBD_CDC_ACM_EP_BULKOUT_Event
S      #elif  (USBD_CDC_ACM_EP_BULKOUT == 3)
S        #define USBD_EndPoint3                 USBD_CDC_ACM_EP_BULKOUT_Event
S      #elif  (USBD_CDC_ACM_EP_BULKOUT == 4)
S        #define USBD_EndPoint4                 USBD_CDC_ACM_EP_BULKOUT_Event
S      #elif  (USBD_CDC_ACM_EP_BULKOUT == 5)
S        #define USBD_EndPoint5                 USBD_CDC_ACM_EP_BULKOUT_Event
S      #elif  (USBD_CDC_ACM_EP_BULKOUT == 6)
S        #define USBD_EndPoint6                 USBD_CDC_ACM_EP_BULKOUT_Event
S      #elif  (USBD_CDC_ACM_EP_BULKOUT == 7)
S        #define USBD_EndPoint7                 USBD_CDC_ACM_EP_BULKOUT_Event
S      #elif  (USBD_CDC_ACM_EP_BULKOUT == 8)
S        #define USBD_EndPoint8                 USBD_CDC_ACM_EP_BULKOUT_Event
S      #elif  (USBD_CDC_ACM_EP_BULKOUT == 9)
S        #define USBD_EndPoint9                 USBD_CDC_ACM_EP_BULKOUT_Event
S      #elif  (USBD_CDC_ACM_EP_BULKOUT == 10)
S        #define USBD_EndPoint10                USBD_CDC_ACM_EP_BULKOUT_Event
S      #elif  (USBD_CDC_ACM_EP_BULKOUT == 11)
S        #define USBD_EndPoint11                USBD_CDC_ACM_EP_BULKOUT_Event
S      #elif  (USBD_CDC_ACM_EP_BULKOUT == 12)
S        #define USBD_EndPoint12                USBD_CDC_ACM_EP_BULKOUT_Event
S      #elif  (USBD_CDC_ACM_EP_BULKOUT == 13)
S        #define USBD_EndPoint13                USBD_CDC_ACM_EP_BULKOUT_Event
S      #elif  (USBD_CDC_ACM_EP_BULKOUT == 14)
S        #define USBD_EndPoint14                USBD_CDC_ACM_EP_BULKOUT_Event
S      #elif  (USBD_CDC_ACM_EP_BULKOUT == 15)
S        #define USBD_EndPoint15                USBD_CDC_ACM_EP_BULKOUT_Event
S      #endif
N    #else
N      #if    (USBD_CDC_ACM_EP_BULKIN == 1)
X      #if    (2 == 1)
S        #define USBD_EndPoint1                 USBD_CDC_ACM_EP_BULK_Event
N      #elif  (USBD_CDC_ACM_EP_BULKIN == 2)
X      #elif  (2 == 2)
N        #define USBD_EndPoint2                 USBD_CDC_ACM_EP_BULK_Event
N      #elif  (USBD_CDC_ACM_EP_BULKIN == 3)
S        #define USBD_EndPoint3                 USBD_CDC_ACM_EP_BULK_Event
S      #elif  (USBD_CDC_ACM_EP_BULKIN == 4)
S        #define USBD_EndPoint4                 USBD_CDC_ACM_EP_BULK_Event
S      #elif  (USBD_CDC_ACM_EP_BULKIN == 5)
S        #define USBD_EndPoint5                 USBD_CDC_ACM_EP_BULK_Event
S      #elif  (USBD_CDC_ACM_EP_BULKIN == 6)
S        #define USBD_EndPoint6                 USBD_CDC_ACM_EP_BULK_Event
S      #elif  (USBD_CDC_ACM_EP_BULKIN == 7)
S        #define USBD_EndPoint7                 USBD_CDC_ACM_EP_BULK_Event
S      #elif  (USBD_CDC_ACM_EP_BULKIN == 8)
S        #define USBD_EndPoint8                 USBD_CDC_ACM_EP_BULK_Event
S      #elif  (USBD_CDC_ACM_EP_BULKIN == 9)
S        #define USBD_EndPoint9                 USBD_CDC_ACM_EP_BULK_Event
S      #elif  (USBD_CDC_ACM_EP_BULKIN == 10)
S        #define USBD_EndPoint10                USBD_CDC_ACM_EP_BULK_Event
S      #elif  (USBD_CDC_ACM_EP_BULKIN == 11)
S        #define USBD_EndPoint11                USBD_CDC_ACM_EP_BULK_Event
S      #elif  (USBD_CDC_ACM_EP_BULKIN == 12)
S        #define USBD_EndPoint12                USBD_CDC_ACM_EP_BULK_Event
S      #elif  (USBD_CDC_ACM_EP_BULKIN == 13)
S        #define USBD_EndPoint13                USBD_CDC_ACM_EP_BULK_Event
S      #elif  (USBD_CDC_ACM_EP_BULKIN == 14)
S        #define USBD_EndPoint14                USBD_CDC_ACM_EP_BULK_Event
S      #elif  (USBD_CDC_ACM_EP_BULKIN == 15)
S        #define USBD_EndPoint15                USBD_CDC_ACM_EP_BULK_Event
N      #endif
N    #endif
N  #endif
N#else
S  BOOL USBD_EndPoint0_Setup_CDC_ReqToIF(void)                                       { return (__FALSE); }
S  BOOL USBD_EndPoint0_Out_CDC_ReqToIF (void)                                        { return (__FALSE); }
N#endif  /* (USBD_CDC_ACM_ENABLE) */
N
N#if    (USBD_CLS_ENABLE)
X#if    (0)
N#else
N  BOOL USBD_EndPoint0_Setup_CLS_ReqToDEV  (void)                                        { return (__FALSE); }
X  BOOL USBD_EndPoint0_Setup_CLS_ReqToDEV  (void)                                        { return (0); }
N  BOOL USBD_EndPoint0_Setup_CLS_ReqToIF   (void)                                        { return (__FALSE); }
X  BOOL USBD_EndPoint0_Setup_CLS_ReqToIF   (void)                                        { return (0); }
N  BOOL USBD_EndPoint0_Setup_CLS_ReqToEP   (void)                                        { return (__FALSE); }
X  BOOL USBD_EndPoint0_Setup_CLS_ReqToEP   (void)                                        { return (0); }
N  BOOL USBD_EndPoint0_Out_CLS_ReqToDEV    (void)                                        { return (__FALSE); }
X  BOOL USBD_EndPoint0_Out_CLS_ReqToDEV    (void)                                        { return (0); }
N  BOOL USBD_EndPoint0_Out_CLS_ReqToIF     (void)                                        { return (__FALSE); }
X  BOOL USBD_EndPoint0_Out_CLS_ReqToIF     (void)                                        { return (0); }
N  BOOL USBD_EndPoint0_Out_CLS_ReqToEP     (void)                                        { return (__FALSE); }
X  BOOL USBD_EndPoint0_Out_CLS_ReqToEP     (void)                                        { return (0); }
N#endif  /* (USBD_CLS_ENABLE) */
N
N#if   ((USBD_CDC_ACM_ENABLE))
X#if   ((1))
N  #ifndef __RTX
N  void USBD_Reset_Event (void) {
N    #if    (USBD_CDC_ACM_ENABLE)
X    #if    (1)
N    USBD_CDC_ACM_Reset_Event ();
N    #endif
N  }
N  #endif
N#endif  /* ((USBD_CDC_ACM_ENABLE)) */
N
N#if   ((USBD_HID_ENABLE) || (USBD_ADC_ENABLE) || (USBD_CDC_ACM_ENABLE) || (USBD_CLS_ENABLE))
X#if   ((1) || (0) || (1) || (0))
N  #ifndef __RTX
N  void USBD_SOF_Event (void) {
N    #if    (USBD_HID_ENABLE)
X    #if    (1)
N    USBD_HID_SOF_Event     ();
N    #endif
N    #if    (USBD_ADC_ENABLE)
X    #if    (0)
S    USBD_ADC_SOF_Event     ();
N    #endif
N    #if    (USBD_CDC_ACM_ENABLE)
X    #if    (1)
N    USBD_CDC_ACM_SOF_Event ();
N    #endif
N    #if    (USBD_CLS_ENABLE)
X    #if    (0)
S    USBD_CLS_SOF_Event     ();
N    #endif
N  }
N  #endif
N#endif  /* ((USBD_HID_ENABLE) || (USBD_ADC_ENABLE) || (USBD_CDC_ACM_ENABLE) || (USBD_CLS_ENABLE)) */
N
N/* USB Device - Device Events Callback Functions */
N__weak   void USBD_Power_Event       (BOOL power);
N__weak   void USBD_Reset_Event       (void);
N__weak   void USBD_Suspend_Event     (void);
N__weak   void USBD_Resume_Event      (void);
N__weak   void USBD_WakeUp_Event      (void);
N__weak   void USBD_SOF_Event         (void);
N__weak   void USBD_Error_Event       (U32 error);
N
N/* USB Device - Device Events Callback Pointers */
Nvoid (* const USBD_P_Power_Event    )(BOOL power) = USBD_Power_Event;
Nvoid (* const USBD_P_Reset_Event    )(void)       = USBD_Reset_Event;
Nvoid (* const USBD_P_Suspend_Event  )(void)       = USBD_Suspend_Event;
Nvoid (* const USBD_P_Resume_Event   )(void)       = USBD_Resume_Event;
Nvoid (* const USBD_P_WakeUp_Event   )(void)       = USBD_WakeUp_Event;
Nvoid (* const USBD_P_SOF_Event      )(void)       = USBD_SOF_Event;
Nvoid (* const USBD_P_Error_Event    )(U32 error)  = USBD_Error_Event;
N
N/* USB Device - Endpoint Events Callback Functions */
Nextern   void USBD_EndPoint0         (U32 event);
N#ifndef       USBD_EndPoint1
S__weak   void USBD_EndPoint1         (U32 event);
N#endif
N#ifndef       USBD_EndPoint2
S__weak   void USBD_EndPoint2         (U32 event);
N#endif
N#ifndef       USBD_EndPoint3
S__weak   void USBD_EndPoint3         (U32 event);
N#endif
N#ifndef       USBD_EndPoint4
N__weak   void USBD_EndPoint4         (U32 event);
N#endif
N#ifndef       USBD_EndPoint5
N__weak   void USBD_EndPoint5         (U32 event);
N#endif
N#ifndef       USBD_EndPoint6
N__weak   void USBD_EndPoint6         (U32 event);
N#endif
N#ifndef       USBD_EndPoint7
N__weak   void USBD_EndPoint7         (U32 event);
N#endif
N#ifndef       USBD_EndPoint8
N__weak   void USBD_EndPoint8         (U32 event);
N#endif
N#ifndef       USBD_EndPoint9
N__weak   void USBD_EndPoint9         (U32 event);
N#endif
N#ifndef       USBD_EndPoint10
N__weak   void USBD_EndPoint10        (U32 event);
N#endif
N#ifndef       USBD_EndPoint11
N__weak   void USBD_EndPoint11        (U32 event);
N#endif
N#ifndef       USBD_EndPoint12
N__weak   void USBD_EndPoint12        (U32 event);
N#endif
N#ifndef       USBD_EndPoint13
N__weak   void USBD_EndPoint13        (U32 event);
N#endif
N#ifndef       USBD_EndPoint14
N__weak   void USBD_EndPoint14        (U32 event);
N#endif
N#ifndef       USBD_EndPoint15
N__weak   void USBD_EndPoint15        (U32 event);
N#endif
N
N/* USB Device - Endpoint Events Callback Pointers */
Nvoid (* const USBD_P_EP[16])         (U32 event) = {
N  USBD_EndPoint0,
N  USBD_EndPoint1,
X  USBD_CDC_ACM_EP_INTIN_Event,
N  USBD_EndPoint2,
X  USBD_CDC_ACM_EP_BULK_Event,
N  USBD_EndPoint3,
X  USBD_HID_EP_INT_Event,
N  USBD_EndPoint4,
N  USBD_EndPoint5,
N  USBD_EndPoint6,
N  USBD_EndPoint7,
N  USBD_EndPoint8,
N  USBD_EndPoint9,
N  USBD_EndPoint10,
N  USBD_EndPoint11,
N  USBD_EndPoint12,
N  USBD_EndPoint13,
N  USBD_EndPoint14,
N  USBD_EndPoint15
N};
N
N/* USB Device - Core Events Callback Functions */
N__weak   void USBD_Configure_Event   (void);
N__weak   void USBD_Interface_Event   (void);
N__weak   void USBD_Feature_Event     (void);
N
N/* USB Device - Core Events Callback Pointers */
Nvoid (* const USBD_P_Configure_Event)(void)       = USBD_Configure_Event;
Nvoid (* const USBD_P_Interface_Event)(void)       = USBD_Interface_Event;
Nvoid (* const USBD_P_Feature_Event  )(void)       = USBD_Feature_Event;
N
N#ifdef __RTX
Sconst BOOL __rtx = __TRUE;
S
S#if   ((USBD_HID_ENABLE) || (USBD_ADC_ENABLE) || (USBD_CDC_ACM_ENABLE) || (USBD_CLS_ENABLE))
S__weak __task void USBD_RTX_Device     (void)   {
S  U16 evt;
S
S  for (;;) {
S    os_evt_wait_or(0xFFFF, 0xFFFF);         /* Wait for an Event */
S    evt = os_evt_get();                     /* Get Event Flags */
S
S    if (evt & USBD_EVT_RESET) {
S#if (USBD_CDC_ACM_ENABLE)
S      USBD_CDC_ACM_Reset_Event ();
S#endif
S    }
S
S    if (evt & USBD_EVT_SOF) {
S#if (USBD_HID_ENABLE)
S      USBD_HID_SOF_Event     ();
S#endif
S#if (USBD_ADC_ENABLE)
S      USBD_ADC_SOF_Event     ();
S#endif
S#if (USBD_CDC_ACM_ENABLE)
S      USBD_CDC_ACM_SOF_Event ();
S#endif
S#if (USBD_CLS_ENABLE)
S      USBD_CLS_SOF_Event     ();
S#endif
S    }
S  }
S}
S#else
S__weak __task void USBD_RTX_Device     (void);
S#endif
S
S/* USB Device - Device Events Callback Pointer */
Svoid (* const USBD_RTX_P_Device)(void)= USBD_RTX_Device;
S
S/* USB Device Endpoint Events Callback Functions */
Sextern __task void USBD_RTX_EndPoint0  (void);
S#ifndef       USBD_RTX_EndPoint1
S__weak __task void USBD_RTX_EndPoint1  (void);
S#endif
S#ifndef       USBD_RTX_EndPoint2
S__weak __task void USBD_RTX_EndPoint2  (void);
S#endif
S#ifndef       USBD_RTX_EndPoint3
S__weak __task void USBD_RTX_EndPoint3  (void);
S#endif
S#ifndef       USBD_RTX_EndPoint4
S__weak __task void USBD_RTX_EndPoint4  (void);
S#endif
S#ifndef       USBD_RTX_EndPoint5
S__weak __task void USBD_RTX_EndPoint5  (void);
S#endif
S#ifndef       USBD_RTX_EndPoint6
S__weak __task void USBD_RTX_EndPoint6  (void);
S#endif
S#ifndef       USBD_RTX_EndPoint7
S__weak __task void USBD_RTX_EndPoint7  (void);
S#endif
S#ifndef       USBD_RTX_EndPoint8
S__weak __task void USBD_RTX_EndPoint8  (void);
S#endif
S#ifndef       USBD_RTX_EndPoint9
S__weak __task void USBD_RTX_EndPoint9  (void);
S#endif
S#ifndef       USBD_RTX_EndPoint10
S__weak __task void USBD_RTX_EndPoint10 (void);
S#endif
S#ifndef       USBD_RTX_EndPoint11
S__weak __task void USBD_RTX_EndPoint11 (void);
S#endif
S#ifndef       USBD_RTX_EndPoint12
S__weak __task void USBD_RTX_EndPoint12 (void);
S#endif
S#ifndef       USBD_RTX_EndPoint13
S__weak __task void USBD_RTX_EndPoint13 (void);
S#endif
S#ifndef       USBD_RTX_EndPoint14
S__weak __task void USBD_RTX_EndPoint14 (void);
S#endif
S#ifndef       USBD_RTX_EndPoint15
S__weak __task void USBD_RTX_EndPoint15 (void);
S#endif
S
S#if    (USBD_HID_ENABLE)
S__weak __task void USBD_RTX_Core       (void) {
S  U16 evt;
S
S  for (;;) {
S    os_evt_wait_or(0xFFFF, 0xFFFF);         /* Wait for an Event */
S    evt = os_evt_get();                     /* Get Event Flags */
S
S    if (evt & USBD_EVT_SET_CFG) {
S      USBD_HID_Configure_Event ();
S    }
S  }
S}
S#else
S__weak __task void USBD_RTX_Core       (void);
S#endif
S
S/* USB Device - Core Events Callback Pointer */
Svoid (* const USBD_RTX_P_Core)(void)  = USBD_RTX_Core;
S
S/* USB Device Endpoint Events Callback Pointers */
Svoid (* const USBD_RTX_P_EP[16]) (void) = {
S  USBD_RTX_EndPoint0,
S  USBD_RTX_EndPoint1,
S  USBD_RTX_EndPoint2,
S  USBD_RTX_EndPoint3,
S  USBD_RTX_EndPoint4,
S  USBD_RTX_EndPoint5,
S  USBD_RTX_EndPoint6,
S  USBD_RTX_EndPoint7,
S  USBD_RTX_EndPoint8,
S  USBD_RTX_EndPoint9,
S  USBD_RTX_EndPoint10,
S  USBD_RTX_EndPoint11,
S  USBD_RTX_EndPoint12,
S  USBD_RTX_EndPoint13,
S  USBD_RTX_EndPoint14,
S  USBD_RTX_EndPoint15,
S};
S
Svoid usbd_os_evt_set     (U16 event_flags, U32 task)                  { if (task) { os_evt_set(event_flags, task); } }
SU16  usbd_os_evt_get     (void)                                       { return (os_evt_get()); }
SU32  usbd_os_evt_wait_or (U16 wait_flags, U16 timeout)                { return (os_evt_wait_or (wait_flags, timeout)); }
S
N#else
Nconst BOOL __rtx = __FALSE;
Xconst BOOL __rtx = 0;
N
Nvoid usbd_os_evt_set     (U16 event_flags, U32 task)                  { }
NU16  usbd_os_evt_get     (void)                                       { return (0); }
NU32  usbd_os_evt_wait_or (U16 wait_flags, U16 timeout)                { return (0); }
N#endif
N
Nvoid usbd_class_init     (void)                                       {
N#if (USBD_HID_ENABLE)
X#if (1)
N                                                                        usbd_hid_init();
N#endif
N#if (USBD_MSC_ENABLE)
X#if (0)
S                                                                        usbd_msc_init();
N#endif
N#if (USBD_ADC_ENABLE)
X#if (0)
S                                                                        usbd_adc_init();
N#endif
N#if (USBD_CDC_ACM_ENABLE)
X#if (1)
N                                                                        USBD_CDC_ACM_Initialize();
N#endif
N#if (USBD_CLS_ENABLE)
X#if (0)
S                                                                        usbd_cls_init();
N#endif
N                                                                      }
N
Nvoid USBD_RTX_TaskInit (void) {
N
N#ifdef __RTX
S  /* Initialize memory pools for endpoints */
S  U32 i;
S
S  USBD_RTX_DevTask = 0;
S  if (USBD_RTX_P_Device) {
S    USBD_RTX_DevTask = os_tsk_create(USBD_RTX_Device,      3);
S  }
S
S  for (i = 0; i <= 15; i++) {
S    USBD_RTX_EPTask[i] = 0;
S    if (USBD_RTX_P_EP[i]) {
S      USBD_RTX_EPTask[i] = os_tsk_create(USBD_RTX_P_EP[i], 2);
S    }
S  }
S
S  USBD_RTX_CoreTask = 0;
S  if (USBD_RTX_P_Core) {
S    USBD_RTX_CoreTask = os_tsk_create(USBD_RTX_Core,       2);
S  }
N#endif
N}
N
N
N/*------------------------------------------------------------------------------
N *      USB Device Descriptors
N *----------------------------------------------------------------------------*/
N
N#define USBD_ADC_DESC_LEN                 (USBD_MULTI_IF * USB_INTERFACE_ASSOC_DESC_SIZE + USB_INTERFACE_DESC_SIZE +                              \
N                                           AUDIO_CONTROL_INTERFACE_DESC_SZ(1) + AUDIO_INPUT_TERMINAL_DESC_SIZE  +                                 \
N                                           AUDIO_FEATURE_UNIT_DESC_SZ(1,1) + AUDIO_OUTPUT_TERMINAL_DESC_SIZE + USB_INTERFACE_DESC_SIZE          + \
N                                           USB_INTERFACE_DESC_SIZE + AUDIO_STREAMING_INTERFACE_DESC_SIZE + AUDIO_FORMAT_TYPE_I_DESC_SZ(1)       + \
N                                           AUDIO_STANDARD_ENDPOINT_DESC_SIZE + AUDIO_STREAMING_ENDPOINT_DESC_SIZE)
X#define USBD_ADC_DESC_LEN                 (USBD_MULTI_IF * USB_INTERFACE_ASSOC_DESC_SIZE + USB_INTERFACE_DESC_SIZE +                                                                         AUDIO_CONTROL_INTERFACE_DESC_SZ(1) + AUDIO_INPUT_TERMINAL_DESC_SIZE  +                                                                            AUDIO_FEATURE_UNIT_DESC_SZ(1,1) + AUDIO_OUTPUT_TERMINAL_DESC_SIZE + USB_INTERFACE_DESC_SIZE          +                                            USB_INTERFACE_DESC_SIZE + AUDIO_STREAMING_INTERFACE_DESC_SIZE + AUDIO_FORMAT_TYPE_I_DESC_SZ(1)       +                                            AUDIO_STANDARD_ENDPOINT_DESC_SIZE + AUDIO_STREAMING_ENDPOINT_DESC_SIZE)
N#define USBD_CDC_ACM_DESC_LEN             (USB_INTERFACE_DESC_SIZE + USBD_MULTI_IF * USB_INTERFACE_ASSOC_DESC_SIZE + 0x0013                     + \
N                                           USB_ENDPOINT_DESC_SIZE + USB_INTERFACE_DESC_SIZE + 2*USB_ENDPOINT_DESC_SIZE)
X#define USBD_CDC_ACM_DESC_LEN             (USB_INTERFACE_DESC_SIZE + USBD_MULTI_IF * USB_INTERFACE_ASSOC_DESC_SIZE + 0x0013                     +                                            USB_ENDPOINT_DESC_SIZE + USB_INTERFACE_DESC_SIZE + 2*USB_ENDPOINT_DESC_SIZE)
N#define USBD_HID_DESC_LEN                 (USB_INTERFACE_DESC_SIZE + USB_HID_DESC_SIZE                                                          + \
N                                          (USB_ENDPOINT_DESC_SIZE*(1+(USBD_HID_EP_INTOUT != 0))))
X#define USBD_HID_DESC_LEN                 (USB_INTERFACE_DESC_SIZE + USB_HID_DESC_SIZE                                                          +                                           (USB_ENDPOINT_DESC_SIZE*(1+(USBD_HID_EP_INTOUT != 0))))
N#define USBD_MSC_DESC_LEN                 (USB_INTERFACE_DESC_SIZE + 2*USB_ENDPOINT_DESC_SIZE)
N#define USBD_HID_DESC_OFS                 (USB_CONFIGUARTION_DESC_SIZE + USB_INTERFACE_DESC_SIZE                                                + \
N                                           USBD_ADC_ENABLE * USBD_ADC_DESC_LEN + USBD_CDC_ACM_ENABLE * USBD_CDC_ACM_DESC_LEN)
X#define USBD_HID_DESC_OFS                 (USB_CONFIGUARTION_DESC_SIZE + USB_INTERFACE_DESC_SIZE                                                +                                            USBD_ADC_ENABLE * USBD_ADC_DESC_LEN + USBD_CDC_ACM_ENABLE * USBD_CDC_ACM_DESC_LEN)
N
N#define USBD_WTOTALLENGTH                 (USB_CONFIGUARTION_DESC_SIZE +                 \
N                                           USBD_ADC_DESC_LEN     * USBD_ADC_ENABLE     + \
N                                           USBD_CDC_ACM_DESC_LEN * USBD_CDC_ACM_ENABLE + \
N                                           USBD_HID_DESC_LEN     * USBD_HID_ENABLE     + \
N                                           USBD_MSC_DESC_LEN     * USBD_MSC_ENABLE)
X#define USBD_WTOTALLENGTH                 (USB_CONFIGUARTION_DESC_SIZE +                                                            USBD_ADC_DESC_LEN     * USBD_ADC_ENABLE     +                                            USBD_CDC_ACM_DESC_LEN * USBD_CDC_ACM_ENABLE +                                            USBD_HID_DESC_LEN     * USBD_HID_ENABLE     +                                            USBD_MSC_DESC_LEN     * USBD_MSC_ENABLE)
N
N/*------------------------------------------------------------------------------
N  Default HID Report Descriptor
N *----------------------------------------------------------------------------*/
N
N/*   Bit    Input       Output
N      0     IN0          OUT0
N      1     IN1          OUT1
N      2     IN2          OUT2
N      3     IN3          OUT3
N      4     IN4          OUT4
N      5     IN5          OUT5
N      6     IN6          OUT6
N      7     IN7          OUT7
N*/
N
N__weak \
Nconst U8 USBD_HID_ReportDescriptor[] = {
X__weak const U8 USBD_HID_ReportDescriptor[] = {
N  HID_UsagePageVendor( 0x00                      ),
X  0x06,0x00,0xFF,
N  HID_Usage          ( 0x01                      ),
X  0x09,0x01,
N  HID_Collection     ( HID_Application           ),
X  0xA1,0x01,
N    HID_LogicalMin   ( 0                         ), /* value range: 0 - 0xFF */
X    0x15,0,  
N    HID_LogicalMaxS  ( 0xFF                      ),
X    0x26,(0xFF&0xFF),((0xFF>>8)&0xFF),
N    HID_ReportSize   ( 8                         ), /* 8 bits */
X    0x75,8,  
N#if (USBD_HID_INREPORT_MAX_SZ > 255)
X#if (64 > 255)
S    HID_ReportCountS ( USBD_HID_INREPORT_MAX_SZ  ),
N#else
N    HID_ReportCount  ( USBD_HID_INREPORT_MAX_SZ  ),
X    0x95,64,
N#endif
N    HID_Usage        ( 0x01                      ),
X    0x09,0x01,
N    HID_Input        ( HID_Data | HID_Variable | HID_Absolute ),
X    0x81,0<<0 | 1<<1 | 0<<2,
N#if (USBD_HID_OUTREPORT_MAX_SZ > 255)
X#if (64 > 255)
S    HID_ReportCountS ( USBD_HID_OUTREPORT_MAX_SZ ),
N#else
N    HID_ReportCount  ( USBD_HID_OUTREPORT_MAX_SZ ),
X    0x95,64,
N#endif
N    HID_Usage        ( 0x01                      ),
X    0x09,0x01,
N    HID_Output       ( HID_Data | HID_Variable | HID_Absolute ),
X    0x91,0<<0 | 1<<1 | 0<<2,
N#if (USBD_HID_FEATREPORT_MAX_SZ > 255)
X#if (1 > 255)
S    HID_ReportCountS ( USBD_HID_FEATREPORT_MAX_SZ),
N#else
N    HID_ReportCount  ( USBD_HID_FEATREPORT_MAX_SZ),
X    0x95,1,
N#endif
N    HID_Usage        ( 0x01                      ),
X    0x09,0x01,
N    HID_Feature      ( HID_Data | HID_Variable | HID_Absolute ),
X    0xB1,0<<0 | 1<<1 | 0<<2,
N  HID_EndCollection,
X  0xC0,
N};
N
N__weak \
Nconst U16 USBD_HID_ReportDescriptorSize = sizeof(USBD_HID_ReportDescriptor);
X__weak const U16 USBD_HID_ReportDescriptorSize = sizeof(USBD_HID_ReportDescriptor);
N
N__weak \
Nconst U16 USBD_HID_DescriptorOffset     = USBD_HID_DESC_OFS;
X__weak const U16 USBD_HID_DescriptorOffset     = ((sizeof(USB_CONFIGURATION_DESCRIPTOR)) + (sizeof(USB_INTERFACE_DESCRIPTOR)) + 0 * ((1*(1|0|0)) * (sizeof(USB_INTERFACE_ASSOCIATION_DESCRIPTOR)) + (sizeof(USB_INTERFACE_DESCRIPTOR)) + 0x08+1 + 0x0C + 0x07+(1+1)*1 + 0x09 + (sizeof(USB_INTERFACE_DESCRIPTOR)) + (sizeof(USB_INTERFACE_DESCRIPTOR)) + 0x07 + 0x08+(1*3) + 0x09 + 0x07) + 1 * ((sizeof(USB_INTERFACE_DESCRIPTOR)) + (1*(1|0|0)) * (sizeof(USB_INTERFACE_ASSOCIATION_DESCRIPTOR)) + 0x0013 + (sizeof(USB_ENDPOINT_DESCRIPTOR)) + (sizeof(USB_INTERFACE_DESCRIPTOR)) + 2*(sizeof(USB_ENDPOINT_DESCRIPTOR))));
N
N/* USB Device Standard Descriptor */
N__weak \
Nconst U8 USBD_DeviceDescriptor[] = {
X__weak const U8 USBD_DeviceDescriptor[] = {
N  USB_DEVICE_DESC_SIZE,                 /* bLength */
X  (sizeof(USB_DEVICE_DESCRIPTOR)),                  
N  USB_DEVICE_DESCRIPTOR_TYPE,           /* bDescriptorType */
X  1,            
N#if ((USBD_HS_ENABLE) || (USBD_MULTI_IF))
X#if ((0) || ((1*(1|0|0))))
N  WBVAL(0x0200), /* 2.00 */             /* bcdUSB */
X  (0x0200 & 0xFF),((0x0200 >> 8) & 0xFF),                
N#else
S  WBVAL(0x0110), /* 1.10 */             /* bcdUSB */
N#endif
N#if (USBD_MULTI_IF)
X#if ((1*(1|0|0)))
N  USB_DEVICE_CLASS_MISCELLANEOUS,       /* bDeviceClass */
X  0xEF,        
N  0x02,                                 /* bDeviceSubClass */
N  0x01,                                 /* bDeviceProtocol */
N#elif (USBD_CDC_ACM_ENABLE)
S  USB_DEVICE_CLASS_COMMUNICATIONS,      /* bDeviceClass CDC*/
S  0x00,                                 /* bDeviceSubClass */
S  0x00,                                 /* bDeviceProtocol */
S#else
S  0x00,                                 /* bDeviceClass */
S  0x00,                                 /* bDeviceSubClass */
S  0x00,                                 /* bDeviceProtocol */
N#endif
N  USBD_MAX_PACKET0,                     /* bMaxPacketSize0 */
X  64,                      
N  WBVAL(USBD_DEVDESC_IDVENDOR),         /* idVendor */
X  (0xC251 & 0xFF),((0xC251 >> 8) & 0xFF),          
N  WBVAL(USBD_DEVDESC_IDPRODUCT),        /* idProduct */
X  (0xF001 & 0xFF),((0xF001 >> 8) & 0xFF),         
N  WBVAL(USBD_DEVDESC_BCDDEVICE),        /* bcdDevice */
X  (0x0100 & 0xFF),((0x0100 >> 8) & 0xFF),         
N  0x01,                                 /* iManufacturer */
N  0x02,                                 /* iProduct */
N  0x03*USBD_STRDESC_SER_ENABLE,         /* iSerialNumber */
X  0x03*1,          
N  0x01                                  /* bNumConfigurations: one possible configuration*/
N};
N
N#if (USBD_HS_ENABLE)
X#if (0)
S/* USB Device Qualifier Descriptor (for Full Speed) */
S__weak \
Sconst U8 USBD_DeviceQualifier[] = {
X__weak const U8 USBD_DeviceQualifier[] = {
S  USB_DEVICE_QUALI_SIZE,                /* bLength */
S  USB_DEVICE_QUALIFIER_DESCRIPTOR_TYPE, /* bDescriptorType */
S  WBVAL(0x0200), /* 2.00 */             /* bcdUSB */
S  0x00,                                 /* bDeviceClass */
S  0x00,                                 /* bDeviceSubClass */
S  0x00,                                 /* bDeviceProtocol */
S  USBD_MAX_PACKET0,                     /* bMaxPacketSize0 */
S  0x01,                                 /* bNumConfigurations */
S  0x00                                  /* bReserved */
S};
S
S/* USB Device Qualifier Descriptor for High Speed */
S__weak \
Sconst U8 USBD_DeviceQualifier_HS[] = {
X__weak const U8 USBD_DeviceQualifier_HS[] = {
S  USB_DEVICE_QUALI_SIZE,                /* bLength */
S  USB_DEVICE_QUALIFIER_DESCRIPTOR_TYPE, /* bDescriptorType */
S  WBVAL(0x0200), /* 2.00 */             /* bcdUSB */
S  0x00,                                 /* bDeviceClass */
S  0x00,                                 /* bDeviceSubClass */
S  0x00,                                 /* bDeviceProtocol */
S  USBD_MAX_PACKET0,                     /* bMaxPacketSize0 */
S  0x01,                                 /* bNumConfigurations */
S  0x00                                  /* bReserved */
S};
N#else
N/* USB Device Qualifier Descriptor (for Full Speed) */
N__weak \
Nconst U8 USBD_DeviceQualifier[]    = { 0 };
X__weak const U8 USBD_DeviceQualifier[]    = { 0 };
N
N/* USB Device Qualifier Descriptor for High Speed */
N__weak \
Nconst U8 USBD_DeviceQualifier_HS[] = { 0 };
X__weak const U8 USBD_DeviceQualifier_HS[] = { 0 };
N#endif
N
N#define HID_DESC                                                                                            \
N  /* Interface, Alternate Setting 0, HID Class */                                                           \
N  USB_INTERFACE_DESC_SIZE,              /* bLength */                                                       \
N  USB_INTERFACE_DESCRIPTOR_TYPE,        /* bDescriptorType */                                               \
N  USBD_HID_IF_NUM,                      /* bInterfaceNumber */                                              \
N  0x00,                                 /* bAlternateSetting */                                             \
N  0x01+(USBD_HID_EP_INTOUT != 0),       /* bNumEndpoints */                                                 \
N  USB_DEVICE_CLASS_HUMAN_INTERFACE,     /* bInterfaceClass */                                               \
N  HID_SUBCLASS_NONE,                    /* bInterfaceSubClass */                                            \
N  HID_PROTOCOL_NONE,                    /* bInterfaceProtocol */                                            \
N  USBD_HID_IF_STR_NUM,                  /* iInterface */                                                    \
N                                                                                                            \
N/* HID Class Descriptor */                                                                                  \
N  USB_HID_DESC_SIZE,                    /* bLength */                                                       \
N  HID_HID_DESCRIPTOR_TYPE,              /* bDescriptorType */                                               \
N  WBVAL(0x0100), /* 1.00 */             /* bcdHID */                                                        \
N  0x00,                                 /* bCountryCode */                                                  \
N  0x01,                                 /* bNumDescriptors */                                               \
N  HID_REPORT_DESCRIPTOR_TYPE,           /* bDescriptorType */                                               \
N  WBVAL(USB_HID_REPORT_DESC_SIZE),      /* wDescriptorLength */
X#define HID_DESC                                                                                                                                                            USB_INTERFACE_DESC_SIZE,                                                                        USB_INTERFACE_DESCRIPTOR_TYPE,                                                          USBD_HID_IF_NUM,                                                                       0x00,                                                                                 0x01+(USBD_HID_EP_INTOUT != 0),                                                           USB_DEVICE_CLASS_HUMAN_INTERFACE,                                                       HID_SUBCLASS_NONE,                                                                   HID_PROTOCOL_NONE,                                                                   USBD_HID_IF_STR_NUM,                                                                                                                                                                                                                                                                        USB_HID_DESC_SIZE,                                                                              HID_HID_DESCRIPTOR_TYPE,                                                                WBVAL(0x0100),                                                                          0x00,                                                                                      0x01,                                                                                   HID_REPORT_DESCRIPTOR_TYPE,                                                             WBVAL(USB_HID_REPORT_DESC_SIZE),       
N
N#define HID_EP                          /* HID Endpoint for Low-speed/Full-speed */                         \
N/* Endpoint, HID Interrupt In */                                                                            \
N  USB_ENDPOINT_DESC_SIZE,               /* bLength */                                                       \
N  USB_ENDPOINT_DESCRIPTOR_TYPE,         /* bDescriptorType */                                               \
N  USB_ENDPOINT_IN(USBD_HID_EP_INTIN),   /* bEndpointAddress */                                              \
N  USB_ENDPOINT_TYPE_INTERRUPT,          /* bmAttributes */                                                  \
N  WBVAL(USBD_HID_WMAXPACKETSIZE),       /* wMaxPacketSize */                                                \
N  USBD_HID_BINTERVAL,                   /* bInterval */
X#define HID_EP                                                                                                                                   USB_ENDPOINT_DESC_SIZE,                                                                         USB_ENDPOINT_DESCRIPTOR_TYPE,                                                           USB_ENDPOINT_IN(USBD_HID_EP_INTIN),                                                    USB_ENDPOINT_TYPE_INTERRUPT,                                                               WBVAL(USBD_HID_WMAXPACKETSIZE),                                                          USBD_HID_BINTERVAL,                    
N
N#define HID_EP_INOUT                    /* HID Endpoint for Low-speed/Full-speed */                         \
N/* Endpoint, HID Interrupt In */                                                                            \
N  USB_ENDPOINT_DESC_SIZE,               /* bLength */                                                       \
N  USB_ENDPOINT_DESCRIPTOR_TYPE,         /* bDescriptorType */                                               \
N  USB_ENDPOINT_IN(USBD_HID_EP_INTIN),   /* bEndpointAddress */                                              \
N  USB_ENDPOINT_TYPE_INTERRUPT,          /* bmAttributes */                                                  \
N  WBVAL(USBD_HID_WMAXPACKETSIZE),       /* wMaxPacketSize */                                                \
N  USBD_HID_BINTERVAL,                   /* bInterval */                                                     \
N                                                                                                            \
N/* Endpoint, HID Interrupt Out */                                                                           \
N  USB_ENDPOINT_DESC_SIZE,               /* bLength */                                                       \
N  USB_ENDPOINT_DESCRIPTOR_TYPE,         /* bDescriptorType */                                               \
N  USB_ENDPOINT_OUT(USBD_HID_EP_INTOUT), /* bEndpointAddress */                                              \
N  USB_ENDPOINT_TYPE_INTERRUPT,          /* bmAttributes */                                                  \
N  WBVAL(USBD_HID_WMAXPACKETSIZE),       /* wMaxPacketSize */                                                \
N  USBD_HID_BINTERVAL,                   /* bInterval */
X#define HID_EP_INOUT                                                                                                                             USB_ENDPOINT_DESC_SIZE,                                                                         USB_ENDPOINT_DESCRIPTOR_TYPE,                                                           USB_ENDPOINT_IN(USBD_HID_EP_INTIN),                                                    USB_ENDPOINT_TYPE_INTERRUPT,                                                               WBVAL(USBD_HID_WMAXPACKETSIZE),                                                          USBD_HID_BINTERVAL,                                                                                                                                                                                                                                                                   USB_ENDPOINT_DESC_SIZE,                                                                         USB_ENDPOINT_DESCRIPTOR_TYPE,                                                           USB_ENDPOINT_OUT(USBD_HID_EP_INTOUT),                                                  USB_ENDPOINT_TYPE_INTERRUPT,                                                               WBVAL(USBD_HID_WMAXPACKETSIZE),                                                          USBD_HID_BINTERVAL,                    
N
N#define HID_EP_HS                       /* HID Endpoint for High-speed */                                   \
N/* Endpoint, HID Interrupt In */                                                                            \
N  USB_ENDPOINT_DESC_SIZE,               /* bLength */                                                       \
N  USB_ENDPOINT_DESCRIPTOR_TYPE,         /* bDescriptorType */                                               \
N  USB_ENDPOINT_IN(USBD_HID_EP_INTIN),   /* bEndpointAddress */                                              \
N  USB_ENDPOINT_TYPE_INTERRUPT,          /* bmAttributes */                                                  \
N  WBVAL(USBD_HID_HS_WMAXPACKETSIZE),    /* wMaxPacketSize */                                                \
N  USBD_HID_HS_BINTERVAL,                /* bInterval */
X#define HID_EP_HS                                                                                                                                          USB_ENDPOINT_DESC_SIZE,                                                                         USB_ENDPOINT_DESCRIPTOR_TYPE,                                                           USB_ENDPOINT_IN(USBD_HID_EP_INTIN),                                                    USB_ENDPOINT_TYPE_INTERRUPT,                                                               WBVAL(USBD_HID_HS_WMAXPACKETSIZE),                                                       USBD_HID_HS_BINTERVAL,                 
N
N#define HID_EP_INOUT_HS                 /* HID Endpoint for High-speed */                                   \
N/* Endpoint, HID Interrupt In */                                                                            \
N  USB_ENDPOINT_DESC_SIZE,               /* bLength */                                                       \
N  USB_ENDPOINT_DESCRIPTOR_TYPE,         /* bDescriptorType */                                               \
N  USB_ENDPOINT_IN(USBD_HID_EP_INTIN),   /* bEndpointAddress */                                              \
N  USB_ENDPOINT_TYPE_INTERRUPT,          /* bmAttributes */                                                  \
N  WBVAL(USBD_HID_HS_WMAXPACKETSIZE),    /* wMaxPacketSize */                                                \
N  USBD_HID_HS_BINTERVAL,                /* bInterval */                                                     \
N                                                                                                            \
N/* Endpoint, HID Interrupt Out */                                                                           \
N  USB_ENDPOINT_DESC_SIZE,               /* bLength */                                                       \
N  USB_ENDPOINT_DESCRIPTOR_TYPE,         /* bDescriptorType */                                               \
N  USB_ENDPOINT_OUT(USBD_HID_EP_INTOUT), /* bEndpointAddress */                                              \
N  USB_ENDPOINT_TYPE_INTERRUPT,          /* bmAttributes */                                                  \
N  WBVAL(USBD_HID_HS_WMAXPACKETSIZE),    /* wMaxPacketSize */                                                \
N  USBD_HID_HS_BINTERVAL,                /* bInterval */
X#define HID_EP_INOUT_HS                                                                                                                                    USB_ENDPOINT_DESC_SIZE,                                                                         USB_ENDPOINT_DESCRIPTOR_TYPE,                                                           USB_ENDPOINT_IN(USBD_HID_EP_INTIN),                                                    USB_ENDPOINT_TYPE_INTERRUPT,                                                               WBVAL(USBD_HID_HS_WMAXPACKETSIZE),                                                       USBD_HID_HS_BINTERVAL,                                                                                                                                                                                                                                                                USB_ENDPOINT_DESC_SIZE,                                                                         USB_ENDPOINT_DESCRIPTOR_TYPE,                                                           USB_ENDPOINT_OUT(USBD_HID_EP_INTOUT),                                                  USB_ENDPOINT_TYPE_INTERRUPT,                                                               WBVAL(USBD_HID_HS_WMAXPACKETSIZE),                                                       USBD_HID_HS_BINTERVAL,                 
N
N#define MSC_DESC                                                                                            \
N/* Interface, Alternate Setting 0, MSC Class */                                                             \
N  USB_INTERFACE_DESC_SIZE,              /* bLength */                                                       \
N  USB_INTERFACE_DESCRIPTOR_TYPE,        /* bDescriptorType */                                               \
N  USBD_MSC_IF_NUM,                      /* bInterfaceNumber */                                              \
N  0x00,                                 /* bAlternateSetting */                                             \
N  0x02,                                 /* bNumEndpoints */                                                 \
N  USB_DEVICE_CLASS_STORAGE,             /* bInterfaceClass */                                               \
N  MSC_SUBCLASS_SCSI,                    /* bInterfaceSubClass */                                            \
N  MSC_PROTOCOL_BULK_ONLY,               /* bInterfaceProtocol */                                            \
N  USBD_MSC_IF_STR_NUM,                  /* iInterface */
X#define MSC_DESC                                                                                                                                                            USB_INTERFACE_DESC_SIZE,                                                                        USB_INTERFACE_DESCRIPTOR_TYPE,                                                          USBD_MSC_IF_NUM,                                                                       0x00,                                                                                 0x02,                                                                                     USB_DEVICE_CLASS_STORAGE,                                                               MSC_SUBCLASS_SCSI,                                                                   MSC_PROTOCOL_BULK_ONLY,                                                              USBD_MSC_IF_STR_NUM,                   
N
N#define MSC_EP                          /* MSC Endpoints for Low-speed/Full-speed */                        \
N/* Endpoint, EP Bulk IN */                                                                                  \
N  USB_ENDPOINT_DESC_SIZE,               /* bLength */                                                       \
N  USB_ENDPOINT_DESCRIPTOR_TYPE,         /* bDescriptorType */                                               \
N  USB_ENDPOINT_IN(USBD_MSC_EP_BULKIN),  /* bEndpointAddress */                                              \
N  USB_ENDPOINT_TYPE_BULK,               /* bmAttributes */                                                  \
N  WBVAL(USBD_MSC_WMAXPACKETSIZE),       /* wMaxPacketSize */                                                \
N  0x00,                                 /* bInterval: ignore for Bulk transfer */                           \
N                                                                                                            \
N/* Endpoint, EP Bulk OUT */                                                                                 \
N  USB_ENDPOINT_DESC_SIZE,               /* bLength */                                                       \
N  USB_ENDPOINT_DESCRIPTOR_TYPE,         /* bDescriptorType */                                               \
N  USB_ENDPOINT_OUT(USBD_MSC_EP_BULKOUT),/* bEndpointAddress */                                              \
N  USB_ENDPOINT_TYPE_BULK,               /* bmAttributes */                                                  \
N  WBVAL(USBD_MSC_WMAXPACKETSIZE),       /* wMaxPacketSize */                                                \
N  0x00,                                 /* bInterval: ignore for Bulk transfer */
X#define MSC_EP                                                                                                                                        USB_ENDPOINT_DESC_SIZE,                                                                         USB_ENDPOINT_DESCRIPTOR_TYPE,                                                           USB_ENDPOINT_IN(USBD_MSC_EP_BULKIN),                                                   USB_ENDPOINT_TYPE_BULK,                                                                    WBVAL(USBD_MSC_WMAXPACKETSIZE),                                                          0x00,                                                                                                                                                                                                                                                             USB_ENDPOINT_DESC_SIZE,                                                                         USB_ENDPOINT_DESCRIPTOR_TYPE,                                                           USB_ENDPOINT_OUT(USBD_MSC_EP_BULKOUT),                                                 USB_ENDPOINT_TYPE_BULK,                                                                    WBVAL(USBD_MSC_WMAXPACKETSIZE),                                                          0x00,                                  
N
N#define MSC_EP_HS                       /* MSC Endpoints for High-speed */                                  \
N/* Endpoint, EP Bulk IN */                                                                                  \
N  USB_ENDPOINT_DESC_SIZE,               /* bLength */                                                       \
N  USB_ENDPOINT_DESCRIPTOR_TYPE,         /* bDescriptorType */                                               \
N  USB_ENDPOINT_IN(USBD_MSC_EP_BULKIN),  /* bEndpointAddress */                                              \
N  USB_ENDPOINT_TYPE_BULK,               /* bmAttributes */                                                  \
N  WBVAL(USBD_MSC_HS_WMAXPACKETSIZE),    /* wMaxPacketSize */                                                \
N  USBD_MSC_HS_BINTERVAL,                /* bInterval */                                                     \
N                                                                                                            \
N/* Endpoint, EP Bulk OUT */                                                                                 \
N  USB_ENDPOINT_DESC_SIZE,               /* bLength */                                                       \
N  USB_ENDPOINT_DESCRIPTOR_TYPE,         /* bDescriptorType */                                               \
N  USB_ENDPOINT_OUT(USBD_MSC_EP_BULKOUT),/* bEndpointAddress */                                              \
N  USB_ENDPOINT_TYPE_BULK,               /* bmAttributes */                                                  \
N  WBVAL(USBD_MSC_HS_WMAXPACKETSIZE),    /* wMaxPacketSize */                                                \
N  USBD_MSC_HS_BINTERVAL,                /* bInterval */
X#define MSC_EP_HS                                                                                                                                               USB_ENDPOINT_DESC_SIZE,                                                                         USB_ENDPOINT_DESCRIPTOR_TYPE,                                                           USB_ENDPOINT_IN(USBD_MSC_EP_BULKIN),                                                   USB_ENDPOINT_TYPE_BULK,                                                                    WBVAL(USBD_MSC_HS_WMAXPACKETSIZE),                                                       USBD_MSC_HS_BINTERVAL,                                                                                                                                                                                                                                                                      USB_ENDPOINT_DESC_SIZE,                                                                         USB_ENDPOINT_DESCRIPTOR_TYPE,                                                           USB_ENDPOINT_OUT(USBD_MSC_EP_BULKOUT),                                                 USB_ENDPOINT_TYPE_BULK,                                                                    WBVAL(USBD_MSC_HS_WMAXPACKETSIZE),                                                       USBD_MSC_HS_BINTERVAL,                 
N
N#define ADC_DESC_IAD(first,num_of_ifs)  /* ADC: Interface Association Descriptor */                         \
N  USB_INTERFACE_ASSOC_DESC_SIZE,        /* bLength */                                                       \
N  USB_INTERFACE_ASSOCIATION_DESCRIPTOR_TYPE,  /* bDescriptorType */                                         \
N (first),                               /* bFirstInterface */                                               \
N (num_of_ifs),                          /* bInterfaceCount */                                               \
N  USB_DEVICE_CLASS_AUDIO,               /* bFunctionClass */                                                \
N  AUDIO_SUBCLASS_AUDIOCONTROL,          /* bFunctionSubclass */                                             \
N  AUDIO_PROTOCOL_UNDEFINED,             /* bFunctionProtocol */                                             \
N  USBD_ADC_CIF_STR_NUM,                 /* iFunction */                                                     \
N
X#define ADC_DESC_IAD(first,num_of_ifs)                              USB_INTERFACE_ASSOC_DESC_SIZE,                                                                  USB_INTERFACE_ASSOCIATION_DESCRIPTOR_TYPE,                                             (first),                                                                                (num_of_ifs),                                                                            USB_DEVICE_CLASS_AUDIO,                                                                  AUDIO_SUBCLASS_AUDIOCONTROL,                                                          AUDIO_PROTOCOL_UNDEFINED,                                                             USBD_ADC_CIF_STR_NUM,                                                                       
N#define ADC_DESC                                                                                            \
N/* Interface, Alternate Setting 0, Audio Control */                                                         \
N  USB_INTERFACE_DESC_SIZE,              /* bLength */                                                       \
N  USB_INTERFACE_DESCRIPTOR_TYPE,        /* bDescriptorType */                                               \
N  USBD_ADC_CIF_NUM,                     /* bInterfaceNumber */                                              \
N  0x00,                                 /* bAlternateSetting */                                             \
N  0x00,                                 /* bNumEndpoints */                                                 \
N  USB_DEVICE_CLASS_AUDIO,               /* bInterfaceClass */                                               \
N  AUDIO_SUBCLASS_AUDIOCONTROL,          /* bInterfaceSubClass */                                            \
N  AUDIO_PROTOCOL_UNDEFINED,             /* bInterfaceProtocol */                                            \
N  USBD_ADC_CIF_STR_NUM,                 /* iInterface */                                                    \
N/* Audio Control Interface */                                                                               \
N  AUDIO_CONTROL_INTERFACE_DESC_SZ(1),   /* bLength */                                                       \
N  AUDIO_INTERFACE_DESCRIPTOR_TYPE,      /* bDescriptorType */                                               \
N  AUDIO_CONTROL_HEADER,                 /* bDescriptorSubtype */                                            \
N  WBVAL(0x0100), /* 1.00 */             /* bcdADC */                                                        \
N  WBVAL(                                /* wTotalLength */                                                  \
N    AUDIO_CONTROL_INTERFACE_DESC_SZ(1) +                                                                    \
N    AUDIO_INPUT_TERMINAL_DESC_SIZE     +                                                                    \
N    AUDIO_FEATURE_UNIT_DESC_SZ(1,1)    +                                                                    \
N    AUDIO_OUTPUT_TERMINAL_DESC_SIZE                                                                         \
N  ),                                                                                                        \
N  0x01,                                 /* bInCollection */                                                 \
N  0x01,                                 /* baInterfaceNr */                                                 \
N                                                                                                            \
N/* Audio Input Terminal */                                                                                  \
N  AUDIO_INPUT_TERMINAL_DESC_SIZE,       /* bLength */                                                       \
N  AUDIO_INTERFACE_DESCRIPTOR_TYPE,      /* bDescriptorType */                                               \
N  AUDIO_CONTROL_INPUT_TERMINAL,         /* bDescriptorSubtype */                                            \
N  0x01,                                 /* bTerminalID */                                                   \
N  WBVAL(AUDIO_TERMINAL_USB_STREAMING),  /* wTerminalType */                                                 \
N  0x00,                                 /* bAssocTerminal */                                                \
N  0x01,                                 /* bNrChannels */                                                   \
N  WBVAL(AUDIO_CHANNEL_M),               /* wChannelConfig */                                                \
N  0x00,                                 /* iChannelNames */                                                 \
N  0x00,                                 /* iTerminal */                                                     \
N                                                                                                            \
N/* Audio Feature Unit */                                                                                    \
N  AUDIO_FEATURE_UNIT_DESC_SZ(1,1),      /* bLength */                                                       \
N  AUDIO_INTERFACE_DESCRIPTOR_TYPE,      /* bDescriptorType */                                               \
N  AUDIO_CONTROL_FEATURE_UNIT,           /* bDescriptorSubtype */                                            \
N  0x02,                                 /* bUnitID */                                                       \
N  0x01,                                 /* bSourceID */                                                     \
N  0x01,                                 /* bControlSize */                                                  \
N  AUDIO_CONTROL_MUTE |                                                                                      \
N  AUDIO_CONTROL_VOLUME,                 /* bmaControls(0) */                                                \
N  0x00,                                 /* bmaControls(1) */                                                \
N  0x00,                                 /* iTerminal */                                                     \
N                                                                                                            \
N/* Audio Output Terminal */                                                                                 \
N  AUDIO_OUTPUT_TERMINAL_DESC_SIZE,      /* bLength */                                                       \
N  AUDIO_INTERFACE_DESCRIPTOR_TYPE,      /* bDescriptorType */                                               \
N  AUDIO_CONTROL_OUTPUT_TERMINAL,        /* bDescriptorSubtype */                                            \
N  0x03,                                 /* bTerminalID */                                                   \
N  WBVAL(AUDIO_TERMINAL_SPEAKER),        /* wTerminalType */                                                 \
N  0x00,                                 /* bAssocTerminal */                                                \
N  0x02,                                 /* bSourceID */                                                     \
N  0x00,                                 /* iTerminal */                                                     \
N                                                                                                            \
N/* Interface, Alternate Setting 0, Audio Streaming - Zero Bandwith */                                       \
N  USB_INTERFACE_DESC_SIZE,              /* bLength */                                                       \
N  USB_INTERFACE_DESCRIPTOR_TYPE,        /* bDescriptorType */                                               \
N  USBD_ADC_SIF1_NUM,                    /* bInterfaceNumber */                                              \
N  0x00,                                 /* bAlternateSetting */                                             \
N  0x00,                                 /* bNumEndpoints */                                                 \
N  USB_DEVICE_CLASS_AUDIO,               /* bInterfaceClass */                                               \
N  AUDIO_SUBCLASS_AUDIOSTREAMING,        /* bInterfaceSubClass */                                            \
N  AUDIO_PROTOCOL_UNDEFINED,             /* bInterfaceProtocol */                                            \
N  USBD_ADC_SIF1_STR_NUM,                /* iInterface */                                                    \
N                                                                                                            \
N/* Interface, Alternate Setting 1, Audio Streaming - Operational */                                         \
N  USB_INTERFACE_DESC_SIZE,              /* bLength */                                                       \
N  USB_INTERFACE_DESCRIPTOR_TYPE,        /* bDescriptorType */                                               \
N  USBD_ADC_SIF1_NUM,                    /* bInterfaceNumber */                                              \
N  0x01,                                 /* bAlternateSetting */                                             \
N  0x01,                                 /* bNumEndpoints */                                                 \
N  USB_DEVICE_CLASS_AUDIO,               /* bInterfaceClass */                                               \
N  AUDIO_SUBCLASS_AUDIOSTREAMING,        /* bInterfaceSubClass */                                            \
N  AUDIO_PROTOCOL_UNDEFINED,             /* bInterfaceProtocol */                                            \
N  USBD_ADC_SIF2_STR_NUM,                /* iInterface */                                                    \
N                                                                                                            \
N/* Audio Streaming Interface */                                                                             \
N  AUDIO_STREAMING_INTERFACE_DESC_SIZE,  /* bLength */                                                       \
N  AUDIO_INTERFACE_DESCRIPTOR_TYPE,      /* bDescriptorType */                                               \
N  AUDIO_STREAMING_GENERAL,              /* bDescriptorSubtype */                                            \
N  0x01,                                 /* bTerminalLink */                                                 \
N  0x01,                                 /* bDelay */                                                        \
N  WBVAL(AUDIO_FORMAT_PCM),              /* wFormatTag */                                                    \
N                                                                                                            \
N/* Audio Type I Format */                                                                                   \
N  AUDIO_FORMAT_TYPE_I_DESC_SZ(1),       /* bLength */                                                       \
N  AUDIO_INTERFACE_DESCRIPTOR_TYPE,      /* bDescriptorType */                                               \
N  AUDIO_STREAMING_FORMAT_TYPE,          /* bDescriptorSubtype */                                            \
N  AUDIO_FORMAT_TYPE_I,                  /* bFormatType */                                                   \
N  0x01,                                 /* bNrChannels */                                                   \
N  USBD_ADC_BSUBFRAMESIZE,               /* bSubFrameSize */                                                 \
N  USBD_ADC_BBITRESOLUTION,              /* bBitResolution */                                                \
N  0x01,                                 /* bSamFreqType */                                                  \
N  B3VAL(USBD_ADC_TSAMFREQ),             /* tSamFreq */
X#define ADC_DESC                                                                                                                                                        USB_INTERFACE_DESC_SIZE,                                                                        USB_INTERFACE_DESCRIPTOR_TYPE,                                                          USBD_ADC_CIF_NUM,                                                                      0x00,                                                                                 0x00,                                                                                     USB_DEVICE_CLASS_AUDIO,                                                                 AUDIO_SUBCLASS_AUDIOCONTROL,                                                         AUDIO_PROTOCOL_UNDEFINED,                                                            USBD_ADC_CIF_STR_NUM,                                                                                                                                                        AUDIO_CONTROL_INTERFACE_DESC_SZ(1),                                                             AUDIO_INTERFACE_DESCRIPTOR_TYPE,                                                        AUDIO_CONTROL_HEADER,                                                                WBVAL(0x0100),                                                                          WBVAL(                                                                                       AUDIO_CONTROL_INTERFACE_DESC_SZ(1) +                                                                        AUDIO_INPUT_TERMINAL_DESC_SIZE     +                                                                        AUDIO_FEATURE_UNIT_DESC_SZ(1,1)    +                                                                        AUDIO_OUTPUT_TERMINAL_DESC_SIZE                                                                           ),                                                                                                          0x01,                                                                                     0x01,                                                                                                                                                                                                                                                                                    AUDIO_INPUT_TERMINAL_DESC_SIZE,                                                                 AUDIO_INTERFACE_DESCRIPTOR_TYPE,                                                        AUDIO_CONTROL_INPUT_TERMINAL,                                                        0x01,                                                                                       WBVAL(AUDIO_TERMINAL_USB_STREAMING),                                                      0x00,                                                                                    0x01,                                                                                       WBVAL(AUDIO_CHANNEL_M),                                                                  0x00,                                                                                     0x00,                                                                                                                                                                                                                                                                                          AUDIO_FEATURE_UNIT_DESC_SZ(1,1),                                                                AUDIO_INTERFACE_DESCRIPTOR_TYPE,                                                        AUDIO_CONTROL_FEATURE_UNIT,                                                          0x02,                                                                                           0x01,                                                                                         0x01,                                                                                      AUDIO_CONTROL_MUTE |                                                                                        AUDIO_CONTROL_VOLUME,                                                                    0x00,                                                                                    0x00,                                                                                                                                                                                                                                                                                       AUDIO_OUTPUT_TERMINAL_DESC_SIZE,                                                                AUDIO_INTERFACE_DESCRIPTOR_TYPE,                                                        AUDIO_CONTROL_OUTPUT_TERMINAL,                                                       0x03,                                                                                       WBVAL(AUDIO_TERMINAL_SPEAKER),                                                            0x00,                                                                                    0x02,                                                                                         0x00,                                                                                                                                                                                                                                             USB_INTERFACE_DESC_SIZE,                                                                        USB_INTERFACE_DESCRIPTOR_TYPE,                                                          USBD_ADC_SIF1_NUM,                                                                     0x00,                                                                                 0x00,                                                                                     USB_DEVICE_CLASS_AUDIO,                                                                 AUDIO_SUBCLASS_AUDIOSTREAMING,                                                       AUDIO_PROTOCOL_UNDEFINED,                                                            USBD_ADC_SIF1_STR_NUM,                                                                                                                                                                                                                             USB_INTERFACE_DESC_SIZE,                                                                        USB_INTERFACE_DESCRIPTOR_TYPE,                                                          USBD_ADC_SIF1_NUM,                                                                     0x01,                                                                                 0x01,                                                                                     USB_DEVICE_CLASS_AUDIO,                                                                 AUDIO_SUBCLASS_AUDIOSTREAMING,                                                       AUDIO_PROTOCOL_UNDEFINED,                                                            USBD_ADC_SIF2_STR_NUM,                                                                                                                                                                                                                                                                 AUDIO_STREAMING_INTERFACE_DESC_SIZE,                                                            AUDIO_INTERFACE_DESCRIPTOR_TYPE,                                                        AUDIO_STREAMING_GENERAL,                                                             0x01,                                                                                     0x01,                                                                                            WBVAL(AUDIO_FORMAT_PCM),                                                                                                                                                                                                                                                                     AUDIO_FORMAT_TYPE_I_DESC_SZ(1),                                                                 AUDIO_INTERFACE_DESCRIPTOR_TYPE,                                                        AUDIO_STREAMING_FORMAT_TYPE,                                                         AUDIO_FORMAT_TYPE_I,                                                                        0x01,                                                                                       USBD_ADC_BSUBFRAMESIZE,                                                                   USBD_ADC_BBITRESOLUTION,                                                                 0x01,                                                                                      B3VAL(USBD_ADC_TSAMFREQ),              
N
N#define ADC_EP                          /* ADC Endpoints for Low-speed/Full-speed */                        \
N/* Endpoint, EP ISO OUT - Standard Descriptor */                                                            \
N  AUDIO_STANDARD_ENDPOINT_DESC_SIZE,    /* bLength */                                                       \
N  USB_ENDPOINT_DESCRIPTOR_TYPE,         /* bDescriptorType */                                               \
N  USB_ENDPOINT_OUT(USBD_ADC_EP_ISOOUT), /* bEndpointAddress */                                              \
N  USB_ENDPOINT_TYPE_ISOCHRONOUS,        /* bmAttributes */                                                  \
N  WBVAL(USBD_ADC_WMAXPACKETSIZE),       /* wMaxPacketSize */                                                \
N  USBD_ADC_BINTERVAL,                   /* bInterval */                                                     \
N  0x00,                                 /* bRefresh */                                                      \
N  0x00,                                 /* bSynchAddress */                                                 \
N                                                                                                            \
N/* Endpoint - Audio Streaming */                                                                            \
N  AUDIO_STREAMING_ENDPOINT_DESC_SIZE,   /* bLength */                                                       \
N  AUDIO_ENDPOINT_DESCRIPTOR_TYPE,       /* bDescriptorType */                                               \
N  AUDIO_ENDPOINT_GENERAL,               /* bDescriptor */                                                   \
N  0x00,                                 /* bmAttributes */                                                  \
N  0x00,                                 /* bLockDelayUnits */                                               \
N  WBVAL(0x0000),                        /* wLockDelay */
X#define ADC_EP                                                                                                                  AUDIO_STANDARD_ENDPOINT_DESC_SIZE,                                                              USB_ENDPOINT_DESCRIPTOR_TYPE,                                                           USB_ENDPOINT_OUT(USBD_ADC_EP_ISOOUT),                                                  USB_ENDPOINT_TYPE_ISOCHRONOUS,                                                             WBVAL(USBD_ADC_WMAXPACKETSIZE),                                                          USBD_ADC_BINTERVAL,                                                                           0x00,                                                                                          0x00,                                                                                                                                                                                                                                                                              AUDIO_STREAMING_ENDPOINT_DESC_SIZE,                                                             AUDIO_ENDPOINT_DESCRIPTOR_TYPE,                                                         AUDIO_ENDPOINT_GENERAL,                                                                     0x00,                                                                                      0x00,                                                                                   WBVAL(0x0000),                         
N
N#define ADC_EP_HS                       /* ADC Endpoints for High-speed */                                  \
N/* Endpoint, EP ISO OUT - Standard Descriptor */                                                            \
N  AUDIO_STANDARD_ENDPOINT_DESC_SIZE,    /* bLength */                                                       \
N  USB_ENDPOINT_DESCRIPTOR_TYPE,         /* bDescriptorType */                                               \
N  USB_ENDPOINT_OUT(USBD_ADC_EP_ISOOUT), /* bEndpointAddress */                                              \
N  USB_ENDPOINT_TYPE_ISOCHRONOUS,        /* bmAttributes */                                                  \
N  WBVAL(USBD_ADC_HS_WMAXPACKETSIZE),    /* wMaxPacketSize */                                                \
N  USBD_ADC_BINTERVAL,                   /* bInterval */                                                     \
N  0x00,                                 /* bRefresh */                                                      \
N  0x00,                                 /* bSynchAddress */                                                 \
N                                                                                                            \
N/* Endpoint - Audio Streaming */                                                                            \
N  AUDIO_STREAMING_ENDPOINT_DESC_SIZE,   /* bLength */                                                       \
N  AUDIO_ENDPOINT_DESCRIPTOR_TYPE,       /* bDescriptorType */                                               \
N  AUDIO_ENDPOINT_GENERAL,               /* bDescriptor */                                                   \
N  0x00,                                 /* bmAttributes */                                                  \
N  0x00,                                 /* bLockDelayUnits */                                               \
N  WBVAL(0x0000),                        /* wLockDelay */
X#define ADC_EP_HS                                                                                                                         AUDIO_STANDARD_ENDPOINT_DESC_SIZE,                                                              USB_ENDPOINT_DESCRIPTOR_TYPE,                                                           USB_ENDPOINT_OUT(USBD_ADC_EP_ISOOUT),                                                  USB_ENDPOINT_TYPE_ISOCHRONOUS,                                                             WBVAL(USBD_ADC_HS_WMAXPACKETSIZE),                                                       USBD_ADC_BINTERVAL,                                                                           0x00,                                                                                          0x00,                                                                                                                                                                                                                                                                              AUDIO_STREAMING_ENDPOINT_DESC_SIZE,                                                             AUDIO_ENDPOINT_DESCRIPTOR_TYPE,                                                         AUDIO_ENDPOINT_GENERAL,                                                                     0x00,                                                                                      0x00,                                                                                   WBVAL(0x0000),                         
N
N#define CDC_ACM_DESC_IAD(first,num_of_ifs)  /* CDC: Interface Association Descriptor */                     \
N  USB_INTERFACE_ASSOC_DESC_SIZE,        /* bLength */                                                       \
N  USB_INTERFACE_ASSOCIATION_DESCRIPTOR_TYPE,  /* bDescriptorType */                                         \
N (first),                               /* bFirstInterface */                                               \
N (num_of_ifs),                          /* bInterfaceCount */                                               \
N  CDC_COMMUNICATION_INTERFACE_CLASS,    /* bFunctionClass    (Communication Class) */                       \
N  CDC_ABSTRACT_CONTROL_MODEL,           /* bFunctionSubclass (Abstract Control Model) */                    \
N  0x01,                                 /* bFunctionProtocol (V.25ter, Common AT commands) */               \
N  USBD_CDC_ACM_CIF_STR_NUM,             /* iFunction */                                                     \
N
X#define CDC_ACM_DESC_IAD(first,num_of_ifs)                          USB_INTERFACE_ASSOC_DESC_SIZE,                                                                  USB_INTERFACE_ASSOCIATION_DESCRIPTOR_TYPE,                                             (first),                                                                                (num_of_ifs),                                                                            CDC_COMMUNICATION_INTERFACE_CLASS,                              CDC_ABSTRACT_CONTROL_MODEL,                                  0x01,                                                   USBD_CDC_ACM_CIF_STR_NUM,                                                                   
N#define CDC_ACM_DESC_IF0                                                                                        \
N/* Interface, Alternate Setting 0, CDC Class */                                                             \
N  USB_INTERFACE_DESC_SIZE,              /* bLength */                                                       \
N  USB_INTERFACE_DESCRIPTOR_TYPE,        /* bDescriptorType */                                               \
N  USBD_CDC_ACM_CIF_NUM,                 /* bInterfaceNumber: Number of Interface */                         \
N  0x00,                                 /* bAlternateSetting: Alternate setting */                          \
N  0x01,                                 /* bNumEndpoints: One endpoint used */                              \
N  CDC_COMMUNICATION_INTERFACE_CLASS,    /* bInterfaceClass: Communication Interface Class */                \
N  CDC_ABSTRACT_CONTROL_MODEL,           /* bInterfaceSubClass: Abstract Control Model */                    \
N  0x00,                                 /* bInterfaceProtocol: no protocol used */                          \
N  USBD_CDC_ACM_CIF_STR_NUM,             /* iInterface: */                                                   \
N                                                                                                            \
N/* Header Functional Descriptor */                                                                          \
N  0x05,                                 /* bLength: Endpoint Descriptor size */                             \
N  CDC_CS_INTERFACE,                     /* bDescriptorType: CS_INTERFACE */                                 \
N  CDC_HEADER,                           /* bDescriptorSubtype: Header Func Desc */                          \
N  WBVAL(CDC_V1_10), /* 1.10 */          /* bcdCDC */                                                        \
N/* Call Management Functional Descriptor */                                                                 \
N  0x05,                                 /* bFunctionLength */                                               \
N  CDC_CS_INTERFACE,                     /* bDescriptorType: CS_INTERFACE */                                 \
N  CDC_CALL_MANAGEMENT,                  /* bDescriptorSubtype: Call Management Func Desc */                 \
N  0x01,                                 /* bmCapabilities: device handles call management */                \
N  0x01,                                 /* bDataInterface: CDC data IF ID */                                \
N/* Abstract Control Management Functional Descriptor */                                                     \
N  0x04,                                 /* bFunctionLength */                                               \
N  CDC_CS_INTERFACE,                     /* bDescriptorType: CS_INTERFACE */                                 \
N  CDC_ABSTRACT_CONTROL_MANAGEMENT,      /* bDescriptorSubtype: Abstract Control Management desc */          \
N  0x02,                                 /* bmCapabilities: SET_LINE_CODING, GET_LINE_CODING, SET_CONTROL_LINE_STATE supported */ \
N/* Union Functional Descriptor */                                                                           \
N  0x05,                                 /* bFunctionLength */                                               \
N  CDC_CS_INTERFACE,                     /* bDescriptorType: CS_INTERFACE */                                 \
N  CDC_UNION,                            /* bDescriptorSubtype: Union func desc */                           \
N  USBD_CDC_ACM_CIF_NUM,                 /* bMasterInterface: Communication class interface is master */     \
N  USBD_CDC_ACM_DIF_NUM,                 /* bSlaveInterface0: Data class interface is slave 0 */
X#define CDC_ACM_DESC_IF0                                                                                                                                                        USB_INTERFACE_DESC_SIZE,                                                                        USB_INTERFACE_DESCRIPTOR_TYPE,                                                          USBD_CDC_ACM_CIF_NUM,                                             0x00,                                                              0x01,                                                                  CDC_COMMUNICATION_INTERFACE_CLASS,                       CDC_ABSTRACT_CONTROL_MODEL,                                  0x00,                                                              USBD_CDC_ACM_CIF_STR_NUM,                                                                                                                                                                                                                                                          0x05,                                                                 CDC_CS_INTERFACE,                                                         CDC_HEADER,                                                        WBVAL(CDC_V1_10),                                                                                                                                         0x05,                                                                                   CDC_CS_INTERFACE,                                                         CDC_CALL_MANAGEMENT,                                      0x01,                                                    0x01,                                                                                                                          0x04,                                                                                   CDC_CS_INTERFACE,                                                         CDC_ABSTRACT_CONTROL_MANAGEMENT,                   0x02,                                                                                                                 0x05,                                                                                   CDC_CS_INTERFACE,                                                         CDC_UNION,                                                          USBD_CDC_ACM_CIF_NUM,                         USBD_CDC_ACM_DIF_NUM,                  
N
N#define CDC_ACM_EP_IF0                  /* CDC Endpoints for Interface 0 for Low-speed/Full-speed */        \
N/* Endpoint, EP Interrupt IN */         /* event notification (optional) */                                 \
N  USB_ENDPOINT_DESC_SIZE,               /* bLength */                                                       \
N  USB_ENDPOINT_DESCRIPTOR_TYPE,         /* bDescriptorType */                                               \
N  USB_ENDPOINT_IN(USBD_CDC_ACM_EP_INTIN),/* bEndpointAddress */                                             \
N  USB_ENDPOINT_TYPE_INTERRUPT,          /* bmAttributes */                                                  \
N  WBVAL(USBD_CDC_ACM_WMAXPACKETSIZE),   /* wMaxPacketSize */                                                \
N  USBD_CDC_ACM_BINTERVAL,               /* bInterval */
X#define CDC_ACM_EP_IF0                                                                         USB_ENDPOINT_DESC_SIZE,                                                                         USB_ENDPOINT_DESCRIPTOR_TYPE,                                                           USB_ENDPOINT_IN(USBD_CDC_ACM_EP_INTIN),                                                USB_ENDPOINT_TYPE_INTERRUPT,                                                               WBVAL(USBD_CDC_ACM_WMAXPACKETSIZE),                                                      USBD_CDC_ACM_BINTERVAL,                
N
N#define CDC_ACM_EP_IF0_HS               /* CDC Endpoints for Interface 0 for High-speed */                  \
N/* Endpoint, EP Interrupt IN */         /* event notification (optional) */                                 \
N  USB_ENDPOINT_DESC_SIZE,               /* bLength */                                                       \
N  USB_ENDPOINT_DESCRIPTOR_TYPE,         /* bDescriptorType */                                               \
N  USB_ENDPOINT_IN(USBD_CDC_ACM_EP_INTIN),/* bEndpointAddress */                                             \
N  USB_ENDPOINT_TYPE_INTERRUPT,          /* bmAttributes */                                                  \
N  WBVAL(USBD_CDC_ACM_HS_WMAXPACKETSIZE),/* wMaxPacketSize */                                                \
N  USBD_CDC_ACM_HS_BINTERVAL,            /* bInterval */
X#define CDC_ACM_EP_IF0_HS                                                                                USB_ENDPOINT_DESC_SIZE,                                                                         USB_ENDPOINT_DESCRIPTOR_TYPE,                                                           USB_ENDPOINT_IN(USBD_CDC_ACM_EP_INTIN),                                                USB_ENDPOINT_TYPE_INTERRUPT,                                                               WBVAL(USBD_CDC_ACM_HS_WMAXPACKETSIZE),                                                   USBD_CDC_ACM_HS_BINTERVAL,             
N
N#define CDC_ACM_DESC_IF1                                                                                        \
N/* Interface, Alternate Setting 0, Data class interface descriptor*/                                        \
N  USB_INTERFACE_DESC_SIZE,              /* bLength */                                                       \
N  USB_INTERFACE_DESCRIPTOR_TYPE,        /* bDescriptorType */                                               \
N  USBD_CDC_ACM_DIF_NUM,                 /* bInterfaceNumber: Number of Interface */                         \
N  0x00,                                 /* bAlternateSetting: no alternate setting */                       \
N  0x02,                                 /* bNumEndpoints: two endpoints used */                             \
N  CDC_DATA_INTERFACE_CLASS,             /* bInterfaceClass: Data Interface Class */                         \
N  0x00,                                 /* bInterfaceSubClass: no subclass available */                     \
N  0x00,                                 /* bInterfaceProtocol: no protocol used */                          \
N  USBD_CDC_ACM_DIF_STR_NUM,             /* iInterface */
X#define CDC_ACM_DESC_IF1                                                                                                                                   USB_INTERFACE_DESC_SIZE,                                                                        USB_INTERFACE_DESCRIPTOR_TYPE,                                                          USBD_CDC_ACM_DIF_NUM,                                             0x00,                                                           0x02,                                                                 CDC_DATA_INTERFACE_CLASS,                                         0x00,                                                         0x00,                                                              USBD_CDC_ACM_DIF_STR_NUM,              
N
N#define CDC_ACM_EP_IF1                  /* CDC Endpoints for Interface 1 for Low-speed/Full-speed */        \
N/* Endpoint, EP Bulk OUT */                                                                                 \
N  USB_ENDPOINT_DESC_SIZE,               /* bLength */                                                       \
N  USB_ENDPOINT_DESCRIPTOR_TYPE,         /* bDescriptorType */                                               \
N  USB_ENDPOINT_OUT(USBD_CDC_ACM_EP_BULKOUT),/* bEndpointAddress */                                          \
N  USB_ENDPOINT_TYPE_BULK,               /* bmAttributes */                                                  \
N  WBVAL(USBD_CDC_ACM_WMAXPACKETSIZE1),  /* wMaxPacketSize */                                                \
N  0x00,                                 /* bInterval: ignore for Bulk transfer */                           \
N                                                                                                            \
N/* Endpoint, EP Bulk IN */                                                                                  \
N  USB_ENDPOINT_DESC_SIZE,               /* bLength */                                                       \
N  USB_ENDPOINT_DESCRIPTOR_TYPE,         /* bDescriptorType */                                               \
N  USB_ENDPOINT_IN(USBD_CDC_ACM_EP_BULKIN),/* bEndpointAddress */                                            \
N  USB_ENDPOINT_TYPE_BULK,               /* bmAttributes */                                                  \
N  WBVAL(USBD_CDC_ACM_WMAXPACKETSIZE1),  /* wMaxPacketSize */                                                \
N  0x00,                                 /* bInterval: ignore for Bulk transfer */
X#define CDC_ACM_EP_IF1                                                                                                               USB_ENDPOINT_DESC_SIZE,                                                                         USB_ENDPOINT_DESCRIPTOR_TYPE,                                                           USB_ENDPOINT_OUT(USBD_CDC_ACM_EP_BULKOUT),                                             USB_ENDPOINT_TYPE_BULK,                                                                    WBVAL(USBD_CDC_ACM_WMAXPACKETSIZE1),                                                     0x00,                                                                                                                                                                                                                                                              USB_ENDPOINT_DESC_SIZE,                                                                         USB_ENDPOINT_DESCRIPTOR_TYPE,                                                           USB_ENDPOINT_IN(USBD_CDC_ACM_EP_BULKIN),                                               USB_ENDPOINT_TYPE_BULK,                                                                    WBVAL(USBD_CDC_ACM_WMAXPACKETSIZE1),                                                     0x00,                                  
N
N#define CDC_ACM_EP_IF1_HS               /* CDC Endpoints for Interface 1 for High-speed */                  \
N/* Endpoint, EP Bulk OUT */                                                                                 \
N  USB_ENDPOINT_DESC_SIZE,               /* bLength */                                                       \
N  USB_ENDPOINT_DESCRIPTOR_TYPE,         /* bDescriptorType */                                               \
N  USB_ENDPOINT_OUT(USBD_CDC_ACM_EP_BULKOUT),/* bEndpointAddress */                                          \
N  USB_ENDPOINT_TYPE_BULK,               /* bmAttributes */                                                  \
N  WBVAL(USBD_CDC_ACM_HS_WMAXPACKETSIZE1),/* wMaxPacketSize */                                               \
N  USBD_CDC_ACM_HS_BINTERVAL1,           /* bInterval */                                                     \
N                                                                                                            \
N/* Endpoint, EP Bulk IN */                                                                                  \
N  USB_ENDPOINT_DESC_SIZE,               /* bLength */                                                       \
N  USB_ENDPOINT_DESCRIPTOR_TYPE,         /* bDescriptorType */                                               \
N  USB_ENDPOINT_IN(USBD_CDC_ACM_EP_BULKIN),/* bEndpointAddress */                                            \
N  USB_ENDPOINT_TYPE_BULK,               /* bmAttributes */                                                  \
N  WBVAL(USBD_CDC_ACM_HS_WMAXPACKETSIZE1),/* wMaxPacketSize */                                               \
N  USBD_CDC_ACM_HS_BINTERVAL1,           /* bInterval */
X#define CDC_ACM_EP_IF1_HS                                                                                                                      USB_ENDPOINT_DESC_SIZE,                                                                         USB_ENDPOINT_DESCRIPTOR_TYPE,                                                           USB_ENDPOINT_OUT(USBD_CDC_ACM_EP_BULKOUT),                                             USB_ENDPOINT_TYPE_BULK,                                                                    WBVAL(USBD_CDC_ACM_HS_WMAXPACKETSIZE1),                                                  USBD_CDC_ACM_HS_BINTERVAL1,                                                                                                                                                                                                                                                                  USB_ENDPOINT_DESC_SIZE,                                                                         USB_ENDPOINT_DESCRIPTOR_TYPE,                                                           USB_ENDPOINT_IN(USBD_CDC_ACM_EP_BULKIN),                                               USB_ENDPOINT_TYPE_BULK,                                                                    WBVAL(USBD_CDC_ACM_HS_WMAXPACKETSIZE1),                                                  USBD_CDC_ACM_HS_BINTERVAL1,            
N
N/* USB Device Configuration Descriptor (for Full Speed) */
N/*   All Descriptors (Configuration, Interface, Endpoint, Class, Vendor) */
N__weak \
Nconst U8 USBD_ConfigDescriptor[] = {
X__weak const U8 USBD_ConfigDescriptor[] = {
N/* Configuration 1 */
N  USB_CONFIGUARTION_DESC_SIZE,          /* bLength */
X  (sizeof(USB_CONFIGURATION_DESCRIPTOR)),           
N  USB_CONFIGURATION_DESCRIPTOR_TYPE,    /* bDescriptorType */
X  2,     
N  WBVAL(USBD_WTOTALLENGTH),             /* wTotalLength */
X  (((sizeof(USB_CONFIGURATION_DESCRIPTOR)) + ((1*(1|0|0)) * (sizeof(USB_INTERFACE_ASSOCIATION_DESCRIPTOR)) + (sizeof(USB_INTERFACE_DESCRIPTOR)) + 0x08+1 + 0x0C + 0x07+(1+1)*1 + 0x09 + (sizeof(USB_INTERFACE_DESCRIPTOR)) + (sizeof(USB_INTERFACE_DESCRIPTOR)) + 0x07 + 0x08+(1*3) + 0x09 + 0x07) * 0 + ((sizeof(USB_INTERFACE_DESCRIPTOR)) + (1*(1|0|0)) * (sizeof(USB_INTERFACE_ASSOCIATION_DESCRIPTOR)) + 0x0013 + (sizeof(USB_ENDPOINT_DESCRIPTOR)) + (sizeof(USB_INTERFACE_DESCRIPTOR)) + 2*(sizeof(USB_ENDPOINT_DESCRIPTOR))) * 1 + ((sizeof(USB_INTERFACE_DESCRIPTOR)) + (sizeof(HID_DESCRIPTOR)) + ((sizeof(USB_ENDPOINT_DESCRIPTOR))*(1+(3 != 0)))) * 1 + ((sizeof(USB_INTERFACE_DESCRIPTOR)) + 2*(sizeof(USB_ENDPOINT_DESCRIPTOR))) * 0) & 0xFF),((((sizeof(USB_CONFIGURATION_DESCRIPTOR)) + ((1*(1|0|0)) * (sizeof(USB_INTERFACE_ASSOCIATION_DESCRIPTOR)) + (sizeof(USB_INTERFACE_DESCRIPTOR)) + 0x08+1 + 0x0C + 0x07+(1+1)*1 + 0x09 + (sizeof(USB_INTERFACE_DESCRIPTOR)) + (sizeof(USB_INTERFACE_DESCRIPTOR)) + 0x07 + 0x08+(1*3) + 0x09 + 0x07) * 0 + ((sizeof(USB_INTERFACE_DESCRIPTOR)) + (1*(1|0|0)) * (sizeof(USB_INTERFACE_ASSOCIATION_DESCRIPTOR)) + 0x0013 + (sizeof(USB_ENDPOINT_DESCRIPTOR)) + (sizeof(USB_INTERFACE_DESCRIPTOR)) + 2*(sizeof(USB_ENDPOINT_DESCRIPTOR))) * 1 + ((sizeof(USB_INTERFACE_DESCRIPTOR)) + (sizeof(HID_DESCRIPTOR)) + ((sizeof(USB_ENDPOINT_DESCRIPTOR))*(1+(3 != 0)))) * 1 + ((sizeof(USB_INTERFACE_DESCRIPTOR)) + 2*(sizeof(USB_ENDPOINT_DESCRIPTOR))) * 0) >> 8) & 0xFF),              
N  USBD_IF_NUM,                          /* bNumInterfaces */
X  (1+0+(0*2)+(1*2)+0),                           
N  0x01,                                 /* bConfigurationValue: 0x01 is used to select this configuration */
N  0x00,                                 /* iConfiguration: no string to describe this configuration */
N  USBD_CFGDESC_BMATTRIBUTES |           /* bmAttributes */
X  0x80 |            
N  (USBD_POWER << 6),
X  (0 << 6),
N  USBD_CFGDESC_BMAXPOWER,               /* bMaxPower, device power consumption */
X  0xFA,                
N
N#if (USBD_ADC_ENABLE)
X#if (0)
S#if (USBD_MULTI_IF)
S  ADC_DESC_IAD(USBD_ADC_CIF_NUM,2)
S#endif
S  ADC_DESC
S  ADC_EP
N#endif
N
N#if (USBD_CDC_ACM_ENABLE)
X#if (1)
N#if (USBD_MULTI_IF)
X#if ((1*(1|0|0)))
N  CDC_ACM_DESC_IAD(USBD_CDC_ACM_CIF_NUM,2)
X  (sizeof(USB_INTERFACE_ASSOCIATION_DESCRIPTOR)), 11, ((0 * 2 + 0)), (2), 0x02, 0x02, 0x01, (3 + 1 + 0 * 3 + 0),
N#endif
N  CDC_ACM_DESC_IF0
X  (sizeof(USB_INTERFACE_DESCRIPTOR)), 4, (0 * 2 + 0), 0x00, 0x01, 0x02, 0x02, 0x00, (3 + 1 + 0 * 3 + 0), 0x05, 0x24, 0x00, (0x0110 & 0xFF),((0x0110 >> 8) & 0xFF), 0x05, 0x24, 0x01, 0x01, 0x01, 0x04, 0x24, 0x02, 0x02, 0x05, 0x24, 0x06, (0 * 2 + 0), (0 * 2 + 1),
N  CDC_ACM_EP_IF0
X  (sizeof(USB_ENDPOINT_DESCRIPTOR)), 5, ((1) | 0x80), 0x03, (64 & 0xFF),((64 >> 8) & 0xFF), 2,
N  CDC_ACM_DESC_IF1
X  (sizeof(USB_INTERFACE_DESCRIPTOR)), 4, (0 * 2 + 1), 0x00, 0x02, 0x0A, 0x00, 0x00, (3 + 1 + 0 * 3 + 1),
N  CDC_ACM_EP_IF1
X  (sizeof(USB_ENDPOINT_DESCRIPTOR)), 5, ((2) | 0x00), 0x02, (64 & 0xFF),((64 >> 8) & 0xFF), 0x00, (sizeof(USB_ENDPOINT_DESCRIPTOR)), 5, ((2) | 0x80), 0x02, (64 & 0xFF),((64 >> 8) & 0xFF), 0x00,
N#endif
N
N#if (USBD_HID_ENABLE)
X#if (1)
N  HID_DESC
X  (sizeof(USB_INTERFACE_DESCRIPTOR)), 4, (0 * 2 + 1 * 2), 0x00, 0x01+(3 != 0), 0x03, 0x00, 0x00, (3 + 1 + 0 * 3 + 1 * 2), (sizeof(HID_DESCRIPTOR)), 0x21, (0x0100 & 0xFF),((0x0100 >> 8) & 0xFF), 0x00, 0x01, 0x22, ((sizeof(USBD_HID_ReportDescriptor)) & 0xFF),(((sizeof(USBD_HID_ReportDescriptor)) >> 8) & 0xFF),
N#if (USBD_HID_EP_INTOUT != 0)
X#if (3 != 0)
N  HID_EP_INOUT
X  (sizeof(USB_ENDPOINT_DESCRIPTOR)), 5, ((3) | 0x80), 0x03, (64 & 0xFF),((64 >> 8) & 0xFF), 1, (sizeof(USB_ENDPOINT_DESCRIPTOR)), 5, ((3) | 0x00), 0x03, (64 & 0xFF),((64 >> 8) & 0xFF), 1,
N#else
S  HID_EP
N#endif
N#endif
N
N#if (USBD_MSC_ENABLE)
X#if (0)
S  MSC_DESC
S  MSC_EP
N#endif
N
N/* Terminator */                                                                                            \
N  0                                     /* bLength */                                                       \
N};
X                                                                                               0                                                                                             };
N
N#if (USBD_HS_ENABLE == 0)               /* If High-speed not enabled, declare dummy descriptors for High-speed */
X#if (0 == 0)                
N__weak \
Nconst U8 USBD_ConfigDescriptor_HS[] = { 0 };
X__weak const U8 USBD_ConfigDescriptor_HS[] = { 0 };
N__weak \
Nconst U8 USBD_OtherSpeedConfigDescriptor[] = { 0 };
X__weak const U8 USBD_OtherSpeedConfigDescriptor[] = { 0 };
N__weak \
Nconst U8 USBD_OtherSpeedConfigDescriptor_HS[] = { 0 };
X__weak const U8 USBD_OtherSpeedConfigDescriptor_HS[] = { 0 };
N#else
S
S/* USB Device Configuration Descriptor (for High Speed) */
S/*   All Descriptors (Configuration, Interface, Endpoint, Class, Vendor) */
S__weak \
Sconst U8 USBD_ConfigDescriptor_HS[] = {
X__weak const U8 USBD_ConfigDescriptor_HS[] = {
S/* Configuration 1 */
S  USB_CONFIGUARTION_DESC_SIZE,          /* bLength */
S  USB_CONFIGURATION_DESCRIPTOR_TYPE,    /* bDescriptorType */
S  WBVAL(USBD_WTOTALLENGTH),             /* wTotalLength */
S  USBD_IF_NUM,                          /* bNumInterfaces */
S  0x01,                                 /* bConfigurationValue: 0x01 is used to select this configuration */
S  0x00,                                 /* iConfiguration: no string to describe this configuration */
S  USBD_CFGDESC_BMATTRIBUTES |           /* bmAttributes */
S  (USBD_POWER << 6),
S  USBD_CFGDESC_BMAXPOWER,               /* bMaxPower, device power consumption */
S
S#if (USBD_ADC_ENABLE)
S#if (USBD_MULTI_IF)
S  ADC_DESC_IAD(USBD_ADC_CIF_NUM,2)
S#endif
S  ADC_DESC
S  ADC_EP_HS
S#endif
S
S#if (USBD_CDC_ACM_ENABLE)
S#if (USBD_MULTI_IF)
S  CDC_ACM_DESC_IAD(USBD_CDC_ACM_CIF_NUM,2)
S#endif
S  CDC_ACM_DESC_IF0
S  CDC_ACM_EP_IF0_HS
S  CDC_ACM_DESC_IF1
S  CDC_ACM_EP_IF1_HS
S#endif
S
S#if (USBD_HID_ENABLE)
S  HID_DESC
S#if (USBD_HID_EP_INTOUT != 0)
S  HID_EP_INOUT_HS
S#else
S  HID_EP_HS
S#endif
S#endif
S
S#if (USBD_MSC_ENABLE)
S  MSC_DESC
S  MSC_EP_HS
S#endif
S
S/* Terminator */                                                                                            \
S  0                                     /* bLength */                                                       \
S};
X                                                                                               0                                                                                             };
S
S/* USB Device Other Speed Configuration Descriptor (for Full Speed) */
S/*   All Descriptors (Configuration, Interface, Endpoint, Class, Vendor) */
S__weak \
Sconst U8 USBD_OtherSpeedConfigDescriptor[] = {
X__weak const U8 USBD_OtherSpeedConfigDescriptor[] = {
S/* Configuration 1 */
S  USB_CONFIGUARTION_DESC_SIZE,          /* bLength */
S  USB_OTHER_SPEED_CONFIG_DESCRIPTOR_TYPE, /* bDescriptorType */
S  WBVAL(USBD_WTOTALLENGTH),             /* wTotalLength */
S  USBD_IF_NUM,                          /* bNumInterfaces */
S  0x01,                                 /* bConfigurationValue: 0x01 is used to select this configuration */
S  0x00,                                 /* iConfiguration: no string to describe this configuration */
S  USBD_CFGDESC_BMATTRIBUTES |           /* bmAttributes */
S  (USBD_POWER << 6),
S  USBD_CFGDESC_BMAXPOWER,               /* bMaxPower, device power consumption */
S
S#if (USBD_ADC_ENABLE)
S#if (USBD_MULTI_IF)
S  ADC_DESC_IAD(USBD_ADC_CIF_NUM,2)
S#endif
S  ADC_DESC
S  ADC_EP_HS
S#endif
S
S#if (USBD_CDC_ACM_ENABLE)
S#if (USBD_MULTI_IF)
S  CDC_ACM_DESC_IAD(USBD_CDC_ACM_CIF_NUM,2)
S#endif
S  CDC_ACM_DESC_IF0
S  CDC_ACM_EP_IF0_HS
S  CDC_ACM_DESC_IF1
S  CDC_ACM_EP_IF1_HS
S#endif
S
S#if (USBD_HID_ENABLE)
S  HID_DESC
S#if (USBD_HID_EP_INTOUT != 0)
S  HID_EP_INOUT_HS
S#else
S  HID_EP_HS
S#endif
S#endif
S
S#if (USBD_MSC_ENABLE)
S  MSC_DESC
S  MSC_EP_HS
S#endif
S
S/* Terminator */
S  0                                     /* bLength */
S};
S
S/* USB Device Other Speed Configuration Descriptor for High Speed */
S/*   All Descriptors (Configuration, Interface, Endpoint, Class, Vendor) */
S__weak \
Sconst U8 USBD_OtherSpeedConfigDescriptor_HS[] = {
X__weak const U8 USBD_OtherSpeedConfigDescriptor_HS[] = {
S/* Configuration 1 */
S  USB_CONFIGUARTION_DESC_SIZE,          /* bLength */
S  USB_OTHER_SPEED_CONFIG_DESCRIPTOR_TYPE, /* bDescriptorType */
S  WBVAL(USBD_WTOTALLENGTH),             /* wTotalLength */
S  USBD_IF_NUM,                          /* bNumInterfaces */
S  0x01,                                 /* bConfigurationValue: 0x01 is used to select this configuration */
S  0x00,                                 /* iConfiguration: no string to describe this configuration */
S  USBD_CFGDESC_BMATTRIBUTES |           /* bmAttributes */
S  (USBD_POWER << 6),
S  USBD_CFGDESC_BMAXPOWER,               /* bMaxPower, device power consumption */
S
S#if (USBD_ADC_ENABLE)
S#if (USBD_MULTI_IF)
S  ADC_DESC_IAD(USBD_ADC_CIF_NUM,2)
S#endif
S  ADC_DESC
S  ADC_EP
S#endif
S
S#if (USBD_CDC_ACM_ENABLE)
S#if (USBD_MULTI_IF)
S  CDC_ACM_DESC_IAD(USBD_CDC_ACM_CIF_NUM,2)
S#endif
S  CDC_ACM_DESC_IF0
S  CDC_ACM_EP_IF0
S  CDC_ACM_DESC_IF1
S  CDC_ACM_EP_IF1
S#endif
S
S#if (USBD_HID_ENABLE)
S  HID_DESC
S#if (USBD_HID_EP_INTOUT != 0)
S  HID_EP_INOUT
S#else
S  HID_EP
S#endif
S#endif
S
S#if (USBD_MSC_ENABLE)
S  MSC_DESC
S  MSC_EP
S#endif
S
S/* Terminator */
S  0                                     /* bLength */
S};
N#endif
N
N/* USB Device Create String Descriptor */
N#define USBD_STR_DEF(n)                 \
N  struct {                              \
N    U8  len;                            \
N    U8  type;                           \
N    U16 str[sizeof(USBD_##n)/2-1];      \
N  } desc##n
X#define USBD_STR_DEF(n)                   struct {                                  U8  len;                                U8  type;                               U16 str[sizeof(USBD_##n)/2-1];        } desc##n
N
N#define USBD_STR_VAL(n)                  \
N { sizeof(USBD_##n), USB_STRING_DESCRIPTOR_TYPE, USBD_##n }
X#define USBD_STR_VAL(n)                   { sizeof(USBD_##n), USB_STRING_DESCRIPTOR_TYPE, USBD_##n }
N
N__weak \
Nconst struct {
X__weak const struct {
N  struct {
N    U8  len;
N    U8  type;
N    U16 langid;
N  } desc_langid;
N  USBD_STR_DEF(STRDESC_MAN);
X  struct { U8 len; U8 type; U16 str[sizeof(L"CMSIS-DAP by muselab-tech.com")/2-1]; } descSTRDESC_MAN;
N  USBD_STR_DEF(STRDESC_PROD);
X  struct { U8 len; U8 type; U16 str[sizeof(L"CMSIS-DAP-MuseLab")/2-1]; } descSTRDESC_PROD;
N#if  (USBD_STRDESC_SER_ENABLE)
X#if  (1)
N  USBD_STR_DEF(STRDESC_SER);
X  struct { U8 len; U8 type; U16 str[sizeof(L"0001A0000001")/2-1]; } descSTRDESC_SER;
N#endif
N#if (USBD_ADC_ENABLE)
X#if (0)
S  USBD_STR_DEF(ADC_CIF_STRDESC);
S  USBD_STR_DEF(ADC_SIF1_STRDESC);
S  USBD_STR_DEF(ADC_SIF2_STRDESC);
N#endif
N#if (USBD_CDC_ACM_ENABLE)
X#if (1)
N  USBD_STR_DEF(CDC_ACM_CIF_STRDESC);
X  struct { U8 len; U8 type; U16 str[sizeof(L"CMSIS-DAP CDC")/2-1]; } descCDC_ACM_CIF_STRDESC;
N  USBD_STR_DEF(CDC_ACM_DIF_STRDESC);
X  struct { U8 len; U8 type; U16 str[sizeof(L"CMSIS-DAP DCI")/2-1]; } descCDC_ACM_DIF_STRDESC;
N#endif
N#if (USBD_HID_ENABLE)
X#if (1)
N  USBD_STR_DEF(HID_STRDESC);
X  struct { U8 len; U8 type; U16 str[sizeof(L"CMSIS-DAP")/2-1]; } descHID_STRDESC;
N#endif
N#if (USBD_MSC_ENABLE)
X#if (0)
S  USBD_STR_DEF(MSC_STRDESC);
N#endif
N} USBD_StringDescriptor
N  =
N{
N  { 4, USB_STRING_DESCRIPTOR_TYPE, USBD_STRDESC_LANGID },
X  { 4, 3, 0x0409 },
N  USBD_STR_VAL(STRDESC_MAN),
X  { sizeof(L"CMSIS-DAP by muselab-tech.com"), 3, L"CMSIS-DAP by muselab-tech.com" },
N  USBD_STR_VAL(STRDESC_PROD),
X  { sizeof(L"CMSIS-DAP-MuseLab"), 3, L"CMSIS-DAP-MuseLab" },
N#if (USBD_STRDESC_SER_ENABLE)
X#if (1)
N  USBD_STR_VAL(STRDESC_SER),
X  { sizeof(L"0001A0000001"), 3, L"0001A0000001" },
N#endif
N#if (USBD_ADC_ENABLE)
X#if (0)
S  USBD_STR_VAL(ADC_CIF_STRDESC),
S  USBD_STR_VAL(ADC_SIF1_STRDESC),
S  USBD_STR_VAL(ADC_SIF2_STRDESC),
N#endif
N#if (USBD_CDC_ACM_ENABLE)
X#if (1)
N  USBD_STR_VAL(CDC_ACM_CIF_STRDESC),
X  { sizeof(L"CMSIS-DAP CDC"), 3, L"CMSIS-DAP CDC" },
N  USBD_STR_VAL(CDC_ACM_DIF_STRDESC),
X  { sizeof(L"CMSIS-DAP DCI"), 3, L"CMSIS-DAP DCI" },
N#endif
N#if (USBD_HID_ENABLE)
X#if (1)
N  USBD_STR_VAL(HID_STRDESC),
X  { sizeof(L"CMSIS-DAP"), 3, L"CMSIS-DAP" },
N#endif
N#if (USBD_MSC_ENABLE)
X#if (0)
S  USBD_STR_VAL(MSC_STRDESC),
N#endif
N};
N
N#endif
N
N#endif  /* __USB_CONFIG__ */
L 522 "USB\usb_config.c" 2
N	#endif
N
N#endif  /* __USB_CONFIG__ */
