; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\dma_stm32f10x.o --asm_dir=.\build\ --list_dir=.\build\ --depend=.\dma_stm32f10x.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\CMSIS-DAP -I.\USB -I.\User -I.\Driver\STM32F10x_ARM_Driver -I.\Driver\STM32F10x_StdPeriph_Driver\inc -IC:\Keil_v5\ARM\Pack\ARM\CMSIS\5.3.0\CMSIS\Include -IC:\Keil_v5\ARM\Pack\ARM\CMSIS\5.3.0\CMSIS\Driver\Include -ID:\Keil_v5\ARM\RV31\INC -ID:\Keil_v5\ARM\CMSIS\Include -ID:\Keil_v5\ARM\INC\ST\STM32F10x -D__MICROLIB -D__UVISION_VERSION=535 -DUSE_STDPERIPH_DRIVER -DSTM32F10X_MD -DBOARD_V1 -DSWO_PA10 -W --omf_browse=.\dma_stm32f10x.crf Driver\STM32F10x_ARM_Driver\DMA_STM32F10x.c]
                          THUMB

                          AREA ||i.DMA1_Channel1_Event||, CODE, READONLY, ALIGN=1

                  DMA1_Channel1_Event PROC
;;;282    /// DMA1 Channel Events
;;;283    __weak void DMA1_Channel1_Event (uint32_t event) {;}
000000  4770              BX       lr
;;;284    __weak void DMA1_Channel2_Event (uint32_t event) {;}
                          ENDP


                          AREA ||i.DMA1_Channel1_IRQHandler||, CODE, READONLY, ALIGN=2

                  DMA1_Channel1_IRQHandler PROC
;;;304    */
;;;305    void DMA1_Channel1_IRQHandler (void) {
000000  b510              PUSH     {r4,lr}
;;;306      uint32_t events;
;;;307    
;;;308      events = (DMA1->ISR >>  0) & DMA_CHANNEL_FLAGS;
000002  4805              LDR      r0,|L2.24|
000004  6800              LDR      r0,[r0,#0]
000006  f000040f          AND      r4,r0,#0xf
;;;309      DMA1->IFCR = events <<  0;
00000a  4803              LDR      r0,|L2.24|
00000c  6044              STR      r4,[r0,#4]
;;;310      DMA1_Channel1_Event(events);
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       DMA1_Channel1_Event
;;;311    }
000014  bd10              POP      {r4,pc}
;;;312    
                          ENDP

000016  0000              DCW      0x0000
                  |L2.24|
                          DCD      0x40020000

                          AREA ||i.DMA1_Channel2_Event||, CODE, READONLY, ALIGN=1

                  DMA1_Channel2_Event PROC
;;;283    __weak void DMA1_Channel1_Event (uint32_t event) {;}
;;;284    __weak void DMA1_Channel2_Event (uint32_t event) {;}
000000  4770              BX       lr
;;;285    __weak void DMA1_Channel3_Event (uint32_t event) {;}
                          ENDP


                          AREA ||i.DMA1_Channel2_IRQHandler||, CODE, READONLY, ALIGN=2

                  DMA1_Channel2_IRQHandler PROC
;;;316    */
;;;317    void DMA1_Channel2_IRQHandler (void) {
000000  b510              PUSH     {r4,lr}
;;;318      uint32_t events;
;;;319    
;;;320      events = (DMA1->ISR >>  4) & DMA_CHANNEL_FLAGS;
000002  4805              LDR      r0,|L4.24|
000004  6800              LDR      r0,[r0,#0]
000006  f3c01403          UBFX     r4,r0,#4,#4
;;;321      DMA1->IFCR = events <<  4;
00000a  0120              LSLS     r0,r4,#4
00000c  4902              LDR      r1,|L4.24|
00000e  6048              STR      r0,[r1,#4]
;;;322      DMA1_Channel2_Event(events);
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       DMA1_Channel2_Event
;;;323    }
000016  bd10              POP      {r4,pc}
;;;324    
                          ENDP

                  |L4.24|
                          DCD      0x40020000

                          AREA ||i.DMA1_Channel3_Event||, CODE, READONLY, ALIGN=1

                  DMA1_Channel3_Event PROC
;;;284    __weak void DMA1_Channel2_Event (uint32_t event) {;}
;;;285    __weak void DMA1_Channel3_Event (uint32_t event) {;}
000000  4770              BX       lr
;;;286    __weak void DMA1_Channel4_Event (uint32_t event) {;}
                          ENDP


                          AREA ||i.DMA1_Channel3_IRQHandler||, CODE, READONLY, ALIGN=2

                  DMA1_Channel3_IRQHandler PROC
;;;328    */
;;;329    void DMA1_Channel3_IRQHandler (void) {
000000  b510              PUSH     {r4,lr}
;;;330      uint32_t events;
;;;331    
;;;332      events = (DMA1->ISR >> 8) & DMA_CHANNEL_FLAGS;
000002  4805              LDR      r0,|L6.24|
000004  6800              LDR      r0,[r0,#0]
000006  f3c02403          UBFX     r4,r0,#8,#4
;;;333      DMA1->IFCR = events << 8;
00000a  0220              LSLS     r0,r4,#8
00000c  4902              LDR      r1,|L6.24|
00000e  6048              STR      r0,[r1,#4]
;;;334      DMA1_Channel3_Event(events);
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       DMA1_Channel3_Event
;;;335    }
000016  bd10              POP      {r4,pc}
;;;336    
                          ENDP

                  |L6.24|
                          DCD      0x40020000

                          AREA ||i.DMA1_Channel4_Event||, CODE, READONLY, ALIGN=1

                  DMA1_Channel4_Event PROC
;;;285    __weak void DMA1_Channel3_Event (uint32_t event) {;}
;;;286    __weak void DMA1_Channel4_Event (uint32_t event) {;}
000000  4770              BX       lr
;;;287    __weak void DMA1_Channel5_Event (uint32_t event) {;}
                          ENDP


                          AREA ||i.DMA1_Channel4_IRQHandler||, CODE, READONLY, ALIGN=2

                  DMA1_Channel4_IRQHandler PROC
;;;340    */
;;;341    void DMA1_Channel4_IRQHandler (void) {
000000  b510              PUSH     {r4,lr}
;;;342      uint32_t events;
;;;343    
;;;344      events = (DMA1->ISR >> 12) & DMA_CHANNEL_FLAGS;
000002  4805              LDR      r0,|L8.24|
000004  6800              LDR      r0,[r0,#0]
000006  f3c03403          UBFX     r4,r0,#12,#4
;;;345      DMA1->IFCR = events << 12;
00000a  0320              LSLS     r0,r4,#12
00000c  4902              LDR      r1,|L8.24|
00000e  6048              STR      r0,[r1,#4]
;;;346      DMA1_Channel4_Event(events);
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       DMA1_Channel4_Event
;;;347    }
000016  bd10              POP      {r4,pc}
;;;348    
                          ENDP

                  |L8.24|
                          DCD      0x40020000

                          AREA ||i.DMA1_Channel5_Event||, CODE, READONLY, ALIGN=1

                  DMA1_Channel5_Event PROC
;;;286    __weak void DMA1_Channel4_Event (uint32_t event) {;}
;;;287    __weak void DMA1_Channel5_Event (uint32_t event) {;}
000000  4770              BX       lr
;;;288    __weak void DMA1_Channel6_Event (uint32_t event) {;}
                          ENDP


                          AREA ||i.DMA1_Channel5_IRQHandler||, CODE, READONLY, ALIGN=2

                  DMA1_Channel5_IRQHandler PROC
;;;352    */
;;;353    void DMA1_Channel5_IRQHandler (void) {
000000  b510              PUSH     {r4,lr}
;;;354      uint32_t events;
;;;355    
;;;356      events = (DMA1->ISR >>  16) & DMA_CHANNEL_FLAGS;
000002  4805              LDR      r0,|L10.24|
000004  6800              LDR      r0,[r0,#0]
000006  f3c04403          UBFX     r4,r0,#16,#4
;;;357      DMA1->IFCR = events <<  16;
00000a  0420              LSLS     r0,r4,#16
00000c  4902              LDR      r1,|L10.24|
00000e  6048              STR      r0,[r1,#4]
;;;358      DMA1_Channel5_Event(events);
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       DMA1_Channel5_Event
;;;359    }
000016  bd10              POP      {r4,pc}
;;;360    
                          ENDP

                  |L10.24|
                          DCD      0x40020000

                          AREA ||i.DMA1_Channel6_Event||, CODE, READONLY, ALIGN=1

                  DMA1_Channel6_Event PROC
;;;287    __weak void DMA1_Channel5_Event (uint32_t event) {;}
;;;288    __weak void DMA1_Channel6_Event (uint32_t event) {;}
000000  4770              BX       lr
;;;289    __weak void DMA1_Channel7_Event (uint32_t event) {;}
                          ENDP


                          AREA ||i.DMA1_Channel6_IRQHandler||, CODE, READONLY, ALIGN=2

                  DMA1_Channel6_IRQHandler PROC
;;;364    */
;;;365    void DMA1_Channel6_IRQHandler (void) {
000000  b510              PUSH     {r4,lr}
;;;366      uint32_t events;
;;;367    
;;;368      events = (DMA1->ISR >>  20) & DMA_CHANNEL_FLAGS;
000002  4805              LDR      r0,|L12.24|
000004  6800              LDR      r0,[r0,#0]
000006  f3c05403          UBFX     r4,r0,#20,#4
;;;369      DMA1->IFCR = events <<  20;
00000a  0520              LSLS     r0,r4,#20
00000c  4902              LDR      r1,|L12.24|
00000e  6048              STR      r0,[r1,#4]
;;;370      DMA1_Channel6_Event(events);
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       DMA1_Channel6_Event
;;;371    }
000016  bd10              POP      {r4,pc}
;;;372    
                          ENDP

                  |L12.24|
                          DCD      0x40020000

                          AREA ||i.DMA1_Channel7_Event||, CODE, READONLY, ALIGN=1

                  DMA1_Channel7_Event PROC
;;;288    __weak void DMA1_Channel6_Event (uint32_t event) {;}
;;;289    __weak void DMA1_Channel7_Event (uint32_t event) {;}
000000  4770              BX       lr
;;;290    
                          ENDP


                          AREA ||i.DMA1_Channel7_IRQHandler||, CODE, READONLY, ALIGN=2

                  DMA1_Channel7_IRQHandler PROC
;;;376    */
;;;377    void DMA1_Channel7_IRQHandler (void) {
000000  b510              PUSH     {r4,lr}
;;;378      uint32_t events;
;;;379    
;;;380      events = (DMA1->ISR >> 24) & DMA_CHANNEL_FLAGS;
000002  4805              LDR      r0,|L14.24|
000004  6800              LDR      r0,[r0,#0]
000006  f3c06403          UBFX     r4,r0,#24,#4
;;;381      DMA1->IFCR = events << 24;
00000a  0620              LSLS     r0,r4,#24
00000c  4902              LDR      r1,|L14.24|
00000e  6048              STR      r0,[r1,#4]
;;;382      DMA1_Channel7_Event(events);
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       DMA1_Channel7_Event
;;;383    }
000016  bd10              POP      {r4,pc}
;;;384    
                          ENDP

                  |L14.24|
                          DCD      0x40020000

                          AREA ||i.DMA_ChannelInitialize||, CODE, READONLY, ALIGN=2

                  DMA_ChannelInitialize PROC
;;;41     */
;;;42     void DMA_ChannelInitialize (uint32_t dma, uint32_t channel) {
000000  b570              PUSH     {r4-r6,lr}
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;43       
;;;44       switch (dma) {
000006  2d01              CMP      r5,#1
000008  d171              BNE      |L15.238|
;;;45         case 1:
;;;46           RCC->AHBENR |=  RCC_AHBENR_DMA1EN;
00000a  483a              LDR      r0,|L15.244|
00000c  6940              LDR      r0,[r0,#0x14]
00000e  f0400001          ORR      r0,r0,#1
000012  4938              LDR      r1,|L15.244|
000014  6148              STR      r0,[r1,#0x14]
;;;47           switch (channel) {
000016  2c08              CMP      r4,#8
000018  d260              BCS      |L15.220|
00001a  e8dff004          TBB      [pc,r4]
00001e  5f04              DCB      0x5f,0x04
000020  101c2936          DCB      0x10,0x1c,0x29,0x36
000024  4350              DCB      0x43,0x50
;;;48             case 1:
;;;49               DMA1_Channel1->CCR = 0;
000026  2000              MOVS     r0,#0
000028  4933              LDR      r1,|L15.248|
00002a  6088              STR      r0,[r1,#8]
;;;50               DMA1->IFCR = DMA_IFCR_CGIF1  | DMA_IFCR_CTEIF1 |
00002c  200f              MOVS     r0,#0xf
00002e  6048              STR      r0,[r1,#4]
;;;51                            DMA_IFCR_CHTIF1 | DMA_IFCR_CTCIF1;
;;;52               NVIC_ClearPendingIRQ(DMA1_Channel1_IRQn);
000030  200b              MOVS     r0,#0xb
000032  f7fffffe          BL       __NVIC_ClearPendingIRQ
;;;53               NVIC_EnableIRQ(DMA1_Channel1_IRQn);
000036  200b              MOVS     r0,#0xb
000038  f7fffffe          BL       __NVIC_EnableIRQ
;;;54               break;
00003c  e04e              B        |L15.220|
;;;55             case 2:
;;;56               DMA1_Channel2->CCR = 0;
00003e  2000              MOVS     r0,#0
000040  492d              LDR      r1,|L15.248|
000042  61c8              STR      r0,[r1,#0x1c]
;;;57               DMA1->IFCR = DMA_IFCR_CGIF2  | DMA_IFCR_CTEIF2 |
000044  20f0              MOVS     r0,#0xf0
000046  6048              STR      r0,[r1,#4]
;;;58                            DMA_IFCR_CHTIF2 | DMA_IFCR_CTCIF2;
;;;59               NVIC_ClearPendingIRQ(DMA1_Channel2_IRQn);
000048  200c              MOVS     r0,#0xc
00004a  f7fffffe          BL       __NVIC_ClearPendingIRQ
;;;60               NVIC_EnableIRQ(DMA1_Channel2_IRQn);
00004e  200c              MOVS     r0,#0xc
000050  f7fffffe          BL       __NVIC_EnableIRQ
;;;61               break;
000054  e042              B        |L15.220|
;;;62             case 3:
;;;63               DMA1_Channel3->CCR = 0;
000056  2000              MOVS     r0,#0
000058  4927              LDR      r1,|L15.248|
00005a  6308              STR      r0,[r1,#0x30]
;;;64               DMA1->IFCR = DMA_IFCR_CGIF3  | DMA_IFCR_CTEIF3 |
00005c  f44f6070          MOV      r0,#0xf00
000060  6048              STR      r0,[r1,#4]
;;;65                            DMA_IFCR_CHTIF3 | DMA_IFCR_CTCIF3;
;;;66               NVIC_ClearPendingIRQ(DMA1_Channel3_IRQn);
000062  200d              MOVS     r0,#0xd
000064  f7fffffe          BL       __NVIC_ClearPendingIRQ
;;;67               NVIC_EnableIRQ(DMA1_Channel3_IRQn);
000068  200d              MOVS     r0,#0xd
00006a  f7fffffe          BL       __NVIC_EnableIRQ
;;;68               break;
00006e  e035              B        |L15.220|
;;;69             case 4:
;;;70               DMA1_Channel4->CCR = 0;
000070  2000              MOVS     r0,#0
000072  4921              LDR      r1,|L15.248|
000074  6448              STR      r0,[r1,#0x44]
;;;71               DMA1->IFCR = DMA_IFCR_CGIF4  | DMA_IFCR_CTEIF4 |
000076  f44f4070          MOV      r0,#0xf000
00007a  6048              STR      r0,[r1,#4]
;;;72                            DMA_IFCR_CHTIF4 | DMA_IFCR_CTCIF4;
;;;73               NVIC_ClearPendingIRQ(DMA1_Channel4_IRQn);
00007c  200e              MOVS     r0,#0xe
00007e  f7fffffe          BL       __NVIC_ClearPendingIRQ
;;;74               NVIC_EnableIRQ(DMA1_Channel4_IRQn);
000082  200e              MOVS     r0,#0xe
000084  f7fffffe          BL       __NVIC_EnableIRQ
;;;75               break;
000088  e028              B        |L15.220|
;;;76             case 5:
;;;77               DMA1_Channel5->CCR = 0;
00008a  2000              MOVS     r0,#0
00008c  491a              LDR      r1,|L15.248|
00008e  6588              STR      r0,[r1,#0x58]
;;;78               DMA1->IFCR = DMA_IFCR_CGIF5  | DMA_IFCR_CTEIF5 |
000090  f44f2070          MOV      r0,#0xf0000
000094  6048              STR      r0,[r1,#4]
;;;79                            DMA_IFCR_CHTIF5 | DMA_IFCR_CTCIF5;
;;;80               NVIC_ClearPendingIRQ(DMA1_Channel5_IRQn);
000096  200f              MOVS     r0,#0xf
000098  f7fffffe          BL       __NVIC_ClearPendingIRQ
;;;81               NVIC_EnableIRQ(DMA1_Channel5_IRQn);
00009c  200f              MOVS     r0,#0xf
00009e  f7fffffe          BL       __NVIC_EnableIRQ
;;;82               break;
0000a2  e01b              B        |L15.220|
;;;83             case 6:
;;;84               DMA1_Channel6->CCR = 0;
0000a4  2000              MOVS     r0,#0
0000a6  4914              LDR      r1,|L15.248|
0000a8  66c8              STR      r0,[r1,#0x6c]
;;;85               DMA1->IFCR = DMA_IFCR_CGIF6  | DMA_IFCR_CTEIF6 |
0000aa  f44f0070          MOV      r0,#0xf00000
0000ae  6048              STR      r0,[r1,#4]
;;;86                            DMA_IFCR_CHTIF6 | DMA_IFCR_CTCIF6;
;;;87               NVIC_ClearPendingIRQ(DMA1_Channel6_IRQn);
0000b0  2010              MOVS     r0,#0x10
0000b2  f7fffffe          BL       __NVIC_ClearPendingIRQ
;;;88               NVIC_EnableIRQ(DMA1_Channel6_IRQn);
0000b6  2010              MOVS     r0,#0x10
0000b8  f7fffffe          BL       __NVIC_EnableIRQ
;;;89               break;
0000bc  e00e              B        |L15.220|
;;;90             case 7:
;;;91               DMA1_Channel7->CCR = 0;
0000be  2000              MOVS     r0,#0
0000c0  490d              LDR      r1,|L15.248|
0000c2  3180              ADDS     r1,r1,#0x80
0000c4  6008              STR      r0,[r1,#0]
;;;92               DMA1->IFCR = DMA_IFCR_CGIF7  | DMA_IFCR_CTEIF7 |
0000c6  f04f6070          MOV      r0,#0xf000000
0000ca  490b              LDR      r1,|L15.248|
0000cc  6048              STR      r0,[r1,#4]
;;;93                            DMA_IFCR_CHTIF7 | DMA_IFCR_CTCIF7;
;;;94               NVIC_ClearPendingIRQ(DMA1_Channel7_IRQn);
0000ce  2011              MOVS     r0,#0x11
0000d0  f7fffffe          BL       __NVIC_ClearPendingIRQ
;;;95               NVIC_EnableIRQ(DMA1_Channel7_IRQn);
0000d4  2011              MOVS     r0,#0x11
0000d6  f7fffffe          BL       __NVIC_EnableIRQ
;;;96               break;
0000da  bf00              NOP      
                  |L15.220|
0000dc  bf00              NOP                            ;54
;;;97           }
;;;98           DMA1_Channel |= 1 << channel;
0000de  2001              MOVS     r0,#1
0000e0  40a0              LSLS     r0,r0,r4
0000e2  4906              LDR      r1,|L15.252|
0000e4  7809              LDRB     r1,[r1,#0]  ; DMA1_Channel
0000e6  4308              ORRS     r0,r0,r1
0000e8  4904              LDR      r1,|L15.252|
0000ea  7008              STRB     r0,[r1,#0]
;;;99           break;
0000ec  bf00              NOP      
                  |L15.238|
0000ee  bf00              NOP      
;;;100        
;;;101        #if defined (STM32F10X_ENABLE_DMA2)
;;;102        case 2:
;;;103          RCC->AHBENR |= RCC_AHBENR_DMA2EN;
;;;104          switch (channel) {
;;;105            case 1:
;;;106              DMA2_Channel1->CCR = 0;
;;;107              DMA2->IFCR = DMA_IFCR_CGIF1  | DMA_IFCR_CTEIF1 |
;;;108                           DMA_IFCR_CHTIF1 | DMA_IFCR_CTCIF1;
;;;109              NVIC_ClearPendingIRQ(DMA2_Channel1_IRQn);
;;;110              NVIC_EnableIRQ(DMA2_Channel1_IRQn);
;;;111              break;
;;;112            case 2:
;;;113              DMA2_Channel2->CCR = 0;
;;;114              DMA2->IFCR = DMA_IFCR_CGIF2  | DMA_IFCR_CTEIF2 |
;;;115                           DMA_IFCR_CHTIF2 | DMA_IFCR_CTCIF2;
;;;116              NVIC_ClearPendingIRQ(DMA2_Channel2_IRQn);
;;;117              NVIC_EnableIRQ(DMA2_Channel2_IRQn);
;;;118              break;
;;;119            case 3:
;;;120              DMA2_Channel3->CCR = 0;
;;;121              DMA2->IFCR = DMA_IFCR_CGIF3  | DMA_IFCR_CTEIF3 |
;;;122                           DMA_IFCR_CHTIF3 | DMA_IFCR_CTCIF3;
;;;123              NVIC_ClearPendingIRQ(DMA2_Channel3_IRQn);
;;;124              NVIC_EnableIRQ(DMA2_Channel3_IRQn);
;;;125              break;
;;;126            case 4:
;;;127              DMA2_Channel4->CCR = 0;
;;;128              DMA2->IFCR = DMA_IFCR_CGIF4  | DMA_IFCR_CTEIF4 |
;;;129                           DMA_IFCR_CHTIF4 | DMA_IFCR_CTCIF4;
;;;130    
;;;131              #if defined (STM32F10X_CL)
;;;132                NVIC_ClearPendingIRQ(DMA2_Channel4_IRQn);
;;;133                NVIC_EnableIRQ(DMA2_Channel4_IRQn);
;;;134              #else
;;;135                NVIC_ClearPendingIRQ(DMA2_Channel4_5_IRQn);
;;;136                NVIC_EnableIRQ(DMA2_Channel4_5_IRQn);
;;;137              #endif
;;;138              break;
;;;139            case 5:
;;;140              DMA2_Channel5->CCR = 0;
;;;141              DMA2->IFCR = DMA_IFCR_CGIF5  | DMA_IFCR_CTEIF5 |
;;;142                           DMA_IFCR_CHTIF5 | DMA_IFCR_CTCIF5;
;;;143    
;;;144              #if defined (STM32F10X_CL)
;;;145                NVIC_ClearPendingIRQ(DMA2_Channel5_IRQn);
;;;146                NVIC_EnableIRQ(DMA2_Channel5_IRQn);
;;;147              #elif defined (STM32F10X_HD_VL)
;;;148                if (AFIO->MAPR2 & AFIO_MAPR2_MISC_REMAP) {
;;;149                  /* DMA2 Channel 5 mapped at position 60 */
;;;150                  NVIC_ClearPendingIRQ(DMA2_Channel5_IRQn);
;;;151                  NVIC_EnableIRQ(DMA2_Channel5_IRQn);
;;;152                }
;;;153                else {
;;;154                  NVIC_ClearPendingIRQ(DMA2_Channel4_5_IRQn);
;;;155                  NVIC_EnableIRQ(DMA2_Channel4_5_IRQn);
;;;156                }
;;;157              #else
;;;158                NVIC_ClearPendingIRQ(DMA2_Channel4_5_IRQn);
;;;159                NVIC_EnableIRQ(DMA2_Channel4_5_IRQn);
;;;160              #endif
;;;161              break;
;;;162          }
;;;163          DMA2_Channel |= 1 << channel;
;;;164          break;
;;;165        #endif
;;;166      }
;;;167    }
0000f0  bd70              POP      {r4-r6,pc}
;;;168    
                          ENDP

0000f2  0000              DCW      0x0000
                  |L15.244|
                          DCD      0x40021000
                  |L15.248|
                          DCD      0x40020000
                  |L15.252|
                          DCD      DMA1_Channel

                          AREA ||i.DMA_ChannelUninitialize||, CODE, READONLY, ALIGN=2

                  DMA_ChannelUninitialize PROC
;;;174    */
;;;175    void DMA_ChannelUninitialize (uint32_t dma, uint32_t channel) {
000000  b570              PUSH     {r4-r6,lr}
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;176    
;;;177      switch (dma) {
000006  2d01              CMP      r5,#1
000008  d14e              BNE      |L16.168|
;;;178        case 1:
;;;179          if (DMA1_Channel == 0) {
00000a  4829              LDR      r0,|L16.176|
00000c  7800              LDRB     r0,[r0,#0]  ; DMA1_Channel
00000e  b900              CBNZ     r0,|L16.18|
                  |L16.16|
;;;180            // All DMA1 Channels are uninitialized
;;;181            return;
;;;182          }
;;;183          switch (channel) {
;;;184            case 1:
;;;185              NVIC_DisableIRQ(DMA1_Channel1_IRQn);
;;;186              DMA1_Channel1->CCR = 0;
;;;187              break;
;;;188            case 2:
;;;189              NVIC_DisableIRQ(DMA1_Channel2_IRQn);
;;;190              DMA1_Channel2->CCR = 0;
;;;191              break;
;;;192            case 3:
;;;193              NVIC_DisableIRQ(DMA1_Channel3_IRQn);
;;;194              DMA1_Channel3->CCR = 0;
;;;195              break;
;;;196            case 4:
;;;197              NVIC_DisableIRQ(DMA1_Channel4_IRQn);
;;;198              DMA1_Channel4->CCR = 0;
;;;199              break;
;;;200            case 5:
;;;201              NVIC_DisableIRQ(DMA1_Channel5_IRQn);
;;;202              DMA1_Channel5->CCR = 0;
;;;203              break;
;;;204            case 6:
;;;205              NVIC_DisableIRQ(DMA1_Channel6_IRQn);
;;;206              DMA1_Channel6->CCR = 0;
;;;207              break;
;;;208            case 7:
;;;209              NVIC_DisableIRQ(DMA1_Channel7_IRQn);
;;;210              DMA1_Channel7->CCR = 0;
;;;211              break;
;;;212          }
;;;213          DMA1_Channel &= ~(1 << channel);
;;;214          if (DMA1_Channel == 0){
;;;215            RCC->AHBENR &= ~RCC_AHBENR_DMA1EN;
;;;216          }
;;;217          break;
;;;218        
;;;219        #if defined (STM32F10X_ENABLE_DMA2)
;;;220        case 2:
;;;221          if (DMA2_Channel == 0) {
;;;222            // All DMA2 Channels are uninitialized
;;;223            return;
;;;224          }
;;;225          switch (channel) {
;;;226            case 1:
;;;227              NVIC_DisableIRQ(DMA2_Channel1_IRQn);
;;;228              DMA2_Channel1->CCR = 0;
;;;229              break;
;;;230            case 2:
;;;231              NVIC_DisableIRQ(DMA2_Channel2_IRQn);
;;;232              DMA2_Channel2->CCR = 0;
;;;233              break;
;;;234            case 3:
;;;235              NVIC_DisableIRQ(DMA2_Channel3_IRQn);
;;;236              DMA2_Channel3->CCR = 0;
;;;237              break;
;;;238            case 4:
;;;239              #if defined (STM32F10X_CL)
;;;240                NVIC_DisableIRQ(DMA2_Channel4_IRQn);
;;;241              #else
;;;242                /* If Channel 5 disabled, disable also Channel 4 */
;;;243                if (!(DMA2_Channel & (1 << 5))) {
;;;244                  NVIC_DisableIRQ(DMA2_Channel4_5_IRQn);
;;;245                }
;;;246              #endif
;;;247              DMA2_Channel4->CCR = 0;
;;;248              break;
;;;249            case 5:
;;;250              #if defined (STM32F10X_CL)
;;;251                NVIC_DisableIRQ(DMA2_Channel5_IRQn);
;;;252              #elif defined (STM32F10X_HD_VL)
;;;253                if (AFIO->MAPR2 & AFIO_MAPR2_MISC_REMAP) {
;;;254                  /* DMA2 Channel 5 mapped at position 60 */
;;;255                  NVIC_DisableIRQ(DMA2_Channel5_IRQn);
;;;256                }
;;;257                else {
;;;258                  /* If Channel 4 disabled, disable also Channel 5 */
;;;259                  if (!(DMA2_Channel & (1 << 4))) {
;;;260                    NVIC_DisableIRQ(DMA2_Channel4_5_IRQn);
;;;261                  }
;;;262                }
;;;263              #else
;;;264                /* If Channel 4 disabled, disable also Channel 5 */
;;;265                if (!(DMA2_Channel & (1 << 4))) {
;;;266                  NVIC_DisableIRQ(DMA2_Channel4_5_IRQn);
;;;267                }
;;;268              #endif
;;;269              DMA2_Channel5->CCR = 0;
;;;270              break;
;;;271          }
;;;272          DMA2_Channel &= ~(1 << channel);
;;;273          if (DMA2_Channel == 0){
;;;274            RCC->AHBENR &= ~RCC_AHBENR_DMA2EN;
;;;275          }
;;;276          break;
;;;277        #endif
;;;278      }
;;;279    }
000010  bd70              POP      {r4-r6,pc}
                  |L16.18|
000012  2c08              CMP      r4,#8                 ;183
000014  d237              BCS      |L16.134|
000016  e8dff004          TBB      [pc,r4]               ;183
00001a  3604              DCB      0x36,0x04
00001c  0b121920          DCB      0x0b,0x12,0x19,0x20
000020  272e              DCB      0x27,0x2e
000022  200b              MOVS     r0,#0xb               ;185
000024  f7fffffe          BL       __NVIC_DisableIRQ
000028  2000              MOVS     r0,#0                 ;186
00002a  4922              LDR      r1,|L16.180|
00002c  6088              STR      r0,[r1,#8]            ;186
00002e  e02a              B        |L16.134|
000030  200c              MOVS     r0,#0xc               ;189
000032  f7fffffe          BL       __NVIC_DisableIRQ
000036  2000              MOVS     r0,#0                 ;190
000038  491e              LDR      r1,|L16.180|
00003a  61c8              STR      r0,[r1,#0x1c]         ;190
00003c  e023              B        |L16.134|
00003e  200d              MOVS     r0,#0xd               ;193
000040  f7fffffe          BL       __NVIC_DisableIRQ
000044  2000              MOVS     r0,#0                 ;194
000046  491b              LDR      r1,|L16.180|
000048  6308              STR      r0,[r1,#0x30]         ;194
00004a  e01c              B        |L16.134|
00004c  200e              MOVS     r0,#0xe               ;197
00004e  f7fffffe          BL       __NVIC_DisableIRQ
000052  2000              MOVS     r0,#0                 ;198
000054  4917              LDR      r1,|L16.180|
000056  6448              STR      r0,[r1,#0x44]         ;198
000058  e015              B        |L16.134|
00005a  200f              MOVS     r0,#0xf               ;201
00005c  f7fffffe          BL       __NVIC_DisableIRQ
000060  2000              MOVS     r0,#0                 ;202
000062  4914              LDR      r1,|L16.180|
000064  6588              STR      r0,[r1,#0x58]         ;202
000066  e00e              B        |L16.134|
000068  2010              MOVS     r0,#0x10              ;205
00006a  f7fffffe          BL       __NVIC_DisableIRQ
00006e  2000              MOVS     r0,#0                 ;206
000070  4910              LDR      r1,|L16.180|
000072  66c8              STR      r0,[r1,#0x6c]         ;206
000074  e007              B        |L16.134|
000076  2011              MOVS     r0,#0x11              ;209
000078  f7fffffe          BL       __NVIC_DisableIRQ
00007c  2000              MOVS     r0,#0                 ;210
00007e  490d              LDR      r1,|L16.180|
000080  3180              ADDS     r1,r1,#0x80           ;210
000082  6008              STR      r0,[r1,#0]            ;210
000084  bf00              NOP                            ;211
                  |L16.134|
000086  bf00              NOP                            ;187
000088  2001              MOVS     r0,#1                 ;213
00008a  40a0              LSLS     r0,r0,r4              ;213
00008c  4908              LDR      r1,|L16.176|
00008e  7809              LDRB     r1,[r1,#0]            ;213  ; DMA1_Channel
000090  4381              BICS     r1,r1,r0              ;213
000092  4807              LDR      r0,|L16.176|
000094  7001              STRB     r1,[r0,#0]            ;213
000096  7800              LDRB     r0,[r0,#0]            ;214  ; DMA1_Channel
000098  b928              CBNZ     r0,|L16.166|
00009a  4807              LDR      r0,|L16.184|
00009c  6940              LDR      r0,[r0,#0x14]         ;215
00009e  f0200001          BIC      r0,r0,#1              ;215
0000a2  4905              LDR      r1,|L16.184|
0000a4  6148              STR      r0,[r1,#0x14]         ;215
                  |L16.166|
0000a6  bf00              NOP                            ;217
                  |L16.168|
0000a8  bf00              NOP                            ;217
0000aa  bf00              NOP      
0000ac  e7b0              B        |L16.16|
;;;280    
                          ENDP

0000ae  0000              DCW      0x0000
                  |L16.176|
                          DCD      DMA1_Channel
                  |L16.180|
                          DCD      0x40020000
                  |L16.184|
                          DCD      0x40021000

                          AREA ||i.__NVIC_ClearPendingIRQ||, CODE, READONLY, ALIGN=2

                  __NVIC_ClearPendingIRQ PROC
;;;1593    */
;;;1594   __STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
000000  2800              CMP      r0,#0
;;;1595   {
;;;1596     if ((int32_t)(IRQn) >= 0)
000002  db07              BLT      |L17.20|
;;;1597     {
;;;1598       NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
000004  f000021f          AND      r2,r0,#0x1f
000008  2101              MOVS     r1,#1
00000a  4091              LSLS     r1,r1,r2
00000c  4a02              LDR      r2,|L17.24|
00000e  0943              LSRS     r3,r0,#5
000010  f8421023          STR      r1,[r2,r3,LSL #2]
                  |L17.20|
;;;1599     }
;;;1600   }
000014  4770              BX       lr
;;;1601   
                          ENDP

000016  0000              DCW      0x0000
                  |L17.24|
                          DCD      0xe000e280

                          AREA ||i.__NVIC_DisableIRQ||, CODE, READONLY, ALIGN=2

                  __NVIC_DisableIRQ PROC
;;;1540    */
;;;1541   __STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
000000  2800              CMP      r0,#0
;;;1542   {
;;;1543     if ((int32_t)(IRQn) >= 0)
000002  db17              BLT      |L18.52|
;;;1544     {
;;;1545       NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
000004  f000021f          AND      r2,r0,#0x1f
000008  2101              MOVS     r1,#1
00000a  4091              LSLS     r1,r1,r2
00000c  4a0a              LDR      r2,|L18.56|
00000e  0943              LSRS     r3,r0,#5
000010  f8421023          STR      r1,[r2,r3,LSL #2]
;;;1546       __DSB();
000014  bf00              NOP      
000016  bf00              NOP      
000018  bf00              NOP      
00001a  f3bf8f4f          DSB      
00001e  bf00              NOP      
000020  bf00              NOP      
000022  bf00              NOP      
;;;1547       __ISB();
000024  bf00              NOP      
000026  bf00              NOP      
000028  bf00              NOP      
00002a  f3bf8f6f          ISB      
00002e  bf00              NOP      
000030  bf00              NOP      
000032  bf00              NOP      
                  |L18.52|
;;;1548     }
;;;1549   }
000034  4770              BX       lr
;;;1550   
                          ENDP

000036  0000              DCW      0x0000
                  |L18.56|
                          DCD      0xe000e180

                          AREA ||i.__NVIC_EnableIRQ||, CODE, READONLY, ALIGN=1

                  __NVIC_EnableIRQ PROC
;;;1502    */
;;;1503   __STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
000000  2800              CMP      r0,#0
;;;1504   {
;;;1505     if ((int32_t)(IRQn) >= 0)
000002  db0d              BLT      |L19.32|
;;;1506     {
;;;1507       __COMPILER_BARRIER();
000004  bf00              NOP      
000006  bf00              NOP      
;;;1508       NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
000008  f000021f          AND      r2,r0,#0x1f
00000c  2101              MOVS     r1,#1
00000e  4091              LSLS     r1,r1,r2
000010  0942              LSRS     r2,r0,#5
000012  0092              LSLS     r2,r2,#2
000014  f10222e0          ADD      r2,r2,#0xe000e000
000018  f8c21100          STR      r1,[r2,#0x100]
;;;1509       __COMPILER_BARRIER();
00001c  bf00              NOP      
00001e  bf00              NOP      
                  |L19.32|
;;;1510     }
;;;1511   }
000020  4770              BX       lr
;;;1512   
                          ENDP


                          AREA ||.data||, DATA, ALIGN=0

                  DMA1_Channel
000000  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "Driver\\STM32F10x_ARM_Driver\\DMA_STM32F10x.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___15_DMA_STM32F10x_c_4ef3ea2d____REV16|
#line 492 ".\\User\\cmsis_armcc.h"
|__asm___15_DMA_STM32F10x_c_4ef3ea2d____REV16| PROC
#line 493

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___15_DMA_STM32F10x_c_4ef3ea2d____REVSH|
#line 507
|__asm___15_DMA_STM32F10x_c_4ef3ea2d____REVSH| PROC
#line 508

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___15_DMA_STM32F10x_c_4ef3ea2d____RRX|
#line 694
|__asm___15_DMA_STM32F10x_c_4ef3ea2d____RRX| PROC
#line 695

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
